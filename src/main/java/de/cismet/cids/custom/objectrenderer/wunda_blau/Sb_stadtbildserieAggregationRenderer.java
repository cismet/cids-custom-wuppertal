/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.custom.objectrenderer.wunda_blau;

import Sirius.navigator.ui.RequestsFullSizeComponent;

import com.guigarage.jgrid.JGrid;

import org.jdesktop.jxlayer.JXLayer;
import org.jdesktop.jxlayer.plaf.effect.BufferedImageOpEffect;
import org.jdesktop.jxlayer.plaf.ext.LockableUI;

import org.openide.util.Exceptions;

import java.awt.CardLayout;
import java.awt.Cursor;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Rectangle;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImageOp;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.ListModel;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import de.cismet.cids.client.tools.DevelopmentTools;

import de.cismet.cids.dynamics.CidsBean;

import de.cismet.cids.tools.metaobjectrenderer.CidsBeanAggregationRenderer;

import de.cismet.tools.gui.FooterComponentProvider;

/**
 * DOCUMENT ME!
 *
 * @author   Gilles Baatz
 * @version  $Revision$, $Date$
 */
public class Sb_stadtbildserieAggregationRenderer extends javax.swing.JPanel implements RequestsFullSizeComponent,
    CidsBeanAggregationRenderer,
    FooterComponentProvider {

    //~ Static fields/initializers ---------------------------------------------

    private static final org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(
            Sb_stadtbildserieGridRenderer.class);

    //~ Instance fields --------------------------------------------------------

    private Collection<CidsBean> cidsBeans = null;
    private JXLayer layer;
    private LockableUI lockableUIInfoPanel;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBin;
    private javax.swing.JButton btnSwitchToBin;
    private javax.swing.JButton btnSwitchToSerie;
    private com.guigarage.jgrid.JGrid grdBin;
    private com.guigarage.jgrid.JGrid grdStadtbildserien;
    private de.cismet.cids.custom.objectrenderer.wunda_blau.Sb_stadtbildserieAggregationRendererInfoPanel infoPanel;
    private javax.swing.JLabel lblAmounts;
    private javax.swing.JLabel lblSwitchToBin;
    private javax.swing.JLabel lblSwitchToSerie;
    private javax.swing.JPanel panFooter;
    private javax.swing.JPanel panLeft;
    private javax.swing.JPanel panRight;
    private javax.swing.JPanel pnlLeuchtkasten;
    private de.cismet.tools.gui.RoundedPanel roundedPanel1;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form Sb_stadtbildserieAggregationRenderer.
     */
    public Sb_stadtbildserieAggregationRenderer() {
        initComponents();
        configureLockableInfoPanel();
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panFooter = new javax.swing.JPanel();
        panLeft = new javax.swing.JPanel();
        lblSwitchToSerie = new javax.swing.JLabel();
        btnSwitchToSerie = new javax.swing.JButton();
        panRight = new javax.swing.JPanel();
        btnSwitchToBin = new javax.swing.JButton();
        lblSwitchToBin = new javax.swing.JLabel();
        roundedPanel1 = new de.cismet.tools.gui.RoundedPanel();
        btnBin = new javax.swing.JButton();
        lblAmounts = new javax.swing.JLabel();
        pnlLeuchtkasten = new javax.swing.JPanel();
        grdStadtbildserien = new PictureSelectionJGrid();
        grdBin = new PictureSelectionJGrid();
        infoPanel = new de.cismet.cids.custom.objectrenderer.wunda_blau.Sb_stadtbildserieAggregationRendererInfoPanel();

        panFooter.setOpaque(false);
        panFooter.setLayout(new java.awt.GridBagLayout());

        panLeft.setOpaque(false);

        lblSwitchToSerie.setFont(new java.awt.Font("DejaVu Sans", 1, 14));      // NOI18N
        lblSwitchToSerie.setForeground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(
            lblSwitchToSerie,
            org.openide.util.NbBundle.getMessage(
                Sb_stadtbildserieAggregationRenderer.class,
                "Sb_stadtbildserieAggregationRenderer.lblSwitchToSerie.text")); // NOI18N
        lblSwitchToSerie.setEnabled(false);
        panLeft.add(lblSwitchToSerie);

        btnSwitchToSerie.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/arrow-left.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(
            btnSwitchToSerie,
            org.openide.util.NbBundle.getMessage(
                Sb_stadtbildserieAggregationRenderer.class,
                "Sb_stadtbildserieAggregationRenderer.btnSwitchToSerie.text"));                             // NOI18N
        btnSwitchToSerie.setBorderPainted(false);
        btnSwitchToSerie.setContentAreaFilled(false);
        btnSwitchToSerie.setEnabled(false);
        btnSwitchToSerie.setFocusPainted(false);
        btnSwitchToSerie.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    btnSwitchToSerieActionPerformed(evt);
                }
            });
        panLeft.add(btnSwitchToSerie);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        panFooter.add(panLeft, gridBagConstraints);

        panRight.setOpaque(false);

        btnSwitchToBin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/arrow-right.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(
            btnSwitchToBin,
            org.openide.util.NbBundle.getMessage(
                Sb_stadtbildserieAggregationRenderer.class,
                "Sb_stadtbildserieAggregationRenderer.btnSwitchToBin.text"));                              // NOI18N
        btnSwitchToBin.setBorderPainted(false);
        btnSwitchToBin.setContentAreaFilled(false);
        btnSwitchToBin.setFocusPainted(false);
        btnSwitchToBin.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    btnSwitchToBinActionPerformed(evt);
                }
            });
        panRight.add(btnSwitchToBin);

        lblSwitchToBin.setFont(new java.awt.Font("DejaVu Sans", 1, 14));      // NOI18N
        lblSwitchToBin.setForeground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(
            lblSwitchToBin,
            org.openide.util.NbBundle.getMessage(
                Sb_stadtbildserieAggregationRenderer.class,
                "Sb_stadtbildserieAggregationRenderer.lblSwitchToBin.text")); // NOI18N
        panRight.add(lblSwitchToBin);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        panFooter.add(panRight, gridBagConstraints);

        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        roundedPanel1.setMinimumSize(new java.awt.Dimension(300, 200));
        roundedPanel1.setPreferredSize(new java.awt.Dimension(300, 200));
        roundedPanel1.setLayout(new java.awt.GridBagLayout());

        btnBin.setIcon(new javax.swing.ImageIcon(
                getClass().getResource("/de/cismet/cids/custom/objectrenderer/wunda_blau/bin_empty.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(
            btnBin,
            org.openide.util.NbBundle.getMessage(
                Sb_stadtbildserieAggregationRenderer.class,
                "Sb_stadtbildserieAggregationRenderer.btnBin.text"));                                       // NOI18N
        btnBin.setToolTipText(org.openide.util.NbBundle.getMessage(
                Sb_stadtbildserieAggregationRenderer.class,
                "Sb_stadtbildserieAggregationRenderer.btnBin.toolTipText"));                                // NOI18N
        btnBin.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    btnBinActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        roundedPanel1.add(btnBin, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            lblAmounts,
            org.openide.util.NbBundle.getMessage(
                Sb_stadtbildserieAggregationRenderer.class,
                "Sb_stadtbildserieAggregationRenderer.lblAmounts.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        roundedPanel1.add(lblAmounts, gridBagConstraints);

        pnlLeuchtkasten.setOpaque(false);
        pnlLeuchtkasten.setLayout(new java.awt.CardLayout());

        grdStadtbildserien.setOpaque(false);
        pnlLeuchtkasten.add(grdStadtbildserien, "SERIEN");

        grdBin.setOpaque(false);
        pnlLeuchtkasten.add(grdBin, "BIN");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        roundedPanel1.add(pnlLeuchtkasten, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(roundedPanel1, gridBagConstraints);

        infoPanel.setMinimumSize(new java.awt.Dimension(100, 0));
        infoPanel.setPreferredSize(new java.awt.Dimension(100, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(infoPanel, gridBagConstraints);
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void btnBinActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_btnBinActionPerformed
        final List<Sb_stadtbildserieGridObject> gridObjectsToRemove = grdStadtbildserien.getSelectedValuesList();

        for (final Sb_stadtbildserieGridObject gridObject : gridObjectsToRemove) {
            ((DefaultListModel)grdStadtbildserien.getModel()).removeElement(gridObject);
            ((DefaultListModel)grdBin.getModel()).addElement(gridObject);
            gridObject.setModel((DefaultListModel)grdBin.getModel());
        }
        grdStadtbildserien.getSelectionModel().clearSelection();
        updateFooterLabels();
    } //GEN-LAST:event_btnBinActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void btnSwitchToSerieActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_btnSwitchToSerieActionPerformed
        final CardLayout cardLayout = (CardLayout)pnlLeuchtkasten.getLayout();
        cardLayout.show(pnlLeuchtkasten, "SERIEN");
        btnSwitchToBin.setEnabled(true);
        btnSwitchToSerie.setEnabled(false);
        lblSwitchToBin.setEnabled(true);
        lblSwitchToSerie.setEnabled(false);
        ((PictureSelectionJGrid)grdStadtbildserien).updateInfoPanel();
    }                                                                                    //GEN-LAST:event_btnSwitchToSerieActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void btnSwitchToBinActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_btnSwitchToBinActionPerformed
        final CardLayout cardLayout = (CardLayout)pnlLeuchtkasten.getLayout();
        cardLayout.show(pnlLeuchtkasten, "BIN");
        btnSwitchToBin.setEnabled(false);
        btnSwitchToSerie.setEnabled(true);
        lblSwitchToBin.setEnabled(false);
        lblSwitchToSerie.setEnabled(true);
        ((PictureSelectionJGrid)grdBin).updateInfoPanel();
    }                                                                                  //GEN-LAST:event_btnSwitchToBinActionPerformed

    @Override
    public Collection<CidsBean> getCidsBeans() {
        return cidsBeans;
    }

    @Override
    public void setCidsBeans(final Collection<CidsBean> beans) {
        this.cidsBeans = beans;
        if (beans != null) {
            infoPanel.setAggregationRenderer(this);
            final DefaultListModel model = (DefaultListModel)grdStadtbildserien.getModel();
            for (final CidsBean bean : beans) {
                final Sb_stadtbildserieGridObject gridObject = new Sb_stadtbildserieGridObject(model);
                gridObject.setCidsBean(bean);
                model.addElement(gridObject);
            }
            updateFooterLabels();
        }
    }

    @Override
    public void dispose() {
    }

    @Override
    public String getTitle() {
        return "Leuchtkasten";
    }

    @Override
    public void setTitle(final String title) {
    }

    /**
     * removes the info panel from this panel, wraps it in a lockable JXLayer and adds that layer again to the same
     * location on this panel.
     */
    private void configureLockableInfoPanel() {
        final GridBagConstraints gbc = ((GridBagLayout)this.getLayout()).getConstraints(infoPanel);
        remove(infoPanel);
        layer = new JXLayer(infoPanel);
        layer.setOpaque(false);
        add(layer, gbc);

        createNewLockableUI();
    }

    /**
     * DOCUMENT ME!
     */
    private void createNewLockableUI() {
        lockableUIInfoPanel = new LockableUI();

        final float[] blurKernel = { 1 / 9f, 1 / 9f, 1 / 9f, 1 / 9f, 1 / 9f, 1 / 9f, 1 / 9f, 1 / 9f, 1 / 9f };
        final BufferedImageOp blur = new ConvolveOp(new Kernel(3, 3, blurKernel));

        // wrap it with the jxlayer's BufferedImageOpEffect
        final BufferedImageOpEffect effect = new BufferedImageOpEffect(blur);
        // set it as the locked effect
        lockableUIInfoPanel.setLockedEffects(effect);

        lockableUIInfoPanel.setLockedCursor(new Cursor(Cursor.DEFAULT_CURSOR));

        // lock the layer
        lockableUIInfoPanel.setEnabled(true);
        lockableUIInfoPanel.setLocked(true);

        layer.setUI(lockableUIInfoPanel);
    }

    /**
     * DOCUMENT ME!
     *
     * @param  args  DOCUMENT ME!
     */
    public static void main(final String[] args) {
        try {
            final CidsBean[] beans = DevelopmentTools.createCidsBeansFromRMIConnectionOnLocalhost(
                    "WUNDA_BLAU",
                    "Administratoren",
                    "admin",
                    "kif",
                    "sb_stadtbildserie",
                    " id = 5 or id = 6 or id = 285195 or id = 8 or id = 9 or id = 10 or id = 11 or  id = 285198",
                    10);

            DevelopmentTools.createAggregationRendererInFrameFromRMIConnectionOnLocalhost(Arrays.asList(beans),
                "Leuchtkasten",
                1024,
                800);
        } catch (Exception ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    @Override
    public JComponent getFooterComponent() {
        return panFooter;
    }

    /**
     * DOCUMENT ME!
     */
    private void updateFooterLabels() {
        final String stadtbildserien = "Stadtbildserien (" + grdStadtbildserien.getModel().getSize() + ")";
        lblSwitchToSerie.setText(stadtbildserien);
        final String bin = "Papierkorb (" + grdBin.getModel().getSize() + ")";
        lblSwitchToBin.setText(bin);
    }

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private class PictureSelectionJGrid extends JGrid {

        //~ Constructors -------------------------------------------------------

        /**
         * Creates a new PictureSelectionJGrid object.
         */
        public PictureSelectionJGrid() {
            init();
        }

        /**
         * Creates a new PictureSelectionJGrid object.
         *
         * @param   model  DOCUMENT ME!
         *
         * @throws  IllegalArgumentException  DOCUMENT ME!
         */
        public PictureSelectionJGrid(final ListModel model) throws IllegalArgumentException {
            super(model);
            init();
        }

        //~ Methods ------------------------------------------------------------

        /**
         * DOCUMENT ME!
         */
        private void init() {
            final DefaultListModel<Sb_stadtbildserieGridObject> gridModel =
                new DefaultListModel<Sb_stadtbildserieGridObject>();
            this.setModel(gridModel);
            this.getCellRendererManager()
                    .setDefaultRenderer(
                        new de.cismet.cids.custom.objectrenderer.wunda_blau.Sb_stadtbildserieGridRenderer());

            this.addMouseMotionListener(new MouseAdapter() {

                    int lastIndex = -1;

                    @Override
                    public void mouseMoved(final MouseEvent e) {
                        if ((lastIndex >= 0) && (lastIndex < PictureSelectionJGrid.this.getModel().getSize())) {
                            final Object o = PictureSelectionJGrid.this.getModel().getElementAt(lastIndex);
                            if (o instanceof Sb_stadtbildserieGridObject) {
                                final Rectangle r = PictureSelectionJGrid.this.getCellBounds(lastIndex);
                                if ((r != null) && !r.contains(e.getPoint())) {
                                    // remove the marker once
                                    if (((Sb_stadtbildserieGridObject)o).isMarker()) {
                                        ((Sb_stadtbildserieGridObject)o).setMarker(false);
                                        PictureSelectionJGrid.this.repaint(r);
                                    }
                                }
                            }
                        }

                        final int index = PictureSelectionJGrid.this.getCellAt(e.getPoint());
                        if (index >= 0) {
                            final Object o = PictureSelectionJGrid.this.getModel().getElementAt(index);
                            if (o instanceof Sb_stadtbildserieGridObject) {
                                if (((Sb_stadtbildserieGridObject)o).getAmountImages() > 1) {
                                    final Rectangle r = PictureSelectionJGrid.this.getCellBounds(index);
                                    if (r != null) {
                                        ((Sb_stadtbildserieGridObject)o).setFraction(
                                            ((float)e.getPoint().x - (float)r.x)
                                                    / (float)r.width);
                                        ((Sb_stadtbildserieGridObject)o).setMarker(true);
                                        lastIndex = index;
                                        PictureSelectionJGrid.this.repaint(r);
                                    }
                                }
                            }
                        }
                    }
                });
            this.addListSelectionListener(new ListSelectionListener() {

                    @Override
                    public void valueChanged(final ListSelectionEvent e) {
                        if (!e.getValueIsAdjusting()) {
                            updateInfoPanel();
                        }
                    }
                });
        }

        /**
         * DOCUMENT ME!
         */
        public void updateInfoPanel() {
            int[] indexes = new int[0];
            final ListSelectionModel sm = PictureSelectionJGrid.this.getSelectionModel();
            final int iMin = sm.getMinSelectionIndex();
            final int iMax = sm.getMaxSelectionIndex();

            if ((iMin >= 0) && (iMin == iMax)) {
                indexes = new int[1];
                indexes[0] = iMin;
            }
            if (indexes.length == 1) {
                final Sb_stadtbildserieGridObject gridObject = (Sb_stadtbildserieGridObject)PictureSelectionJGrid.this
                            .getModel().getElementAt(indexes[0]);
                infoPanel.setGridObject(gridObject);
                lockableUIInfoPanel.setLocked(false);
                lockableUIInfoPanel.setEnabled(false);
            } else {
                // a new lockable UI has to be created every time, as otherwise rendering errors will
                // occur
                createNewLockableUI();
            }
        }
    }
}
