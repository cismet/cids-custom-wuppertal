/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Alb_baulastAggregationRendererPanel.java
 *
 * Created on 04.12.2009, 12:17:34
 */
package de.cismet.cids.custom.objectrenderer.wunda_blau;

import de.cismet.cids.custom.objectrenderer.utils.CidsBeanSupport;
import de.cismet.cids.custom.objectrenderer.utils.ObjectRendererUtils;
import de.cismet.cids.dynamics.CidsBean;
import de.cismet.tools.collections.TypeSafeCollections;
import java.util.Collection;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author srichter
 */
public class Alb_baulastAggregationRendererPanel extends javax.swing.JPanel {

    //Spaltenueberschriften
    private static final String[] AGR_COMLUMN_NAMES = new String[]{"Blattnummer", "Laufende Nummer", "Eintragungsdatum", "Befristungsdatum", "Geschlossen am", "LÃ¶schungsdatum", "Textblatt", "Lageplan", "Art"};
    //Namen der Properties -> Spalten
    private static final String[] AGR_PROPERTY_NAMES = new String[]{"laufende_nummer", "eintragungsdatum", "befristungsdatum", "geschlossen_am", "loeschungsdatum", "textblatt", "lageplan", "art"};
    private Collection<CidsBean> cidsBeans;

    /** Creates new form Alb_baulastAggregationRendererPanel */
    public Alb_baulastAggregationRendererPanel() {
        initComponents();
        scpAggregationTable.getViewport().setOpaque(false);
    }

    /**
     * Extracts the date from a CidsBean into an Object[] -> table row.
     * (Collection attributes are flatened to comaseparated lists)
     *
     * @param baulastBean
     * @param blBlattnummer
     * @return
     */
    private final Object[] cidsBean2Row(CidsBean baulastBean, String blBlattnummer) {
        if (baulastBean != null) {
            final Object[] result = new Object[AGR_COMLUMN_NAMES.length];
            result[0] = blBlattnummer;

            for (int i = 0; i < AGR_PROPERTY_NAMES.length; ++i) {
                result[i + 1] = propertyPrettyPrint(baulastBean.getProperty(AGR_PROPERTY_NAMES[i]));
            }
            return result;
        }
        return new Object[0];
    }

    private final String propertyPrettyPrint(Object propertyValue) {
        if (propertyValue instanceof Collection) {
            final Collection beanCollection = (Collection) propertyValue;
            final StringBuilder resultSB = new StringBuilder();
            for (Object bean : beanCollection) {
                if (resultSB.length() != 0) {
                    resultSB.append(", ");
                }
                resultSB.append(String.valueOf(bean));
            }
            return resultSB.toString();
        } else if (propertyValue != null) {
            return propertyValue.toString();
        } else {
            return "-";
        }
    }

    public void setCidsBeans(Collection<CidsBean> blattBeans) {
        if (blattBeans != null) {
            this.cidsBeans = blattBeans;
            final List<Object[]> tableData = TypeSafeCollections.newArrayList();
            for (CidsBean blattBean : blattBeans) {
                Collection<CidsBean> baulastenBeans = CidsBeanSupport.getBeanCollectionFromProperty(blattBean, "baulasten");
                for (CidsBean baulastBean : baulastenBeans) {
                    tableData.add(cidsBean2Row(baulastBean, String.valueOf(blattBean.getProperty("blattnummer"))));
                }
            }
            final DefaultTableModel model = new DefaultTableModel(tableData.toArray(new Object[tableData.size()][]), AGR_COMLUMN_NAMES);
            tblAggregation.setModel(model);
            ObjectRendererUtils.decorateTableWithSorter(tblAggregation);
        }
    }

    public Collection<CidsBean> getCidsBeans() {
        return cidsBeans;
    }

    public final int getRowCount() {
        return tblAggregation.getRowCount();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scpAggregationTable = new javax.swing.JScrollPane();
        tblAggregation = new javax.swing.JTable() {
            public boolean isCellEditable(int x, int y) {
                return false;
            }
        }
        ;

        setLayout(new java.awt.BorderLayout());

        scpAggregationTable.setOpaque(false);

        tblAggregation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblAggregation.setOpaque(false);
        scpAggregationTable.setViewportView(tblAggregation);

        add(scpAggregationTable, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scpAggregationTable;
    private javax.swing.JTable tblAggregation;
    // End of variables declaration//GEN-END:variables
}
