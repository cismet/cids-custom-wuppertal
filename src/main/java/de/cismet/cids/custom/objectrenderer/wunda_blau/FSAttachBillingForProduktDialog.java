/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cismet.cids.custom.objectrenderer.wunda_blau;

import Sirius.navigator.connection.SessionManager;
import Sirius.navigator.exception.ConnectionException;
import Sirius.navigator.types.treenode.RootTreeNode;
import Sirius.navigator.ui.ComponentRegistry;
import Sirius.navigator.ui.tree.MetaCatalogueTree;

import Sirius.server.middleware.types.MetaObject;
import Sirius.server.middleware.types.MetaObjectNode;

import java.awt.EventQueue;
import java.awt.Frame;

import java.util.Arrays;
import java.util.Collection;

import javax.swing.SwingWorker;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

import de.cismet.cids.custom.wunda_blau.search.actions.FormSolutionServerNewStuffAvailableAction;

import de.cismet.cids.dynamics.CidsBean;

import de.cismet.cids.server.actions.ServerActionParameter;

/**
 * DOCUMENT ME!
 *
 * @author   jruiz
 * @version  $Revision$, $Date$
 */
public class FSAttachBillingForProduktDialog extends javax.swing.JDialog {

    //~ Static fields/initializers ---------------------------------------------

    private static final transient org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(
            FSAttachBillingForProduktDialog.class);

    //~ Instance fields --------------------------------------------------------

    private final CidsBean cidsBean;
    private boolean autoRefreshEnabled = false;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form ReloadDialog.
     *
     * @param  cidsBean  DOCUMENT ME!
     */
    public FSAttachBillingForProduktDialog(final CidsBean cidsBean) {
        super((Frame)null, true);
        initComponents();

        this.cidsBean = cidsBean;
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(
                FSAttachBillingForProduktDialog.class,
                "FSAttachBillingForProduktDialog.title")); // NOI18N
        setModal(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(
            jLabel1,
            org.openide.util.NbBundle.getMessage(
                FSAttachBillingForProduktDialog.class,
                "FSAttachBillingForProduktDialog.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        jProgressBar1.setIndeterminate(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        jPanel1.add(jProgressBar1, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            jButton1,
            org.openide.util.NbBundle.getMessage(
                FSAttachBillingForProduktDialog.class,
                "FSAttachBillingForProduktDialog.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    jButton1ActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(jButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(9, 9, 9, 9);
        getContentPane().add(jPanel1, gridBagConstraints);

        pack();
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void jButton1ActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_jButton1ActionPerformed
        dispose();
    }                                                                            //GEN-LAST:event_jButton1ActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    public boolean isAutoRefreshEnabled() {
        return autoRefreshEnabled;
    }

    @Override
    public void setVisible(final boolean b) {
        new SwingWorker<Void, Void>() {

                @Override
                protected Void doInBackground() throws Exception {
                    final MetaObject mo = cidsBean.getMetaObject();
                    final MetaObjectNode mon = new MetaObjectNode(mo.getDomain(), mo.getId(), mo.getClassID());

                    final ServerActionParameter<Collection<MetaObjectNode>> paramMon =
                        new ServerActionParameter<Collection<MetaObjectNode>>(
                            FormSolutionServerNewStuffAvailableAction.PARAMETER_TYPE.METAOBJECTNODES.toString(),
                            Arrays.asList(mon));
                    final ServerActionParameter<Integer> paramStep = new ServerActionParameter<Integer>(
                            FormSolutionServerNewStuffAvailableAction.PARAMETER_TYPE.STEP_TO_EXECUTE.toString(),
                            FormSolutionServerNewStuffAvailableAction.STATUS_BILLING);
                    final ServerActionParameter<Boolean> singleStep = new ServerActionParameter<Boolean>(
                            FormSolutionServerNewStuffAvailableAction.PARAMETER_TYPE.SINGLE_STEP.toString(),
                            Boolean.TRUE);

                    try {
                        SessionManager.getConnection()
                                .executeTask(SessionManager.getSession().getUser(),
                                    FormSolutionServerNewStuffAvailableAction.TASK_NAME,
                                    "WUNDA_BLAU",
                                    null,
                                    paramMon,
                                    paramStep,
                                    singleStep);
                    } catch (final ConnectionException ex3) {
                        LOG.error(ex3, ex3);
                    }
                    return null;
                }

                @Override
                protected void done() {
                    if (isVisible()) {
                        dispose();
                        doAutoRefresh();
                    }
                }
            }.execute();
        super.setVisible(b);
    }

    /**
     * DOCUMENT ME!
     */
    private void doAutoRefresh() {
        final MetaCatalogueTree currentTree = ComponentRegistry.getRegistry().getActiveCatalogue();
        final TreePath selectionPath = currentTree.getSelectionPath();
        if ((selectionPath != null) && (selectionPath.getPath().length > 0)) {
            try {
                final RootTreeNode rootTreeNode = new RootTreeNode(SessionManager.getProxy().getRoots());

                final Runnable r = new Runnable() {

                        @Override
                        public void run() {
                            ((DefaultTreeModel)currentTree.getModel()).setRoot(rootTreeNode);
                            ((DefaultTreeModel)currentTree.getModel()).reload();
                            currentTree.exploreSubtree(selectionPath);
                        }
                    };

                if (EventQueue.isDispatchThread()) {
                    r.run();
                } else {
                    EventQueue.invokeLater(r);
                }
            } catch (ConnectionException ex) {
            }
        }
    }
}
