/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ThemaAggregationRenderer.java
 *
 * Created on 30.03.2009, 15:59:52
 */
package de.cismet.cids.custom.objectrenderer.wunda_blau;

import de.cismet.cids.custom.objectrenderer.converter.SQLDateToStringConverter;
import de.cismet.cids.custom.objectrenderer.utils.AbstractJasperReportPrint;
import de.cismet.cids.custom.objectrenderer.utils.ObjectRendererUIUtils;
import de.cismet.cids.custom.objectrenderer.utils.XMLPropertyParser;
import de.cismet.cids.custom.wunda_blau.res.StaticProperties;
import de.cismet.cids.dynamics.CidsBean;
import de.cismet.cids.tools.metaobjectrenderer.CidsBeanAggregationRenderer;
import de.cismet.tools.CismetThreadPool;
import de.cismet.tools.gui.RoundedPanel;
import de.cismet.tools.gui.TitleComponentProvider;
import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedInputStream;
import java.io.InputStream;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.ExecutionException;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingWorker;

/**
 *
 * @author thorsten
 */
public class Arc_stadtbildAggregationRenderer extends javax.swing.JPanel implements CidsBeanAggregationRenderer, TitleComponentProvider {

    private static final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(Arc_stadtbildAggregationRenderer.class);
    private static final XMLPropertyParser labelParser;
    private Collection<CidsBean> cidsBeans = null;
//    private static final List<String> ATTRIBUTES;
//    private static final List<String> DESCRIPTIONS;
//    private static final List<String> STYLES;
    public static final int GAP = 5;
    private static final String ERROR_STR = "/de/cismet/cids/tools/metaobjectrenderer/examples/error.png";
    public static final ImageIcon ERROR_ICON = new ImageIcon(Arc_stadtbildAggregationRenderer.class.getResource(ERROR_STR));
    public static final ImageIcon LOADING_ICON = new ImageIcon(Arc_stadtbildAggregationRenderer.class.getResource("/de/cismet/cids/custom/icons/load.png"));
    private JLabel[] imgLabels;
    private PictureWorker worker;
    private static final int MAX_ROWS = 2;

    static {
        final InputStream is = new BufferedInputStream(Arc_stadtbildAggregationRenderer.class.getResourceAsStream("/de/cismet/cids/custom/wunda_blau/res/stadtbild_agg_renderer.xml"));
//        final InputStream is = new BufferedInputStream(Arc_stadtbildAggregationRenderer.class.getResourceAsStream("/res/stadtbild_agg_renderer.xml"));
        labelParser = new XMLPropertyParser(is);
        //add converters for correct property presentation
        labelParser.addConverterForClass(java.sql.Date.class, new SQLDateToStringConverter());
    }

    public Arc_stadtbildAggregationRenderer() {
        initComponents();
        ObjectRendererUIUtils.decorateComponentWithMouseOverCursorChange(lblPrint, Cursor.HAND_CURSOR, Cursor.DEFAULT_CURSOR);
    }

    @Override
    public void removeNotify() {
        final PictureWorker w = worker;
        if (w != null) {
            w.cancel(true);
        }
        super.removeNotify();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panTitle = new javax.swing.JPanel();
        panTitleString = new javax.swing.JPanel();
        lblAgrTitle = new javax.swing.JLabel();
        panTitlePrint = new javax.swing.JPanel();
        lblPrint = new javax.swing.JLabel();
        panAgrContent = new javax.swing.JPanel();

        panTitle.setOpaque(false);
        panTitle.setLayout(new java.awt.BorderLayout());

        panTitleString.setOpaque(false);
        panTitleString.setLayout(new java.awt.GridBagLayout());

        lblAgrTitle.setFont(new java.awt.Font("Tahoma", 1, 18));
        lblAgrTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblAgrTitle.setText("error ...");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panTitleString.add(lblAgrTitle, gridBagConstraints);

        panTitle.add(panTitleString, java.awt.BorderLayout.CENTER);

        panTitlePrint.setOpaque(false);
        panTitlePrint.setLayout(new java.awt.GridBagLayout());

        lblPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/cismet/cids/custom/icons/printer.png"))); // NOI18N
        lblPrint.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblPrintMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panTitlePrint.add(lblPrint, gridBagConstraints);

        panTitle.add(panTitlePrint, java.awt.BorderLayout.EAST);

        setLayout(new java.awt.BorderLayout());

        panAgrContent.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        panAgrContent.setOpaque(false);
        panAgrContent.setLayout(new java.awt.GridLayout(1, 0));

        //final LockableUI lockTblAgr = new LockableUI();
        //lockLayerAgr.setLockedCursor(Cursor.getDefaultCursor());
        //final JXLayer<JComponent> lockTblLayer = new JXLayer<JComponent>(panAgrContent, lockTblAgr);

        add(panAgrContent, java.awt.BorderLayout.CENTER);
        //panAggregationRenderer.add(layerAgr, java.awt.BorderLayout.CENTER);
        //lockTblAgr.setLocked(true);
    }// </editor-fold>//GEN-END:initComponents

    private void lblPrintMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPrintMouseClicked
        if (evt != null && !evt.isPopupTrigger()) {
            final Collection<CidsBean> beans = cidsBeans;
            if (beans != null) {
                final AbstractJasperReportPrint jp = new StadtbildJasperReportPrint(Arc_stadtbildRenderer.REPORT_FILE, beans);
                jp.print();
            }
        }
}//GEN-LAST:event_lblPrintMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblAgrTitle;
    private javax.swing.JLabel lblPrint;
    private javax.swing.JPanel panAgrContent;
    private javax.swing.JPanel panTitle;
    private javax.swing.JPanel panTitlePrint;
    private javax.swing.JPanel panTitleString;
    // End of variables declaration//GEN-END:variables
//    private org.jdesktop.beansbinding.BindingGroup bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

    @Override
    public Collection<CidsBean> getCidsBeans() {
        return cidsBeans;
    }

    @Override
    public void setCidsBeans(Collection<CidsBean> cidsBeans) {
        this.cidsBeans = cidsBeans;
        setTitle(null);
        // GridLayout der Anzahl Objekte anpassen
        final GridLayout gl = (GridLayout) panAgrContent.getLayout();
        gl.setHgap(GAP);
        gl.setVgap(GAP);

        final int rowsRemainer = cidsBeans.size() % MAX_ROWS;
        final int lowerBound = cidsBeans.size() / MAX_ROWS;
        gl.setRows(rowsRemainer == 0 ? lowerBound : (lowerBound + 1));

        imgLabels = new JLabel[cidsBeans.size()];

        // In Schleife alle Objekte erzeugen und einfuegen
        int i = -1;
        for (final CidsBean bean : cidsBeans) {
            ++i;
            final RoundedPanel rnd = new RoundedPanel();
            rnd.setAlpha(40);
            rnd.setLayout(new BorderLayout());

            final List<JLabel> labels = labelParser.getLabels(bean);

            final GridLayout labelLayout = new GridLayout(labels.size(), 1, GAP, GAP);
            final JPanel panSpacing = new JPanel(new BorderLayout());
            panSpacing.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
            panSpacing.setOpaque(false);
            final RoundedPanel panLabels = new RoundedPanel(labelLayout);
            panSpacing.add(panLabels, BorderLayout.CENTER);
            panLabels.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
            panLabels.setAlpha(255);
            for (final JLabel l : labels) {
                panLabels.add(l);
            }

            final JPanel panPic = new JPanel(new FlowLayout(FlowLayout.CENTER));
            panPic.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
            panPic.setOpaque(false);
            imgLabels[i] = new JLabel();
            imgLabels[i].setIcon(LOADING_ICON);
            panPic.add(imgLabels[i]);
            rnd.add(panSpacing, BorderLayout.SOUTH);
            rnd.add(panPic, BorderLayout.CENTER);
            panAgrContent.add(rnd);
        }
        final PictureWorker w = worker;
        if (w != null) {
            w.cancel(true);
            worker = null;
        }
        worker = new PictureWorker(cidsBeans);
        CismetThreadPool.execute(worker);
    }

    @Override
    public String getTitle() {
        return lblAgrTitle.getText();
    }

    @Override
    public void setTitle(String title) {
        String desc = "Lichtkasten";
        final Collection<CidsBean> beans = cidsBeans;
        if (beans != null && beans.size() > 0) {
            desc += " - " + beans.size() + " Bilder ausgewählt";
        }
        lblAgrTitle.setText(desc);
    }

    @Override
    public JComponent getTitleComponent() {
        return panTitle;
    }

    final class PictureWorker extends SwingWorker<Void, ImageIcon> {

        private int i = -1;
        private String[] urls;

        public PictureWorker(Collection<CidsBean> beans) {
            this.beans = beans;
        }
        private Collection<CidsBean> beans;

        @Override
        protected Void doInBackground() throws Exception {
            int j = -1;
            urls = new String[beans.size()];
            for (final CidsBean b : beans) {
                if (isCancelled()) {
                    return null;
                }
                ImageIcon ii = null;
                final Object o = b.getProperty("bildnummer");
                if (o != null) {
                    final String url = StaticProperties.ARCHIVAR_URL_PREFIX + o + StaticProperties.ARCHIVAR_URL_SUFFIX;
                    urls[++j] = url;
                    ii = ObjectRendererUIUtils.loadPicture(url, 300, 300, 4);
                }
                if (ii == null) {
                    ii = ERROR_ICON;
                }
                publish(ii);
            }
            return null;
        }

        @Override
        protected void done() {
            try {
                get();
            } catch (InterruptedException ex) {
                log.warn(ex, ex);
            } catch (ExecutionException ex) {
                log.error(ex, ex);
            }
        }

        @Override
        protected void process(List<ImageIcon> chunks) {

            for (ImageIcon ii : chunks) {
                if (!isCancelled()) {
                    if (++i < imgLabels.length) {
                        final JLabel label = imgLabels[i];
                        if (label != null) {
                            label.setIcon(ii);
                        }
                        ObjectRendererUIUtils.decorateComponentWithMouseOverCursorChange(label, Cursor.HAND_CURSOR, Cursor.DEFAULT_CURSOR);
                        if (ii != ERROR_ICON) {
                            label.addMouseListener(new MouseAdapter() {

                                private final String u = urls[i];

                                @Override
                                public void mouseClicked(MouseEvent e) {
                                    if (!e.isPopupTrigger()) {
                                        if (u != null) {
                                            ObjectRendererUIUtils.openURL(u);
                                        }
                                    }
                                }
                            });
                        }
                    }
                }
            }
        }
    }
}
