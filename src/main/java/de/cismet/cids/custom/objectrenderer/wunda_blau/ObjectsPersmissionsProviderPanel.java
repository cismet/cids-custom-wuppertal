/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cismet.cids.custom.objectrenderer.wunda_blau;

import Sirius.navigator.connection.SessionManager;

import Sirius.server.middleware.types.MetaObject;
import Sirius.server.middleware.types.MetaObjectNode;

import org.apache.log4j.Logger;

import java.sql.Timestamp;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.SwingWorker;

import de.cismet.cids.custom.utils.CidsBeansTableModel;
import de.cismet.cids.custom.wunda_blau.search.server.ObjectsPermissionsSearch;

import de.cismet.cids.dynamics.CidsBean;

import de.cismet.cids.editors.CidsBeanList;

import de.cismet.connectioncontext.ConnectionContext;
import de.cismet.connectioncontext.ConnectionContextStore;

/**
 * DOCUMENT ME!
 *
 * @author   jruiz
 * @version  $Revision$, $Date$
 */
public class ObjectsPersmissionsProviderPanel extends javax.swing.JPanel implements ConnectionContextStore {

    //~ Static fields/initializers ---------------------------------------------

    private static final transient Logger LOG = Logger.getLogger(ObjectsPersmissionsProviderPanel.class);

    private static final String[] COLUMN_PROPERTIES = {
            null,
            null,
            "group_name",
            "user_name",
            "read",
            "write",
            "ts_end",
            "ts_start"
        };
    private static final String[] COLUMN_NAMES = {
            "Klasse",
            "Objekt",
            "Gruppe",
            "Benutzer",
            "Lesen",
            "Schreiben",
            "Gültig ab",
            "Gültig bis"
        };
    private static final Class[] COLUMN_CLASSES = {
            String.class,
            CidsBean.class,
            String.class,
            String.class,
            Boolean.class,
            Boolean.class,
            Timestamp.class,
            Timestamp.class
        };
    private static final boolean[] COLUMN_EDITABLE = { false, false, true, true, true, true, true, true };

    //~ Instance fields --------------------------------------------------------

    private ConnectionContext connectionContext = ConnectionContext.createDummy();

    private final Map<String, CidsBean> objectsMap = new HashMap<>();
    private final Collection<CidsBean> permissionBeansToDelete = new ArrayList<>();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreatePermission;
    private javax.swing.JButton btnDeletePermission;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JRadioButton cbAllObjects;
    private javax.swing.JRadioButton cbGroupEnabled;
    private javax.swing.JCheckBox cbRead;
    private javax.swing.JRadioButton cbSelectedObjects;
    private javax.swing.JRadioButton cbUserEnabled;
    private javax.swing.JCheckBox cbWrite;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblGroupName;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JList<CidsBean> lstObjects;
    private org.jdesktop.swingx.JXTable tblPermissions;
    private javax.swing.JTextField txtGroupName;
    private javax.swing.JTextField txtUserName;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form ObjectsPersmissionProviderPanel.
     */
    public ObjectsPersmissionsProviderPanel() {
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jDialog1 = new javax.swing.JDialog();
        jPanel8 = new javax.swing.JPanel();
        jPanel7 = this;
        jPanel6 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        lblUserName = new javax.swing.JLabel();
        lblGroupName = new javax.swing.JLabel();
        txtUserName = new javax.swing.JTextField();
        txtGroupName = new javax.swing.JTextField();
        cbSelectedObjects = new javax.swing.JRadioButton();
        cbAllObjects = new javax.swing.JRadioButton();
        cbUserEnabled = new javax.swing.JRadioButton();
        cbGroupEnabled = new javax.swing.JRadioButton();
        jPanel5 = new javax.swing.JPanel();
        cbRead = new javax.swing.JCheckBox();
        cbWrite = new javax.swing.JCheckBox();
        btnCreatePermission = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstObjects = new CidsBeanList();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPermissions = new org.jdesktop.swingx.JXTable();
        btnDeletePermission = new javax.swing.JButton();

        jDialog1.setTitle(org.openide.util.NbBundle.getMessage(ObjectsPersmissionsProviderPanel.class, "ObjectsPersmissionsProviderPanel.jDialog1.title")); // NOI18N
        jDialog1.setMinimumSize(new java.awt.Dimension(1000, 500));
        jDialog1.setModal(true);
        jDialog1.getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel8.setLayout(new java.awt.GridBagLayout());

        jPanel7.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel8.add(jPanel7, gridBagConstraints);

        jPanel6.setLayout(new java.awt.GridLayout(1, 0, 10, 0));

        org.openide.awt.Mnemonics.setLocalizedText(jButton4, org.openide.util.NbBundle.getMessage(ObjectsPersmissionsProviderPanel.class, "ObjectsPersmissionsProviderPanel.jButton4.text")); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton4);

        org.openide.awt.Mnemonics.setLocalizedText(jButton3, org.openide.util.NbBundle.getMessage(ObjectsPersmissionsProviderPanel.class, "ObjectsPersmissionsProviderPanel.jButton3.text")); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton3);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel8.add(jPanel6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jDialog1.getContentPane().add(jPanel8, gridBagConstraints);

        setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ObjectsPersmissionsProviderPanel.class, "ObjectsPersmissionsProviderPanel.jPanel2.border.title"))); // NOI18N
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel4.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(lblUserName, org.openide.util.NbBundle.getMessage(ObjectsPersmissionsProviderPanel.class, "ObjectsPersmissionsProviderPanel.lblUserName.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel4.add(lblUserName, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblGroupName, org.openide.util.NbBundle.getMessage(ObjectsPersmissionsProviderPanel.class, "ObjectsPersmissionsProviderPanel.lblGroupName.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel4.add(lblGroupName, gridBagConstraints);

        txtUserName.setText(org.openide.util.NbBundle.getMessage(ObjectsPersmissionsProviderPanel.class, "ObjectsPersmissionsProviderPanel.txtUserName.text")); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, cbUserEnabled, org.jdesktop.beansbinding.ELProperty.create("${selected}"), txtUserName, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel4.add(txtUserName, gridBagConstraints);

        txtGroupName.setText(org.openide.util.NbBundle.getMessage(ObjectsPersmissionsProviderPanel.class, "ObjectsPersmissionsProviderPanel.txtGroupName.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, cbGroupEnabled, org.jdesktop.beansbinding.ELProperty.create("${selected}"), txtGroupName, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel4.add(txtGroupName, gridBagConstraints);

        buttonGroup1.add(cbSelectedObjects);
        cbSelectedObjects.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(cbSelectedObjects, org.openide.util.NbBundle.getMessage(ObjectsPersmissionsProviderPanel.class, "ObjectsPersmissionsProviderPanel.cbSelectedObjects.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel4.add(cbSelectedObjects, gridBagConstraints);

        buttonGroup1.add(cbAllObjects);
        org.openide.awt.Mnemonics.setLocalizedText(cbAllObjects, org.openide.util.NbBundle.getMessage(ObjectsPersmissionsProviderPanel.class, "ObjectsPersmissionsProviderPanel.cbAllObjects.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel4.add(cbAllObjects, gridBagConstraints);

        buttonGroup2.add(cbUserEnabled);
        cbUserEnabled.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(cbUserEnabled, org.openide.util.NbBundle.getMessage(ObjectsPersmissionsProviderPanel.class, "ObjectsPersmissionsProviderPanel.cbUserEnabled.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel4.add(cbUserEnabled, gridBagConstraints);

        buttonGroup2.add(cbGroupEnabled);
        org.openide.awt.Mnemonics.setLocalizedText(cbGroupEnabled, org.openide.util.NbBundle.getMessage(ObjectsPersmissionsProviderPanel.class, "ObjectsPersmissionsProviderPanel.cbGroupEnabled.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel4.add(cbGroupEnabled, gridBagConstraints);

        jPanel5.setLayout(new java.awt.GridLayout(1, 0));

        org.openide.awt.Mnemonics.setLocalizedText(cbRead, org.openide.util.NbBundle.getMessage(ObjectsPersmissionsProviderPanel.class, "ObjectsPersmissionsProviderPanel.cbRead.text")); // NOI18N
        jPanel5.add(cbRead);

        org.openide.awt.Mnemonics.setLocalizedText(cbWrite, org.openide.util.NbBundle.getMessage(ObjectsPersmissionsProviderPanel.class, "ObjectsPersmissionsProviderPanel.cbWrite.text")); // NOI18N
        jPanel5.add(cbWrite);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel4.add(jPanel5, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(btnCreatePermission, org.openide.util.NbBundle.getMessage(ObjectsPersmissionsProviderPanel.class, "ObjectsPersmissionsProviderPanel.btnCreatePermission.text")); // NOI18N
        btnCreatePermission.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreatePermissionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel4.add(btnCreatePermission, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel4.add(jSeparator1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        jPanel2.add(jPanel4, gridBagConstraints);

        jScrollPane3.setViewportView(lstObjects);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel2.add(jScrollPane3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jPanel2, gridBagConstraints);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ObjectsPersmissionsProviderPanel.class, "ObjectsPersmissionsProviderPanel.jPanel3.border.title"))); // NOI18N
        jPanel3.setLayout(new java.awt.GridBagLayout());

        tblPermissions.setModel(new ObjectsPermissionsTableModel());
        jScrollPane1.setViewportView(tblPermissions);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3.add(jScrollPane1, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(btnDeletePermission, org.openide.util.NbBundle.getMessage(ObjectsPersmissionsProviderPanel.class, "ObjectsPersmissionsProviderPanel.btnDeletePermission.text")); // NOI18N
        btnDeletePermission.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePermissionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3.add(btnDeletePermission, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jPanel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel1, gridBagConstraints);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void jButton3ActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        jDialog1.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    private Collection<CidsBean> getPermissionBeansToDelete() {
        return permissionBeansToDelete;
    }

    /**
     * DOCUMENT ME!
     */
    private void persistPermissions() {
        final Collection<CidsBean> allPermissionBeansToPersist = new ArrayList<>();
        allPermissionBeansToPersist.addAll(getPermissionsTableModel().getCidsBeans());
        allPermissionBeansToPersist.addAll(getPermissionBeansToDelete());

        final Map<String, Collection<CidsBean>> permissionBeansPerDomain = new HashMap<>();
        for (final CidsBean permissionBean : allPermissionBeansToPersist) {
            if ((permissionBean != null) && (MetaObject.NO_STATUS != permissionBean.getMetaObject().getStatus())) {
                final MetaObject permissionMo = permissionBean.getMetaObject();
                if (permissionMo != null) {
                    final String domain = permissionMo.getDomain();
                    final Collection<CidsBean> permissionBeans;
                    if (permissionBeansPerDomain.containsKey(domain)) {
                        permissionBeans = permissionBeansPerDomain.get(domain);
                    } else {
                        permissionBeans = new ArrayList<>();
                        permissionBeansPerDomain.put(domain, permissionBeans);
                    }
                    permissionBeans.add(permissionBean);
                }
            }
        }

        final Collection<CidsBean> collectorBeans = new ArrayList<>(permissionBeansPerDomain.size());
        for (final String domain : permissionBeansPerDomain.keySet()) {
            try {
                final CidsBean collectorBean = CidsBean.createNewCidsBeanFromTableName(
                        domain,
                        "CS_OBJECTPERMISSIONS_COLLECTOR",
                        getConnectionContext());
                final Collection permissionBeans = permissionBeansPerDomain.get(domain);
                if (permissionBeans != null) {
                    collectorBean.getBeanCollectionProperty("arr_entries").addAll(permissionBeans);
                    collectorBeans.add(collectorBean);
                }
            } catch (final Exception ex) {
                LOG.fatal(ex, ex);
                break;
            }
        }

        final boolean allCollectorsCreatedSuccessfully = collectorBeans.size() == permissionBeansPerDomain.size();
        if (allCollectorsCreatedSuccessfully) {
            for (final CidsBean collectorBean : collectorBeans) {
                try {
                    collectorBean.persist(getConnectionContext());
                } catch (final Exception ex) {
                    error("error while persisting collector", ex);
                }
                try {
                    collectorBean.delete();
                } catch (final Exception ex) {
                    error("error while deleting collector", ex);
                }
            }
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void jButton4ActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        new SwingWorker<Void, Void>() {

                @Override
                protected Void doInBackground() throws Exception {
                    persistPermissions();
                    return null;
                }

                @Override
                protected void done() {
                    jDialog1.dispose();
                }
            }.execute();
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void btnDeletePermissionActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePermissionActionPerformed
        for (final int row : tblPermissions.getSelectedRows()) {
            final CidsBean selectedPermissionBean = getPermissionsTableModel().getCidsBean(row);
            if (selectedPermissionBean != null) {
                permissionBeansToDelete.add(selectedPermissionBean);
                final MetaObject permissionMo = selectedPermissionBean.getMetaObject();
                if (permissionMo != null) {
                    permissionMo.setStatus(MetaObject.TO_DELETE);
                    permissionMo.setChanged(true);
                    getPermissionsTableModel().remove(selectedPermissionBean);
                }
            }
        }
    }//GEN-LAST:event_btnDeletePermissionActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void btnCreatePermissionActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreatePermissionActionPerformed
        final Collection<CidsBean> allSelectedObjectBeans = new ArrayList<>(objectsMap.values());    // ALL OBJECTS... TODO: "ONLY SELECTED"

        final Map<String, Collection<CidsBean>> objectBeansPerDomain = new HashMap<>();
        for (final CidsBean objectBean : allSelectedObjectBeans) {
            if (objectBean != null) {
                final MetaObject objectMo = objectBean.getMetaObject();
                if (objectMo != null) {
                    final String domain = objectMo.getDomain();
                    final Collection<CidsBean> objectBeans;
                    if (objectBeansPerDomain.containsKey(domain)) {
                        objectBeans = objectBeansPerDomain.get(domain);
                    } else {
                        objectBeans = new ArrayList<>();
                        objectBeansPerDomain.put(domain, objectBeans);
                    }
                    objectBeans.add(objectBean);
                }
            }
        }

        for (final String domain : objectBeansPerDomain.keySet()) {
            if (domain != null) {
                final Collection<CidsBean> objectBeans = objectBeansPerDomain.get(domain);
                for (final CidsBean objectBean : objectBeans) {
                    if (objectBean != null) {
                        final MetaObject objectMo = objectBean.getMetaObject();
                        if (objectMo != null) {
                            try {
                                final CidsBean permissionBean = CidsBean.createNewCidsBeanFromTableName(
                                        domain,
                                        "CS_OBJECTPERMISSIONS",
                                        getConnectionContext());
                                permissionBean.setProperty("object_id", objectMo.getID());
                                permissionBean.setProperty("class_id", objectMo.getClassID());
                                permissionBean.setProperty(
                                    "group_name",
                                    cbGroupEnabled.isSelected() ? txtGroupName.getText() : null);
                                permissionBean.setProperty(
                                    "user_name",
                                    cbUserEnabled.isSelected() ? txtUserName.getText() : null);
                                permissionBean.setProperty("read", cbRead.isSelected());
                                permissionBean.setProperty("write", cbWrite.isSelected());
                                // TODO ts_start
                                // TODO ts_end
                                getPermissionsTableModel().add(permissionBean);
                            } catch (final Exception ex) {
                                error("error while creating permission bean", ex);
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_btnCreatePermissionActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    private ObjectsPermissionsTableModel getPermissionsTableModel() {
        return ((ObjectsPermissionsTableModel)tblPermissions.getModel());
    }

    /**
     * DOCUMENT ME!
     *
     * @param  message  DOCUMENT ME!
     * @param  ex       DOCUMENT ME!
     */
    private void error(final String message, final Exception ex) {
        LOG.fatal(message, ex);
    }

    @Override
    public void initWithConnectionContext(final ConnectionContext connectionContext) {
        this.connectionContext = connectionContext;
        initComponents();
    }

    /**
     * DOCUMENT ME!
     *
     * @param   cidsBeans          DOCUMENT ME!
     * @param   connectionContext  DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    public static JDialog createNewDialog(final Collection<CidsBean> cidsBeans,
            final ConnectionContext connectionContext) {
        final ObjectsPersmissionsProviderPanel panel = new ObjectsPersmissionsProviderPanel();
        panel.initWithConnectionContext(connectionContext);
        panel.setCidsBeans(cidsBeans);
        panel.jDialog1.pack();
        return panel.jDialog1;
    }

    /**
     * DOCUMENT ME!
     *
     * @param  cidsBeans  DOCUMENT ME!
     */
    public void setCidsBeans(final Collection<CidsBean> cidsBeans) {
        final DefaultListModel<CidsBean> listModel = new DefaultListModel<>();
        final Collection<MetaObjectNode> objectMons = new ArrayList<>();
        objectsMap.clear();
        permissionBeansToDelete.clear();
        if (cidsBeans != null) {
            for (final CidsBean cidsBean : cidsBeans) {
                final MetaObjectNode objectMon = new MetaObjectNode(cidsBean);
                objectMons.add(objectMon);
                objectsMap.put(createObjectKey(objectMon.getObjectId(), objectMon.getClassId()), cidsBean);
                listModel.addElement(cidsBean);
            }
        }
        ((CidsBeanList)lstObjects).setModel(listModel);

        if (!objectMons.isEmpty()) {
            new SwingWorker<List<CidsBean>, Void>() {

                    @Override
                    protected List<CidsBean> doInBackground() throws Exception {
                        final ObjectsPermissionsSearch permSearch = new ObjectsPermissionsSearch(objectMons);
                        final Collection<MetaObjectNode> permissionMons = SessionManager.getProxy()
                                    .customServerSearch(permSearch, getConnectionContext());
                        final List<CidsBean> permissionBeans = new ArrayList<>();
                        for (final MetaObjectNode permissionMon : permissionMons) {
                            final MetaObject permissionMo = SessionManager.getConnection()
                                        .getMetaObject(SessionManager.getSession().getUser(),
                                            permissionMon.getObjectId(),
                                            permissionMon.getClassId(),
                                            permissionMon.getDomain(),
                                            getConnectionContext());
                            if (permissionMo != null) {
                                permissionBeans.add(permissionMo.getBean());
                            }
                        }
                        return permissionBeans;
                    }

                    @Override
                    protected void done() {
                        try {
                            final List<CidsBean> permissionBeans = get();
                            getPermissionsTableModel().setCidsBeans(permissionBeans);
                        } catch (final Exception ex) {
                            error("error while searching permission beans", ex);
                        }
                    }
                }.execute();
        } else {
            getPermissionsTableModel().setCidsBeans(null);
        }
    }

    @Override
    public ConnectionContext getConnectionContext() {
        return connectionContext;
    }

    /**
     * DOCUMENT ME!
     *
     * @param   objectId  DOCUMENT ME!
     * @param   classId   DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    private static String createObjectKey(final Integer objectId, final Integer classId) {
        return String.format("%d@%d", objectId, classId);
    }

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private class ObjectsPermissionsTableModel extends CidsBeansTableModel {

        //~ Constructors -------------------------------------------------------

        /**
         * Creates a new ObjectsPermissionsTableModel object.
         */
        public ObjectsPermissionsTableModel() {
            super(COLUMN_PROPERTIES, COLUMN_NAMES, COLUMN_CLASSES, COLUMN_EDITABLE);
        }

        //~ Methods ------------------------------------------------------------

        @Override
        public Object getValueAt(final int rowIndex, final int columnIndex) {
            final CidsBean cidsBean = getCidsBean(rowIndex);
            if (((columnIndex == 0) || (columnIndex == 1)) && (cidsBean != null)) {
                final Integer objectId = (Integer)cidsBean.getProperty("object_id");
                final Integer classId = (Integer)cidsBean.getProperty("class_id");
                final CidsBean objecBean = objectsMap.get(createObjectKey(objectId, classId));
                switch (columnIndex) {
                    case 0: {
                        return
                            ((objecBean != null) && (objecBean.getMetaObject() != null)
                                        && (objecBean.getMetaObject().getMetaClass() != null))
                            ? objecBean.getMetaObject().getMetaClass().getName() : null;
                    }
                    case 1: {
                        return objecBean;
                    }
                    default: {
                        return null;
                    }
                }
            } else {
                return super.getValueAt(rowIndex, columnIndex);
            }
        }
    }
}
