/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cismet.cids.custom.wunda_blau;

import Sirius.navigator.connection.SessionManager;

import Sirius.server.middleware.types.MetaObject;

import org.apache.log4j.Logger;

import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

import de.cismet.cids.custom.reports.wunda_blau.PrintJahresberichtReport;
import de.cismet.cids.custom.reports.wunda_blau.PrintStatisticsReport;
import de.cismet.cids.custom.wunda_blau.search.server.CidsBillingSearchStatement;

import de.cismet.cids.dynamics.CidsBean;

/**
 * DOCUMENT ME!
 *
 * @author   jruiz
 * @version  $Revision$, $Date$
 */
public class JahresberichtDialog extends javax.swing.JDialog {

    //~ Static fields/initializers ---------------------------------------------

    private static final Logger LOG = org.apache.log4j.Logger.getLogger(JahresberichtDialog.class);

    private static JahresberichtDialog INSTANCE = null;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOk;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JLabel lblErrorBillingsText;
    private javax.swing.JLabel lblErrorBillingsTitle;
    private javax.swing.JLabel lblNoBillingsText;
    private javax.swing.JLabel lblNoBillingsTitle;
    private javax.swing.JSpinner spnYear;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form Jahresbericht.
     */
    public JahresberichtDialog() {
        super((JFrame)null, false);
        initComponents();
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    public static JahresberichtDialog getInstance() {
        if (INSTANCE == null) {
            INSTANCE = new JahresberichtDialog();
            INSTANCE.pack();

            final Calendar date = GregorianCalendar.getInstance();
            final int year = date.get(Calendar.YEAR);

            INSTANCE.spnYear.setValue(year);
        }
        return INSTANCE;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblNoBillingsText = new javax.swing.JLabel();
        lblNoBillingsTitle = new javax.swing.JLabel();
        lblErrorBillingsText = new javax.swing.JLabel();
        lblErrorBillingsTitle = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        spnYear = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnCancel = new javax.swing.JButton();
        btnOk = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();

        org.openide.awt.Mnemonics.setLocalizedText(
            lblNoBillingsText,
            org.openide.util.NbBundle.getMessage(
                JahresberichtDialog.class,
                "JahresberichtDialog.lblNoBillingsText.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(
            lblNoBillingsTitle,
            org.openide.util.NbBundle.getMessage(
                JahresberichtDialog.class,
                "JahresberichtDialog.lblNoBillingsTitle.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(
            lblErrorBillingsText,
            org.openide.util.NbBundle.getMessage(
                JahresberichtDialog.class,
                "JahresberichtDialog.lblErrorBillingsText.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(
            lblErrorBillingsTitle,
            org.openide.util.NbBundle.getMessage(
                JahresberichtDialog.class,
                "JahresberichtDialog.lblErrorBillingsTitle.text")); // NOI18N

        setTitle(org.openide.util.NbBundle.getMessage(JahresberichtDialog.class, "JahresberichtDialog.title")); // NOI18N
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(
            jLabel1,
            org.openide.util.NbBundle.getMessage(JahresberichtDialog.class, "JahresberichtDialog.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jLabel1, gridBagConstraints);

        spnYear.setModel(new javax.swing.SpinnerNumberModel());
        spnYear.setEditor(new javax.swing.JSpinner.NumberEditor(spnYear, "#"));
        spnYear.setMinimumSize(new java.awt.Dimension(70, 28));
        spnYear.setPreferredSize(new java.awt.Dimension(70, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(spnYear, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            jLabel2,
            org.openide.util.NbBundle.getMessage(JahresberichtDialog.class, "JahresberichtDialog.jLabel2.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            jLabel3,
            org.openide.util.NbBundle.getMessage(JahresberichtDialog.class, "JahresberichtDialog.jLabel3.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridLayout(1, 0, 10, 0));

        org.openide.awt.Mnemonics.setLocalizedText(
            btnCancel,
            org.openide.util.NbBundle.getMessage(JahresberichtDialog.class, "JahresberichtDialog.btnCancel.text")); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    btnCancelActionPerformed(evt);
                }
            });
        jPanel2.add(btnCancel);

        org.openide.awt.Mnemonics.setLocalizedText(
            btnOk,
            org.openide.util.NbBundle.getMessage(JahresberichtDialog.class, "JahresberichtDialog.btnOk.text")); // NOI18N
        btnOk.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    btnOkActionPerformed(evt);
                }
            });
        jPanel2.add(btnOk);
        getRootPane().setDefaultButton(btnOk);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel1.add(jPanel2, gridBagConstraints);

        jProgressBar1.setString(org.openide.util.NbBundle.getMessage(
                JahresberichtDialog.class,
                "JahresberichtDialog.jProgressBar1.string")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jPanel1.add(jProgressBar1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jPanel1, gridBagConstraints);

        pack();
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void btnCancelActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_btnCancelActionPerformed
        setVisible(false);
    }                                                                             //GEN-LAST:event_btnCancelActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void btnOkActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_btnOkActionPerformed
        final int year = (Integer)spnYear.getValue();
        final Date now = new Date();

        final Calendar calendar = Calendar.getInstance();
        calendar.clear();
        calendar.set(Calendar.DAY_OF_MONTH, 1);
        calendar.set(Calendar.MONTH, Calendar.JANUARY);
        calendar.set(Calendar.YEAR, year);
        final Date fromDate = calendar.getTime();

        calendar.clear();
        calendar.set(Calendar.DAY_OF_MONTH, 31);
        calendar.set(Calendar.MONTH, Calendar.DECEMBER);
        calendar.set(Calendar.YEAR, year);
        Date tmpTillDate = calendar.getTime();

        final boolean fullYear;
        if (now.before(tmpTillDate)) {
            tmpTillDate = now;
            fullYear = false;
        } else {
            fullYear = true;
        }
        final Date tillDate = tmpTillDate;

        jProgressBar1.setIndeterminate(true);
        jProgressBar1.setStringPainted(true);
        btnCancel.setEnabled(false);
        btnOk.setEnabled(false);

        new SwingWorker<Collection, Void>() {

                @Override
                protected Collection doInBackground() throws Exception {
                    return createBillingsForStatisticsReport(fromDate, tillDate);
                }

                @Override
                protected void done() {
                    try {
                        final Collection<CidsBean> billings = get();
                        if (billings.isEmpty()) {
                            JOptionPane.showMessageDialog(
                                JahresberichtDialog.this,
                                lblNoBillingsText.getText(),
                                lblNoBillingsTitle.getText(),
                                JOptionPane.ERROR_MESSAGE);
                        } else {
                            final Date[] fromDate_tillDate = new Date[2];
                            fromDate_tillDate[0] = fromDate;
                            fromDate_tillDate[1] = tillDate;

                            final SimpleDateFormat format1 = new SimpleDateFormat("dd-MM-yyyy");
                            final String fileName = (fullYear) ? ("BezReg_JB_" + year)
                                                               : ("BezReg_JB_" + year + "_bis_" + format1.format(now));
                            final PrintJahresberichtReport report = new PrintJahresberichtReport(
                                    year,
                                    fromDate_tillDate,
                                    billings);
                            report.print();
                            setVisible(false);
                        }
                    } catch (final Exception ex) {
                        LOG.error(ex, ex);
                        JOptionPane.showMessageDialog(
                            JahresberichtDialog.this,
                            lblErrorBillingsText.getText(),
                            lblErrorBillingsTitle.getText(),
                            JOptionPane.ERROR_MESSAGE);
                    } finally {
                        jProgressBar1.setStringPainted(false);
                        jProgressBar1.setIndeterminate(false);
                        btnCancel.setEnabled(true);
                        btnOk.setEnabled(true);
                    }
                }
            }.execute();
    } //GEN-LAST:event_btnOkActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param   fromDate  DOCUMENT ME!
     * @param   tillDate  DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    private List<CidsBean> createBillingsForStatisticsReport(final Date fromDate, final Date tillDate) {
        final CidsBillingSearchStatement cidsBillingSearchStatement = new CidsBillingSearchStatement(SessionManager
                        .getSession().getUser());

        cidsBillingSearchStatement.setAbrechnungsdatumFrom(fromDate);
        cidsBillingSearchStatement.setAbrechnungsdatumTill(tillDate);
        cidsBillingSearchStatement.setKostentyp(CidsBillingSearchStatement.Kostentyp.KOSTENPFLICHTIG);
        cidsBillingSearchStatement.setShowAbgerechneteBillings(null);

        if (LOG.isDebugEnabled()) {
            LOG.debug("Query to get the billings: " + cidsBillingSearchStatement.generateQuery());
        }

        try {
            final Collection<MetaObject> metaObjects = SessionManager.getProxy()
                        .customServerSearch(SessionManager.getSession().getUser(),
                            cidsBillingSearchStatement);

            if (metaObjects == null) {
                LOG.error("Billing metaobjects was null.");
                return null;
            } else {
                final List<CidsBean> billingBeans = new ArrayList<CidsBean>(metaObjects.size());
                for (final MetaObject mo : metaObjects) {
                    billingBeans.add(mo.getBean());
                }
                return billingBeans;
            }
        } catch (final Exception ex) {
            LOG.error("Error while filtering the billings.", ex);
            return null;
        }
    }
}
