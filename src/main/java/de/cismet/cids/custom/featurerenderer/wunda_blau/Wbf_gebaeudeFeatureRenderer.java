/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Wbf_gebaeudeFeatureRenderer.java
 *
 * Created on 01.07.2009, 14:59:10
 */
package de.cismet.cids.custom.featurerenderer.wunda_blau;

import de.cismet.cids.dynamics.CidsBean;
import de.cismet.cids.featurerenderer.CustomCidsFeatureRenderer;
import de.cismet.cismap.commons.gui.piccolo.FeatureAnnotationSymbol;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.image.BufferedImage;
import java.util.Collection;
import org.jdesktop.swingx.image.ColorTintFilter;

/**
 *
 * @author thorsten
 */
public class Wbf_gebaeudeFeatureRenderer extends CustomCidsFeatureRenderer {

    private CidsBean cidsBean;
    private final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(this.getClass());
    ColorTintFilter tinter = new ColorTintFilter(Color.BLUE, 0.5f);
    private static Color BCKGRND=new Color(128,128,128,128);
    /** Creates new form Wbf_gebaeudeFeatureRenderer */
    public Wbf_gebaeudeFeatureRenderer() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextPane();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3));
        setOpaque(false);
        setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        jScrollPane1.setOpaque(false);

        txtDescription.setContentType("text/html");
        txtDescription.setEditable(false);
        txtDescription.setOpaque(false);
        jScrollPane1.setViewportView(txtDescription);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void assign() {
        cidsBean = metaObject.getBean();
        txtDescription.setText(getHtmlString());
    }

    @Override
    public float getTransparency() {
        return 1;
    }


    @Override
    public Paint getFillingStyle() {
       return BCKGRND;
    }


    @Override
    public FeatureAnnotationSymbol getPointSymbol() {
        Color color = Color.GRAY;
        int size = 16;
        BufferedImage bi = new BufferedImage(size, size, BufferedImage.TYPE_INT_ARGB);
        try {
            CidsBean cb = metaObject.getBean();
            CidsBean nutzungsart = (CidsBean) cb.getProperty("art");
            String typ = (String) nutzungsart.getProperty("typ");
            String beschreibung = (String) nutzungsart.getProperty("beschreibung");
            if (typ.equalsIgnoreCase("eigenheim") && beschreibung.equalsIgnoreCase("eigentumswohnung")) {
                color = Color.GREEN;
                log.debug("grün");
            } else if (typ.equalsIgnoreCase("eigenheim")) {
                color = Color.YELLOW;
                log.debug("gelb");
            } else if (typ.equalsIgnoreCase("mietwohngebäude")) {
                color = Color.RED;
                log.debug("rot");
            } else {
                log.debug("grau");
            }

            //Form
            Graphics2D graphics = (Graphics2D) bi.getGraphics();
            graphics.setColor(color);

            Integer[] intArray;
            if (typ.equalsIgnoreCase("mietwohngebäude") && beschreibung.equalsIgnoreCase("familiengerechtes Wohnen")) {
                graphics.fillPolygon(new int[]{0, 16, 8, 0},
                        new int[]{0, 0, 16, 0}, 4);
                log.debug("Dreieck");
            } else if (typ.equalsIgnoreCase("mietwohngebäude") && beschreibung.equalsIgnoreCase("altengerechtes Wohnen")) {
                graphics.setStroke(new BasicStroke(2));
                graphics.drawRect(0, 0, size, size);
                log.debug("ungefülltes Quadrat");
            } else if (typ.equalsIgnoreCase("mietwohngebäude") && beschreibung.equalsIgnoreCase("behindertengerechtes Wohnen")) {
                graphics.fillOval(0, 0, size, size);
                log.debug("Kreis");
            } else {
                graphics.fillRect(0, 0, size, size);
                log.debug("Quadrat");
            }
        } catch (Throwable t) {
            log.warn("Fehler in getPointSymbol()", t);
            color = Color.GRAY;
            Graphics2D graphics = (Graphics2D) bi.getGraphics();
            graphics.setColor(color);
            graphics.fillRect(0, 0, size, size);
        }


//
//        graphics.f graphics
//        .fillOval(0, 0, size, size);

        BufferedImage tint = new BufferedImage(size, size, BufferedImage.TYPE_INT_RGB);
        ((Graphics2D) tint.getGraphics()).drawImage(bi, 0, 0, null);
        tinter.filter(tint, tint);

        FeatureAnnotationSymbol symb = FeatureAnnotationSymbol.newCustomSweetSpotFeatureAnnotationSymbol(bi, tint, 0.5, 0.5);
        return symb;

    }

    @Override
    public String getAlternativeName() {
        Object o = cidsBean.getProperty("vorgaenge");
        if (o instanceof Collection) {
            Collection c = (Collection) o;
            return c.toArray()[0].toString() + " (Anzahl Vorgänge: "+c.size()+")";
        }
        String ret = (String) cidsBean.getProperty("gebaeude_anschrift");
        if (ret != null) {
            return ret;
        } else {
            return "Wohnungsbauförderung";
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane txtDescription;
    // End of variables declaration//GEN-END:variables

    private String getHtmlString() {
        try {
            String header = "<html><body style=\"font-family: Arial,Helvetica,sans-serif; font-size:11pt\">" +
                    "<b>Eigentümer: %s</b>" +
                    "<br>%s" +
                    "<hr>";

            String eigentuemer = (String) cidsBean.getProperty("eigentuemer_name");
            String art = null;
            Object artO = cidsBean.getProperty("art");
            if (artO instanceof CidsBean && artO != null) {
                CidsBean artCidsBean = (CidsBean) artO;
                art = (String) artCidsBean.getProperty("beschreibung");
            }
            if (art == null) {
                art = "keine Nutzungsart";
            }

            header = String.format(header, eigentuemer,art);

            Object o = cidsBean.getProperty("vorgaenge");
            String vorgaenge = "";
            if (o instanceof Collection) {
                Collection c = (Collection) o;
                for (Object ob : c) {
                    String v = "Vorgang: %s (%s)<br>";

                    if (ob instanceof CidsBean) {
                        CidsBean cidsBean = (CidsBean) ob;
                        String nr = (String) cidsBean.getProperty("vergabenummer");
                        String fnr = (String) cidsBean.getProperty("folgenummer");
                        if (fnr!=null&&!fnr.trim().equals("0")){
                            nr+="/"+fnr;
                        }
                        String massnahmenkategorisierung = null;
                        Object massKatOb=cidsBean.getProperty("massnahmenkategorisierung");

                        if (massKatOb instanceof CidsBean) {
                            CidsBean mkCidsBean = (CidsBean) massKatOb;
                            massnahmenkategorisierung = (String) mkCidsBean.getProperty("beschreibung");
                        }

                        if (nr == null) {
                            nr = "-";
                        }
                        if (massnahmenkategorisierung == null) {
                            massnahmenkategorisierung = "keine Kategorie";
                        }
                        v = String.format(v, nr, massnahmenkategorisierung);
                        vorgaenge += v;
                    }

                }

            }

            String footer = "</body></html>";
            return header + vorgaenge + footer;
        } catch (Exception e) {
            log.error("Error in getHtmlString", e);
            return "";
        }
    }
}
