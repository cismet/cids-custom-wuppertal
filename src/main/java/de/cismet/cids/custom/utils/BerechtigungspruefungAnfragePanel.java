/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cismet.cids.custom.utils;

import Sirius.navigator.connection.SessionManager;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.ObjectMapper;

import lombok.Getter;

import org.apache.commons.io.FileUtils;
import org.apache.log4j.Logger;

import java.io.File;

import java.util.ArrayList;
import java.util.Collection;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.SwingWorker;

import de.cismet.cids.custom.utils.berechtigungspruefung.BerechtigungspruefungDownloadInfo;
import de.cismet.cids.custom.wunda_blau.search.actions.BerechtigungspruefungAnfrageServerAction;

import de.cismet.cids.server.actions.ServerActionParameter;

import de.cismet.tools.gui.StaticSwingTools;

/**
 * DOCUMENT ME!
 *
 * @author   jruiz
 * @version  $Revision$, $Date$
 */
public class BerechtigungspruefungAnfragePanel extends javax.swing.JPanel {

    //~ Static fields/initializers ---------------------------------------------

    private static final Logger LOG = Logger.getLogger(BerechtigungspruefungAnfragePanel.class.getName());

    //~ Instance fields --------------------------------------------------------

    private File file = null;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form BerechtigungspruefungPanel.
     */
    public BerechtigungspruefungAnfragePanel() {
        initComponents();
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @param  produktbezeichnung  DOCUMENT ME!
     */
    public void setProdukt(final String produktbezeichnung) {
        ((DefaultComboBoxModel<String>)jComboBox1.getModel()).removeAllElements();
        for (final BerechtigungspruefungKonfiguration.ProduktTyp produkt
                    : BerechtigungspruefungKonfiguration.INSTANCE.getProdukte()) {
            if (produktbezeichnung.equals(produkt.getProduktbezeichnung())) {
                ((DefaultComboBoxModel<String>)jComboBox1.getModel()).addElement(
                    "<html><i>kein Berechtigungsgrund ausgewählt");
                for (final String berechtigungsgrund : produkt.getBerechtigungsgruende()) {
                    ((DefaultComboBoxModel<String>)jComboBox1.getModel()).addElement(berechtigungsgrund);
                }
                break;
            }
        }
        jTextArea1.setText("");
        file = null;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jFileChooser1 = new javax.swing.JFileChooser();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<String>();

        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(
            jButton3,
            org.openide.util.NbBundle.getMessage(
                BerechtigungspruefungAnfragePanel.class,
                "BerechtigungspruefungAnfragePanel.jButton3.text")); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    jButton3ActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        add(jButton3, gridBagConstraints);

        jScrollPane2.setMinimumSize(new java.awt.Dimension(19, 100));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        add(jScrollPane2, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            jLabel3,
            org.openide.util.NbBundle.getMessage(
                BerechtigungspruefungAnfragePanel.class,
                "BerechtigungspruefungAnfragePanel.jLabel3.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        add(jLabel3, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            jLabel4,
            org.openide.util.NbBundle.getMessage(
                BerechtigungspruefungAnfragePanel.class,
                "BerechtigungspruefungAnfragePanel.jLabel4.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        add(jLabel4, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            jLabel5,
            org.openide.util.NbBundle.getMessage(
                BerechtigungspruefungAnfragePanel.class,
                "BerechtigungspruefungAnfragePanel.jLabel5.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        add(jLabel5, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            jLabel7,
            org.openide.util.NbBundle.getMessage(
                BerechtigungspruefungAnfragePanel.class,
                "BerechtigungspruefungAnfragePanel.jLabel7.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jLabel7, gridBagConstraints);

        jComboBox1.setModel(new DefaultComboBoxModel<String>());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jComboBox1, gridBagConstraints);
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void jButton3ActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_jButton3ActionPerformed
        final int status = jFileChooser1.showOpenDialog(StaticSwingTools.getParentFrame(this));
        if (status == JFileChooser.APPROVE_OPTION) {
            file = jFileChooser1.getSelectedFile();
        } else {
            file = null;
        }

        jLabel4.setText((file == null) ? "<html><i>keine Datei ausgewählt" : file.getName());
    } //GEN-LAST:event_jButton3ActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param   fileData            DOCUMENT ME!
     * @param   fileName            DOCUMENT ME!
     * @param   berechtigungsgrund  DOCUMENT ME!
     * @param   begruendung         DOCUMENT ME!
     * @param   downloadInfo        DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    private String requestPruefung(
            final byte[] fileData,
            final String fileName,
            final String berechtigungsgrund,
            final String begruendung,
            final BerechtigungspruefungDownloadInfo downloadInfo) {
        final Collection<ServerActionParameter> params = new ArrayList<ServerActionParameter>();
        try {
            params.add(new ServerActionParameter<String>(
                    BerechtigungspruefungAnfrageServerAction.ParameterType.DATEINAME.toString(),
                    fileName));

            params.add(new ServerActionParameter<String>(
                    BerechtigungspruefungAnfrageServerAction.ParameterType.BERECHTIGUNGSGRUND.toString(),
                    berechtigungsgrund));

            params.add(new ServerActionParameter<String>(
                    BerechtigungspruefungAnfrageServerAction.ParameterType.BEGRUENDUNG.toString(),
                    begruendung));

            final ObjectMapper mapper = new ObjectMapper();
            params.add(new ServerActionParameter<String>(
                    BerechtigungspruefungAnfrageServerAction.ParameterType.DOWNLOADINFO_JSON.toString(),
                    mapper.writeValueAsString(downloadInfo)));

            final Object ret = SessionManager.getSession()
                        .getConnection()
                        .executeTask(SessionManager.getSession().getUser(),
                            BerechtigungspruefungAnfrageServerAction.TASK_NAME,
                            SessionManager.getSession().getUser().getDomain(),
                            fileData,
                            params.toArray(new ServerActionParameter[0]));
            return (String)ret;
        } catch (final Exception ex) {
            LOG.error(ex, ex);
            return null;
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @param  downloadInfo  DOCUMENT ME!
     * @param  callback      DOCUMENT ME!
     */
    public void doAnfrage(final BerechtigungspruefungDownloadInfo downloadInfo, final Callback callback) {
        new SwingWorker<String, Void>() {

                @Override
                protected String doInBackground() throws Exception {
                    final String fileName = (file != null) ? file.getName() : null;
                    final byte[] fileData = (file != null) ? FileUtils.readFileToByteArray(file) : null;

                    final String anfrageSchluessel = requestPruefung(
                            fileData,
                            fileName,
                            jComboBox1.getSelectedItem().toString(),
                            jTextArea1.getText(),
                            downloadInfo);

                    return anfrageSchluessel;
                }

                @Override
                protected void done() {
                    try {
                        final String anfrageSchluessel = get();
                        callback.callback(anfrageSchluessel);
                    } catch (final Exception ex) {
                        LOG.error(ex, ex);
                        // TODO SHOW ERROR
                    }
                }
            }.execute();
    }

    //~ Inner Interfaces -------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    public static interface Callback {

        //~ Methods ------------------------------------------------------------

        /**
         * DOCUMENT ME!
         *
         * @param  anfrageSchluessel  DOCUMENT ME!
         */
        void callback(final String anfrageSchluessel);
    }
}
