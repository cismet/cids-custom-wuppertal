/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cismet.cids.custom.objecteditors.utils.vzkat;

import Sirius.server.middleware.types.MetaClass;
import Sirius.server.middleware.types.MetaObject;

import com.vividsolutions.jts.geom.Geometry;

import javax.swing.SwingWorker;

import de.cismet.cids.custom.objecteditors.utils.RendererTools;
import de.cismet.cids.custom.objectrenderer.utils.alkis.ClientAlkisConf;
import de.cismet.cids.custom.wunda_blau.search.server.StrAdrStrasseLightweightSearch;

import de.cismet.cids.dynamics.CidsBean;
import de.cismet.cids.dynamics.CidsBeanStore;
import de.cismet.cids.dynamics.Disposable;

import de.cismet.cids.navigator.utils.ClassCacheMultiple;

import de.cismet.cismap.cids.geometryeditor.DefaultCismapGeometryComboBoxEditor;

import de.cismet.cismap.commons.XBoundingBox;
import de.cismet.cismap.commons.features.DefaultStyledFeature;
import de.cismet.cismap.commons.features.StyledFeature;
import de.cismet.cismap.commons.gui.MappingComponent;
import de.cismet.cismap.commons.gui.layerwidget.ActiveLayerModel;
import de.cismet.cismap.commons.raster.wms.simple.SimpleWMS;
import de.cismet.cismap.commons.raster.wms.simple.SimpleWmsGetMapUrl;

import de.cismet.connectioncontext.ConnectionContext;
import de.cismet.connectioncontext.ConnectionContextStore;

import de.cismet.tools.gui.StaticSwingTools;

/**
 * DOCUMENT ME!
 *
 * @author   jruiz
 * @version  $Revision$, $Date$
 */
public class VzkatStandortKartePanel extends javax.swing.JPanel implements CidsBeanStore,
    ConnectionContextStore,
    Disposable {

    //~ Static fields/initializers ---------------------------------------------

    private static final org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(
            VzkatStandortKartePanel.class);

    public static final String STRASSENNAME_TOSTRING_TEMPLATE = "%s";
    public static final String[] STRASSENNAME_TOSTRING_FIELDS = {
            StrAdrStrasseLightweightSearch.Subject.NAME.toString()
        };
    public static final String STRASSENSCHLUESSEL_TOSTRING_TEMPLATE = "%s";
    public static final String[] STRASSENSCHLUESSEL_TOSTRING_FIELDS = {
            StrAdrStrasseLightweightSearch.Subject.SCHLUESSEL.toString()
        };

    //~ Instance fields --------------------------------------------------------

    private final StrAdrStrasseLightweightSearch strassennameSearch = new StrAdrStrasseLightweightSearch(
            StrAdrStrasseLightweightSearch.Subject.NAME,
            STRASSENNAME_TOSTRING_TEMPLATE,
            STRASSENNAME_TOSTRING_FIELDS);
    private final StrAdrStrasseLightweightSearch strassenschluesselSearch = new StrAdrStrasseLightweightSearch(
            StrAdrStrasseLightweightSearch.Subject.SCHLUESSEL,
            STRASSENSCHLUESSEL_TOSTRING_TEMPLATE,
            STRASSENSCHLUESSEL_TOSTRING_FIELDS);

    private final boolean editable;
    private ConnectionContext connectionContext;
    private CidsBean cidsBean;
    private boolean cbStrassenschluesselEnabled = true;
    private boolean cbStrassennameEnabled = true;
    private boolean comboboxesInited = false;
    // End of variables declaration

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbGeom;
    private de.cismet.cids.editors.FastBindableReferenceCombo cbStrassenname;
    private de.cismet.cids.editors.FastBindableReferenceCombo cbStrassenschluessel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblGeom;
    private javax.swing.JLabel lblStrasse;
    private javax.swing.JLabel lblStrassenschluessel;
    private de.cismet.cismap.commons.gui.MappingComponent mappingComponent1;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form VzkatStandortKartePanel.
     */
    public VzkatStandortKartePanel() {
        this(false);
    }

    /**
     * Creates a new VzkatStandortKartePanel object.
     *
     * @param  editable  DOCUMENT ME!
     */
    public VzkatStandortKartePanel(final boolean editable) {
        this.editable = editable;
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        mappingComponent1 = new de.cismet.cismap.commons.gui.MappingComponent();
        jPanel1 = new javax.swing.JPanel();
        lblStrassenschluessel = new javax.swing.JLabel();
        cbStrassenschluessel = new de.cismet.cids.editors.FastBindableReferenceCombo(
                strassenschluesselSearch,
                strassenschluesselSearch.getRepresentationPattern(),
                strassenschluesselSearch.getRepresentationFields());
        lblStrasse = new javax.swing.JLabel();
        cbStrassenname = new de.cismet.cids.editors.FastBindableReferenceCombo(
                strassennameSearch,
                strassennameSearch.getRepresentationPattern(),
                strassennameSearch.getRepresentationFields());
        cbGeom = new DefaultCismapGeometryComboBoxEditor();
        lblGeom = new javax.swing.JLabel();

        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        mappingComponent1.setMaximumSize(new java.awt.Dimension(300, 300));
        mappingComponent1.setMinimumSize(new java.awt.Dimension(300, 300));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(mappingComponent1, gridBagConstraints);

        jPanel1.setOpaque(false);
        jPanel1.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(
            lblStrassenschluessel,
            org.openide.util.NbBundle.getMessage(
                VzkatStandortKartePanel.class,
                "VzkatStandortKartePanel.lblStrassenschluessel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 10);
        jPanel1.add(lblStrassenschluessel, gridBagConstraints);

        cbStrassenschluessel.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    cbStrassenschluesselActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        jPanel1.add(cbStrassenschluessel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            lblStrasse,
            org.openide.util.NbBundle.getMessage(
                VzkatStandortKartePanel.class,
                "VzkatStandortKartePanel.lblStrasse.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 10);
        jPanel1.add(lblStrasse, gridBagConstraints);

        cbStrassenname.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    cbStrassennameActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        jPanel1.add(cbStrassenname, gridBagConstraints);

        final org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.fk_geom}"),
                cbGeom,
                org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        binding.setConverter(((DefaultCismapGeometryComboBoxEditor)cbGeom).getConverter());
        bindingGroup.addBinding(binding);

        cbGeom.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    cbGeomActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        jPanel1.add(cbGeom, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            lblGeom,
            org.openide.util.NbBundle.getMessage(
                VzkatStandortKartePanel.class,
                "VzkatStandortKartePanel.lblGeom.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 10);
        jPanel1.add(lblGeom, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(jPanel1, gridBagConstraints);

        bindingGroup.bind();
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     */
    private void updateSelectedStrassenschluessel() {
        if (comboboxesInited && editable) {
            final CidsBean selectedStrAdrAddresse = (CidsBean)cbStrassenschluessel.getSelectedItem();
            try {
                cidsBean.setProperty(
                    "strassenschluessel",
                    (selectedStrAdrAddresse != null) ? (String)selectedStrAdrAddresse.getProperty("strasse") : null);
            } catch (final Exception ex) {
                LOG.fatal(ex, ex);
            }
        }
    }

    /**
     * DOCUMENT ME!
     */
    private void refreshGeomFeatures() {
        mappingComponent1.getFeatureCollection().removeAllFeatures();
        if (cidsBean != null) {
            final Geometry geom = (Geometry)cidsBean.getProperty("fk_geom.geo_field");
            if (geom != null) {
                final StyledFeature dsf = new DefaultStyledFeature();
                dsf.setGeometry(geom);
                mappingComponent1.getFeatureCollection().addFeature(dsf);
            }
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void cbStrassenschluesselActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_cbStrassenschluesselActionPerformed
        if (comboboxesInited && cbStrassenschluesselEnabled) {
            synchronized (this) {
                try {
                    cbStrassenschluesselEnabled = false;
                    cbStrassenname.setSelectedItem(cbStrassenschluessel.getSelectedItem());
                    cbStrassennameActionPerformed(null);
                    repaint();
                } finally {
                    cbStrassenschluesselEnabled = true;
                }
            }
        }
        updateSelectedStrassenschluessel();
    }                                                                                        //GEN-LAST:event_cbStrassenschluesselActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void cbStrassennameActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_cbStrassennameActionPerformed
        if (comboboxesInited && cbStrassennameEnabled) {
            synchronized (this) {
                try {
                    cbStrassennameEnabled = false;
                    cbStrassenschluessel.setSelectedItem(cbStrassenname.getSelectedItem());
                    cbStrassenschluesselActionPerformed(null);
                    repaint();
                } finally {
                    cbStrassennameEnabled = true;
                }
            }
        }
    }                                                                                  //GEN-LAST:event_cbStrassennameActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void cbGeomActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_cbGeomActionPerformed
        refreshGeomFeatures();
    }                                                                          //GEN-LAST:event_cbGeomActionPerformed

    /**
     * DOCUMENT ME!
     */
    private void initMap() {
        if (cidsBean != null) {
            final Geometry geom = (Geometry)cidsBean.getProperty("fk_geom.geo_field");
            try {
                final XBoundingBox box = new XBoundingBox(geom.getEnvelope().buffer(
                            ClientAlkisConf.getInstance().getGeoBuffer()
                                    * 2));

                final ActiveLayerModel mappingModel = new ActiveLayerModel();
                mappingModel.setSrs(ClientAlkisConf.getInstance().getSrsService());
                mappingModel.addHome(new XBoundingBox(
                        box.getX1(),
                        box.getY1(),
                        box.getX2(),
                        box.getY2(),
                        ClientAlkisConf.getInstance().getSrsService(),
                        true));
                final SimpleWMS swms = new SimpleWMS(new SimpleWmsGetMapUrl(
                            ClientAlkisConf.getInstance().getMapCallString()));
                swms.setName("Verkehrszeichen");

                // add the raster layer to the model
                mappingModel.addLayer(swms);
                // set the model
                mappingComponent1.setMappingModel(mappingModel);
                // initial positioning of the map
                mappingComponent1.gotoInitialBoundingBox();
                // interaction mode
                mappingComponent1.setInteractionMode(MappingComponent.ZOOM);
                // finally when all configurations are done ...
                mappingComponent1.unlock();
            } catch (final Exception ex) {
                LOG.warn("could not init Map !", ex);
            }
        }
    }

    @Override
    public CidsBean getCidsBean() {
        return cidsBean;
    }

    @Override
    public void setCidsBean(final CidsBean cidsBean) {
        bindingGroup.unbind();
        this.cidsBean = cidsBean;
        initMap();
        refreshStrassenComboboxes();
        refreshGeomFeatures();
        bindingGroup.bind();
    }

    /**
     * DOCUMENT ME!
     */
    private void refreshStrassenComboboxes() {
        if (comboboxesInited && (cidsBean != null)) {
            synchronized (this) {
                cbStrassennameEnabled = false;
                new SwingWorker<CidsBean, Void>() {

                        @Override
                        protected CidsBean doInBackground() throws Exception {
                            final String strassenschluessel = (String)cidsBean.getProperty("strassenschluessel");
                            if (strassenschluessel == null) {
                                return null;
                            }

                            final Geometry geom = (Geometry)cidsBean.getProperty("fk_geom.geo_field");
                            if (cidsBean != null) {
                                strassennameSearch.setSortDistanceLimit(10);
                                strassennameSearch.setGeom(geom);
                            }
                            cbStrassenname.refreshModel();
                            for (int index = 0; index < cbStrassenschluessel.getModel().getSize(); index++) {
                                final Object element = cbStrassenschluessel.getModel().getElementAt(index);
                                if (element != null) {
                                    final CidsBean strasseBean = ((MetaObject)element).getBean();
                                    if ((strasseBean != null)
                                                && strassenschluessel.equals(strasseBean.getProperty("strasse"))) {
                                        return strasseBean;
                                    }
                                }
                            }
                            return null;
                        }

                        @Override
                        protected void done() {
                            try {
                                final CidsBean strasseBean = get();
                                cbStrassennameEnabled = false;
                                cbStrassenschluessel.setSelectedItem(strasseBean);
                                cbStrassenschluesselActionPerformed(null);
                                repaint();
                            } catch (final Exception ex) {
                                LOG.error(ex, ex);
                            } finally {
                                cbStrassennameEnabled = true;
                            }
                        }
                    }.execute();
            }
        }
    }

    @Override
    public void initWithConnectionContext(final ConnectionContext connectionContext) {
        this.connectionContext = connectionContext;
        initComponents();
        lblGeom.setVisible(editable);
        cbGeom.setVisible(editable);

        if (!editable) {
            RendererTools.makeReadOnly(cbStrassenschluessel);
            RendererTools.makeReadOnly(cbStrassenname);
        } else {
            StaticSwingTools.decorateWithFixedAutoCompleteDecorator(cbStrassenschluessel);
            StaticSwingTools.decorateWithFixedAutoCompleteDecorator(cbStrassenname);
        }

        initComboboxes();
    }

    /**
     * DOCUMENT ME!
     */
    private void initComboboxes() {
        new SwingWorker<MetaClass, Void>() {

                @Override
                protected MetaClass doInBackground() throws Exception {
                    return ClassCacheMultiple.getMetaClass(
                            "WUNDA_BLAU",
                            "str_adr_strasse",
                            connectionContext);
                }

                @Override
                protected void done() {
                    try {
                        cbStrassenschluessel.setMetaClass(get());
                        cbStrassenschluessel.refreshModel();
                        cbStrassenname.setMetaClass(get());
                        cbStrassenname.refreshModel();
                    } catch (final Exception ex) {
                        LOG.error(ex, ex);
                    } finally {
                        comboboxesInited = true;
                        refreshStrassenComboboxes();
                    }
                }
            }.execute();
    }

    @Override
    public ConnectionContext getConnectionContext() {
        return connectionContext;
    }

    @Override
    public void dispose() {
        ((DefaultCismapGeometryComboBoxEditor)cbGeom).dispose();
    }
}
