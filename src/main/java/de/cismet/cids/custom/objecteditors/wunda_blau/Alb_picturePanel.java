/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Alb_picturePanel.java
 *
 * Created on 11.12.2009, 14:49:40
 */
package de.cismet.cids.custom.objecteditors.wunda_blau;

import de.cismet.cids.custom.objectrenderer.utils.BaulastenPictureFinder;
import de.cismet.cids.dynamics.CidsBean;
import de.cismet.tools.CismetThreadPool;
import de.cismet.tools.gui.MultiPagePictureReader;
import de.cismet.tools.gui.NavigableImagePanel;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.concurrent.ExecutionException;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.ListModel;
import javax.swing.SwingWorker;

/**
 *
 * @author srichter
 */
public class Alb_picturePanel extends javax.swing.JPanel {

    /** Creates new form Alb_picturePanel */
    public Alb_picturePanel() {
        initComponents();
        ((NavigableImagePanel) ipanDocument).setNavigationImageEnabled(tbtnNavigation.isSelected());
    }
    private static final org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(Alb_picturePanel.class);
    private MultiPagePictureReader pictureReader;
    private CidsBean cidsBean;
    private File planFile;
    private File textFile;
    private JButton currentSelectedButton;

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panPicNavigation = new javax.swing.JPanel();
        scpPictureList = new javax.swing.JScrollPane();
        lstPictures = new javax.swing.JList();
        panPicNavControl = new javax.swing.JPanel();
        btnPlan = new javax.swing.JButton();
        btnTextblatt = new javax.swing.JButton();
        ipanDocument = new NavigableImagePanel();
        panBtnMiniNavigation = new javax.swing.JPanel();
        tbtnNavigation = new javax.swing.JToggleButton();
        jPanel2 = new javax.swing.JPanel();
        lblCurrentViewTitle = new javax.swing.JLabel();

        setOpaque(false);
        setLayout(new java.awt.BorderLayout());

        panPicNavigation.setOpaque(false);
        panPicNavigation.setLayout(new java.awt.GridBagLayout());

        scpPictureList.setPreferredSize(new java.awt.Dimension(100, 130));

        lstPictures.setFixedCellWidth(75);
        lstPictures.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstPicturesValueChanged(evt);
            }
        });
        scpPictureList.setViewportView(lstPictures);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panPicNavigation.add(scpPictureList, gridBagConstraints);

        panPicNavControl.setOpaque(false);
        panPicNavControl.setLayout(new java.awt.GridBagLayout());

        btnPlan.setText("Plan");
        btnPlan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlanActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panPicNavControl.add(btnPlan, gridBagConstraints);

        btnTextblatt.setText("Textblatt");
        btnTextblatt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTextblattActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panPicNavControl.add(btnTextblatt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panPicNavigation.add(panPicNavControl, gridBagConstraints);

        add(panPicNavigation, java.awt.BorderLayout.WEST);

        javax.swing.GroupLayout ipanDocumentLayout = new javax.swing.GroupLayout(ipanDocument);
        ipanDocument.setLayout(ipanDocumentLayout);
        ipanDocumentLayout.setHorizontalGroup(
            ipanDocumentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 290, Short.MAX_VALUE)
        );
        ipanDocumentLayout.setVerticalGroup(
            ipanDocumentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 276, Short.MAX_VALUE)
        );

        add(ipanDocument, java.awt.BorderLayout.CENTER);

        panBtnMiniNavigation.setOpaque(false);
        panBtnMiniNavigation.setLayout(new java.awt.GridBagLayout());

        tbtnNavigation.setSelected(true);
        tbtnNavigation.setText("Navigation");
        tbtnNavigation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbtnNavigationActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panBtnMiniNavigation.add(tbtnNavigation, gridBagConstraints);

        jPanel2.setOpaque(false);

        lblCurrentViewTitle.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblCurrentViewTitle.setText("Keine Auswahl");
        jPanel2.add(lblCurrentViewTitle);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        panBtnMiniNavigation.add(jPanel2, gridBagConstraints);

        add(panBtnMiniNavigation, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents

    private void lstPicturesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstPicturesValueChanged

        final Object selObj = lstPictures.getSelectedValue();
        if (selObj instanceof Integer) {
            CismetThreadPool.execute(new PictureSelectWorker((Integer) selObj));
        }

}//GEN-LAST:event_lstPicturesValueChanged

    private void btnPlanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlanActionPerformed
        currentSelectedButton = btnPlan;
        lblCurrentViewTitle.setText("Lageplan");
        CismetThreadPool.execute(new PictureReaderWorker(planFile));

}//GEN-LAST:event_btnPlanActionPerformed

    private void btnTextblattActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTextblattActionPerformed
        currentSelectedButton = btnTextblatt;
        lblCurrentViewTitle.setText("Textblatt");
        CismetThreadPool.execute(new PictureReaderWorker(textFile));
}//GEN-LAST:event_btnTextblattActionPerformed

    private void tbtnNavigationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbtnNavigationActionPerformed
        ((NavigableImagePanel) ipanDocument).setNavigationImageEnabled(tbtnNavigation.isSelected());
}//GEN-LAST:event_tbtnNavigationActionPerformed

    @Override
    public void removeNotify() {
        super.removeNotify();
        reset();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPlan;
    private javax.swing.JButton btnTextblatt;
    private javax.swing.JPanel ipanDocument;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblCurrentViewTitle;
    private javax.swing.JList lstPictures;
    private javax.swing.JPanel panBtnMiniNavigation;
    private javax.swing.JPanel panPicNavControl;
    private javax.swing.JPanel panPicNavigation;
    private javax.swing.JScrollPane scpPictureList;
    private javax.swing.JToggleButton tbtnNavigation;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the cidsBean
     */
    public CidsBean getCidsBean() {
        return cidsBean;
    }

    /**
     * @param cidsBean the cidsBean to set
     */
    public void setCidsBean(CidsBean cidsBean) {
        this.cidsBean = cidsBean;
        CismetThreadPool.execute(new FileWorker());

    }

    private void reset() {
        if (pictureReader != null) {
            pictureReader.close();
            pictureReader = null;
        }
    }

    class FileWorker extends SwingWorker<File[], Void> {

        public FileWorker() {
            setControlsEnabled(false);
        }

        @Override
        protected File[] doInBackground() throws Exception {
            final File[] result = new File[2];
            final Object blattObj = getCidsBean().getProperty("textblatt");
            final Object planObj = getCidsBean().getProperty("lageplan");
            if (blattObj != null) {
                result[0] = BaulastenPictureFinder.findTextblattPicture(blattObj.toString());
            }
            if (planObj != null) {
                result[1] = BaulastenPictureFinder.findPlanPicture(planObj.toString());
            }
            return result;
        }

        @Override
        protected void done() {
            try {
                final File[] result = get();
                textFile = result[0];
                planFile = result[1];
                btnPlan.setEnabled(planFile != null);
                btnTextblatt.setEnabled(textFile != null);
            } catch (InterruptedException ex) {
                log.warn(ex, ex);
            } catch (ExecutionException ex) {
                log.error(ex, ex);
            } finally {
                setControlsEnabled(true);
            }
        }
    }

    private void setControlsEnabled(boolean enabled) {
        lstPictures.setEnabled(enabled);
        btnPlan.setEnabled(planFile != null && enabled && currentSelectedButton != btnPlan);
        btnTextblatt.setEnabled(textFile != null && enabled && currentSelectedButton != btnTextblatt);
    }

    class PictureReaderWorker extends SwingWorker<ListModel, Void> {

        public PictureReaderWorker(File pictureFile) {
            this.pictureFile = pictureFile;
            log.debug("prepare picture reader for file " + pictureFile);
            lstPictures.setModel(new DefaultListModel());
            ((NavigableImagePanel) ipanDocument).setImage(null);
            setControlsEnabled(false);

        }
        private final File pictureFile;

        @Override
        protected ListModel doInBackground() throws Exception {
            final DefaultListModel model = new DefaultListModel();
            reset();
            pictureReader = new MultiPagePictureReader(pictureFile);
            final int numberOfPages = pictureReader.getNumberOfPages();
            for (int i = 0; i < numberOfPages; ++i) {
                model.addElement(i);
            }
            return model;
        }

        @Override
        protected void done() {
            try {
                lstPictures.setModel(get());
            } catch (InterruptedException ex) {
                log.warn(ex, ex);
            } catch (ExecutionException ex) {
                log.error(ex, ex);
            } finally {
                setControlsEnabled(true);
            }
        }
    }

    class PictureSelectWorker extends SwingWorker<BufferedImage, Void> {

        public PictureSelectWorker(int pageNumber) {
            this.pageNumber = pageNumber;
            setControlsEnabled(false);
        }
        private final int pageNumber;

        @Override
        protected BufferedImage doInBackground() throws Exception {
            if (pictureReader != null) {
                return pictureReader.loadPage(pageNumber);
            }
            return null;
        }

        @Override
        protected void done() {
            try {
                ((NavigableImagePanel) ipanDocument).setImage(get());
            } catch (InterruptedException ex) {
                log.warn(ex, ex);
            } catch (ExecutionException ex) {
                log.error(ex, ex);
            } finally {
                setControlsEnabled(true);
            }
        }
    }
}
