/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 * CoolThemaRenderer.java
 *
 * Created on 10. November 3508, 11:56
 */
package de.cismet.cids.custom.objecteditors.wunda_blau;

import Sirius.navigator.ui.RequestsFullSizeComponent;

import org.apache.log4j.Logger;

import org.jdesktop.beansbinding.AutoBinding;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.Converter;
import org.jdesktop.beansbinding.ELProperty;

import org.openide.util.NbBundle;

import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JToggleButton;
import javax.swing.SwingConstants;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;

import de.cismet.cids.client.tools.DevelopmentTools;

import de.cismet.cids.custom.objecteditors.wunda_blau.albo.AlboFlaecheArbeitsstandPanel;
import de.cismet.cids.custom.objecteditors.wunda_blau.albo.AlboFlaecheBemerkungenPanel;
import de.cismet.cids.custom.objecteditors.wunda_blau.albo.AlboFlaecheMainPanel;
import de.cismet.cids.custom.objecteditors.wunda_blau.albo.AlboFlaecheMassnahmenPanel;
import de.cismet.cids.custom.utils.ByteArrayActionDownload;
import de.cismet.cids.custom.wunda_blau.search.actions.AlboExportServerAction;

import de.cismet.cids.dynamics.CidsBean;
import de.cismet.cids.dynamics.DisposableCidsBeanStore;

import de.cismet.cids.editors.DefaultCustomObjectEditor;
import de.cismet.cids.editors.EditorClosedEvent;
import de.cismet.cids.editors.EditorSaveListener;

import de.cismet.cids.tools.metaobjectrenderer.CidsBeanRenderer;

import de.cismet.cismap.commons.gui.MappingComponent;
import de.cismet.cismap.commons.interaction.CismapBroker;

import de.cismet.connectioncontext.ConnectionContext;
import de.cismet.connectioncontext.ConnectionContextStore;

import de.cismet.tools.gui.BorderProvider;
import de.cismet.tools.gui.FooterComponentProvider;
import de.cismet.tools.gui.TitleComponentProvider;
import de.cismet.tools.gui.downloadmanager.DownloadManager;
import de.cismet.tools.gui.downloadmanager.DownloadManagerDialog;
import de.cismet.tools.gui.log4jquickconfig.Log4JQuickConfig;

/**
 * DOCUMENT ME!
 *
 * @version  $Revision$, $Date$
 */
public class AlboFlaecheEditor extends JPanel implements CidsBeanRenderer,
    DisposableCidsBeanStore,
    TitleComponentProvider,
    FooterComponentProvider,
    BorderProvider,
    RequestsFullSizeComponent,
    EditorSaveListener,
    ConnectionContextStore {

    //~ Static fields/initializers ---------------------------------------------

    private static final Logger LOG = Logger.getLogger(AlboFlaecheEditor.class);
    public static Converter<String, String> DATE_TO_STRING = null;

    /**
     * WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        GridBagConstraints gridBagConstraints;
        bindingGroup = new BindingGroup();

        panTitle = new JPanel();
        lblTitle = new JLabel();
        jToggleButton1 = new JToggleButton();
        btnReport1 = new JButton();
        panFooter = new JPanel();
        filler1 = new Box.Filler(new Dimension(0, 0), new Dimension(0, 0), new Dimension(32767, 0));
        btnBack = new JButton();
        panButtons = new JPanel();
        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        jLabel3 = new JLabel();
        btnForward = new JButton();
        filler2 = new Box.Filler(new Dimension(0, 0), new Dimension(0, 0), new Dimension(32767, 0));
        panMainCard = new JPanel();
        panCardFlaeche = new JPanel();
        panMain = new AlboFlaecheMainPanel(isEditable());
        panCardArbeitsstandUndBemerkungen = new JPanel();
        panBemerkungen = new AlboFlaecheBemerkungenPanel(isEditable());
        panArbeitsstand = new AlboFlaecheArbeitsstandPanel(isEditable());
        panCardMassnahmen = new JPanel();
        panMassnahmen = new AlboFlaecheMassnahmenPanel(isEditable());

        final FormListener formListener = new FormListener();

        panTitle.setName("panTitle"); // NOI18N
        panTitle.setOpaque(false);
        panTitle.setLayout(new GridBagLayout());

        lblTitle.setForeground(new Color(255, 255, 255));
        lblTitle.setName("lblTitle"); // NOI18N

        final Binding binding = Bindings.createAutoBinding(
                AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                ELProperty.create(
                    "<html><body><h2><nobr>Altlastenkataster - Erhebungsnummer: ${cidsBean.erhebungsnummer}"),
                lblTitle,
                BeanProperty.create("text"));
        binding.setSourceNullValue("<html><body><h2><nobr>Altlastenkataster - Erhebungsnummer: -");
        binding.setSourceUnreadableValue("<html><body><h2><nobr>Altlastenkataster - Erhebungsnummer: <i>[Fehler]");
        bindingGroup.addBinding(binding);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        panTitle.add(lblTitle, gridBagConstraints);

        jToggleButton1.setIcon(new ImageIcon(
                getClass().getResource("/de/cismet/cids/custom/objecteditors/wunda_blau/lock.png")));      // NOI18N
        jToggleButton1.setBorderPainted(false);
        jToggleButton1.setContentAreaFilled(false);
        jToggleButton1.setFocusPainted(false);
        jToggleButton1.setName("jToggleButton1");                                                          // NOI18N
        jToggleButton1.setRolloverIcon(new ImageIcon(
                getClass().getResource("/de/cismet/cids/custom/objecteditors/wunda_blau/lock_edit.png"))); // NOI18N
        jToggleButton1.setRolloverSelectedIcon(new ImageIcon(
                getClass().getResource("/de/cismet/cids/custom/objecteditors/wunda_blau/lock_go.png")));   // NOI18N
        jToggleButton1.setSelectedIcon(new ImageIcon(
                getClass().getResource("/de/cismet/cids/custom/objecteditors/wunda_blau/lock_open.png"))); // NOI18N
        jToggleButton1.addActionListener(formListener);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        panTitle.add(jToggleButton1, gridBagConstraints);
        jToggleButton1.setVisible(isEditable());

        btnReport1.setIcon(new ImageIcon(getClass().getResource("/de/cismet/cids/custom/icons/table_export.png")));    // NOI18N
        btnReport1.setToolTipText(NbBundle.getMessage(AlboFlaecheEditor.class, "TreppeEditor.btnReport.toolTipText")); // NOI18N
        btnReport1.setBorderPainted(false);
        btnReport1.setContentAreaFilled(false);
        btnReport1.setFocusPainted(false);
        btnReport1.setName("btnReport1");                                                                              // NOI18N
        btnReport1.addActionListener(formListener);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = GridBagConstraints.EAST;
        panTitle.add(btnReport1, gridBagConstraints);

        panFooter.setName("panFooter"); // NOI18N
        panFooter.setOpaque(false);
        panFooter.setLayout(new GridBagLayout());

        filler1.setName("filler1"); // NOI18N
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        panFooter.add(filler1, gridBagConstraints);

        btnBack.setIcon(new ImageIcon(getClass().getResource("/de/cismet/cids/custom/wunda_blau/res/arrow-left.png"))); // NOI18N
        btnBack.setBorder(null);
        btnBack.setBorderPainted(false);
        btnBack.setContentAreaFilled(false);
        btnBack.setEnabled(false);
        btnBack.setFocusPainted(false);
        btnBack.setMaximumSize(new Dimension(30, 30));
        btnBack.setMinimumSize(new Dimension(30, 30));
        btnBack.setName("btnBack");                                                                                     // NOI18N
        btnBack.setPreferredSize(new Dimension(30, 30));
        btnBack.setPressedIcon(new ImageIcon(
                getClass().getResource("/de/cismet/cids/custom/wunda_blau/res/arrow-left-pressed.png")));               // NOI18N
        btnBack.setRolloverIcon(new ImageIcon(
                getClass().getResource("/de/cismet/cids/custom/wunda_blau/res/arrow-left-sel.png")));                   // NOI18N
        btnBack.addActionListener(formListener);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        panFooter.add(btnBack, gridBagConstraints);

        panButtons.setBorder(BorderFactory.createEmptyBorder(0, 0, 6, 0));
        panButtons.setName("panButtons"); // NOI18N
        panButtons.setOpaque(false);
        panButtons.setLayout(new GridLayout(1, 0, 10, 0));

        jLabel1.setForeground(new Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(SwingConstants.CENTER);
        jLabel1.setText("<html><body><center><b><h3>Fläche");
        jLabel1.setName("jLabel1"); // NOI18N
        jLabel1.addMouseListener(formListener);
        panButtons.add(jLabel1);

        jLabel2.setForeground(new Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(SwingConstants.CENTER);
        jLabel2.setText("<html><body><center><b><h3>Arbeitsstand & Bemerkung");
        jLabel2.setEnabled(false);
        jLabel2.setName("jLabel2"); // NOI18N
        jLabel2.addMouseListener(formListener);
        panButtons.add(jLabel2);

        jLabel3.setForeground(new Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(SwingConstants.CENTER);
        jLabel3.setText("<html><body><center><b><h3>Maßnahmen");
        jLabel3.setEnabled(false);
        jLabel3.setName("jLabel3"); // NOI18N
        jLabel3.addMouseListener(formListener);
        panButtons.add(jLabel3);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        panFooter.add(panButtons, gridBagConstraints);

        btnForward.setIcon(new ImageIcon(
                getClass().getResource("/de/cismet/cids/custom/wunda_blau/res/arrow-right.png"))); // NOI18N
        btnForward.setBorder(null);
        btnForward.setBorderPainted(false);
        btnForward.setContentAreaFilled(false);
        btnForward.setFocusPainted(false);
        btnForward.setMaximumSize(new Dimension(30, 30));
        btnForward.setMinimumSize(new Dimension(30, 30));
        btnForward.setName("btnForward");                                                          // NOI18N
        btnForward.setPreferredSize(new Dimension(30, 30));
        btnForward.addActionListener(formListener);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        panFooter.add(btnForward, gridBagConstraints);

        filler2.setName("filler2"); // NOI18N
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        panFooter.add(filler2, gridBagConstraints);

        setName("Form"); // NOI18N
        setOpaque(false);
        setLayout(new GridBagLayout());

        panMainCard.setName("panMainCard"); // NOI18N
        panMainCard.setOpaque(false);
        panMainCard.setLayout(new CardLayout());

        panCardFlaeche.setName("panCardFlaeche"); // NOI18N
        panCardFlaeche.setOpaque(false);
        panCardFlaeche.setLayout(new BorderLayout());

        panMain.setName("panMain"); // NOI18N
        panCardFlaeche.add(panMain, BorderLayout.CENTER);

        panMainCard.add(panCardFlaeche, "flaeche");

        panCardArbeitsstandUndBemerkungen.setName("panCardArbeitsstandUndBemerkungen"); // NOI18N
        panCardArbeitsstandUndBemerkungen.setOpaque(false);
        panCardArbeitsstandUndBemerkungen.setLayout(new GridBagLayout());

        panBemerkungen.setName("panBemerkungen"); // NOI18N
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panCardArbeitsstandUndBemerkungen.add(panBemerkungen, gridBagConstraints);

        panArbeitsstand.setName("panArbeitsstand"); // NOI18N
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        panCardArbeitsstandUndBemerkungen.add(panArbeitsstand, gridBagConstraints);

        panMainCard.add(panCardArbeitsstandUndBemerkungen, "arbeitsstand");

        panCardMassnahmen.setName("panCardMassnahmen"); // NOI18N
        panCardMassnahmen.setOpaque(false);
        panCardMassnahmen.setLayout(new BorderLayout());

        panMassnahmen.setName("panMassnahmen"); // NOI18N
        panCardMassnahmen.add(panMassnahmen, BorderLayout.CENTER);

        panMainCard.add(panCardMassnahmen, "massnahmen");

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new Insets(10, 10, 10, 10);
        add(panMainCard, gridBagConstraints);

        bindingGroup.bind();
    }

    /**
     * Code for dispatching events from components to event handlers.
     *
     * @version  $Revision$, $Date$
     */
    private class FormListener implements ActionListener, MouseListener {

        /**
         * Creates a new FormListener object.
         */
        FormListener() {
        }

        @Override
        public void actionPerformed(final ActionEvent evt) {
            if (evt.getSource() == jToggleButton1) {
                AlboFlaecheEditor.this.jToggleButton1ActionPerformed(evt);
            } else if (evt.getSource() == btnReport1) {
                AlboFlaecheEditor.this.btnReport1ActionPerformed(evt);
            } else if (evt.getSource() == btnBack) {
                AlboFlaecheEditor.this.btnBackActionPerformed(evt);
            } else if (evt.getSource() == btnForward) {
                AlboFlaecheEditor.this.btnForwardActionPerformed(evt);
            }
        }

        @Override
        public void mouseClicked(final MouseEvent evt) {
            if (evt.getSource() == jLabel1) {
                AlboFlaecheEditor.this.jLabel1MouseClicked(evt);
            } else if (evt.getSource() == jLabel2) {
                AlboFlaecheEditor.this.jLabel2MouseClicked(evt);
            } else if (evt.getSource() == jLabel3) {
                AlboFlaecheEditor.this.jLabel3MouseClicked(evt);
            }
        }

        @Override
        public void mouseEntered(final MouseEvent evt) {
        }

        @Override
        public void mouseExited(final MouseEvent evt) {
        }

        @Override
        public void mousePressed(final MouseEvent evt) {
        }

        @Override
        public void mouseReleased(final MouseEvent evt) {
        }
    } // </editor-fold>//GEN-END:initComponents

    //~ Instance fields --------------------------------------------------------

    private final boolean editable;
    private CidsBean cidsBean;

    private ConnectionContext connectionContext = ConnectionContext.createDummy();
    private CardLayout cardLayout;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton btnBack;
    private JButton btnForward;
    JButton btnReport1;
    private Box.Filler filler1;
    private Box.Filler filler2;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JToggleButton jToggleButton1;
    private JLabel lblTitle;
    private AlboFlaecheArbeitsstandPanel panArbeitsstand;
    private AlboFlaecheBemerkungenPanel panBemerkungen;
    private JPanel panButtons;
    private JPanel panCardArbeitsstandUndBemerkungen;
    private JPanel panCardFlaeche;
    private JPanel panCardMassnahmen;
    private JPanel panFooter;
    private AlboFlaecheMainPanel panMain;
    private JPanel panMainCard;
    private AlboFlaecheMassnahmenPanel panMassnahmen;
    private JPanel panTitle;
    private BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates a new AlboFlaecheEditor object.
     */
    public AlboFlaecheEditor() {
        this(true);
    }

    /**
     * Creates a new AlboFlaecheEditor object.
     *
     * @param  editable  DOCUMENT ME!
     */
    public AlboFlaecheEditor(final boolean editable) {
        this.editable = editable;
    }

    //~ Methods ----------------------------------------------------------------

    @Override
    public final void initWithConnectionContext(final ConnectionContext connectionContext) {
        this.connectionContext = connectionContext;
        initComponents();

        panMain.initWithConnectionContext(connectionContext);
        panArbeitsstand.initWithConnectionContext(connectionContext);
        panMassnahmen.initWithConnectionContext(connectionContext);
        panBemerkungen.initWithConnectionContext(connectionContext);

        this.cardLayout = (CardLayout)panMainCard.getLayout();
    }

    @Override
    public final ConnectionContext getConnectionContext() {
        return connectionContext;
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    @Override
    public CidsBean getCidsBean() {
        return cidsBean;
    }

    /**
     * DOCUMENT ME!
     *
     * @param  cidsBean  DOCUMENT ME!
     */
    @Override
    public void setCidsBean(final CidsBean cidsBean) {
        try {
            bindingGroup.unbind();
        } catch (final Exception ex) {
        }

        if (cidsBean != null) {
            if (isEditable()) {
                if (cidsBean.getProperty("fk_massnahmen") == null) {
                    try {
                        cidsBean.setProperty(
                            "fk_massnahmen",
                            CidsBean.getMetaClassFromTableName(
                                "WUNDA_BLAU",
                                "ALBO_MASSNAHMEN",
                                getConnectionContext()).getEmptyInstance(getConnectionContext()).getBean());
                    } catch (final Exception ex) {
                        LOG.fatal(ex, ex);
                    }
                }
            }

            DefaultCustomObjectEditor.setMetaClassInformationToMetaClassStoreComponentsInBindingGroup(
                bindingGroup,
                cidsBean,
                getConnectionContext());
            this.cidsBean = cidsBean;
            bindingGroup.bind();
        }
        panMain.setCidsBean(cidsBean);
        panArbeitsstand.setCidsBean(cidsBean);
        panBemerkungen.setCidsBean(cidsBean);
        panMassnahmen.setCidsBean((CidsBean)cidsBean.getProperty("fk_massnahmen"));

        updateFooterControls();
    }

    /**
     * DOCUMENT ME!
     *
     * @return  true if the fields/boxes are editable
     */
    public boolean isEditable() {
        return editable;
    }

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void btnBackActionPerformed(final ActionEvent evt) { //GEN-FIRST:event_btnBackActionPerformed
        cardLayout.previous(panMainCard);
        updateFooterControls();
    }                                                            //GEN-LAST:event_btnBackActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void btnForwardActionPerformed(final ActionEvent evt) { //GEN-FIRST:event_btnForwardActionPerformed
        cardLayout.next(panMainCard);
        updateFooterControls();
    }                                                               //GEN-LAST:event_btnForwardActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void jLabel1MouseClicked(final MouseEvent evt) { //GEN-FIRST:event_jLabel1MouseClicked
        cardLayout.show(panMainCard, "flaeche");
        updateFooterControls();
    }                                                        //GEN-LAST:event_jLabel1MouseClicked

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void jLabel2MouseClicked(final MouseEvent evt) { //GEN-FIRST:event_jLabel2MouseClicked
        cardLayout.show(panMainCard, "arbeitsstand");
        updateFooterControls();
    }                                                        //GEN-LAST:event_jLabel2MouseClicked

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void jLabel3MouseClicked(final MouseEvent evt) { //GEN-FIRST:event_jLabel3MouseClicked
        cardLayout.show(panMainCard, "massnahmen");
        updateFooterControls();
    }                                                        //GEN-LAST:event_jLabel3MouseClicked

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void jToggleButton1ActionPerformed(final ActionEvent evt) { //GEN-FIRST:event_jToggleButton1ActionPerformed
        if (isEditable()) {
            panMain.setUnlocked(jToggleButton1.isSelected());
        }
    }                                                                   //GEN-LAST:event_jToggleButton1ActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void btnReport1ActionPerformed(final ActionEvent evt) { //GEN-FIRST:event_btnReport1ActionPerformed
        if (DownloadManagerDialog.getInstance().showAskingForUserTitleDialog(
                        CismapBroker.getInstance().getMappingComponent())) {
            final String jobname = DownloadManagerDialog.getInstance().getJobName();

            final String name = String.valueOf(System.currentTimeMillis());
            DownloadManager.instance()
                    .add(
                        new ByteArrayActionDownload(
                            AlboExportServerAction.TASK_NAME,
                            name,
                            null,
                            "Schnittstellen-Export",
                            jobname,
                            name,
                            ".zip",
                            getConnectionContext()));
        }
    } //GEN-LAST:event_btnReport1ActionPerformed

    /**
     * DOCUMENT ME!
     */
    private void updateFooterControls() {
        for (final Component card : panMainCard.getComponents()) {
            if (card.isVisible()) {
                btnBack.setEnabled(!panCardFlaeche.equals(card));
                jLabel1.setEnabled(!panCardFlaeche.equals(card));
                jLabel2.setEnabled(!panCardArbeitsstandUndBemerkungen.equals(card));
                jLabel3.setEnabled(!panCardMassnahmen.equals(card));
                btnForward.setEnabled(!panCardMassnahmen.equals(card));
            }
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    @Override
    public JComponent getTitleComponent() {
        return panTitle;
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    @Override
    public JComponent getFooterComponent() {
        return panFooter;
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    @Override
    public Border getTitleBorder() {
        return new EmptyBorder(10, 10, 10, 10);
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    @Override
    public Border getFooterBorder() {
        return new EmptyBorder(5, 5, 5, 5);
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    @Override
    public Border getCenterrBorder() {
        return new EmptyBorder(0, 5, 0, 5);
    }

    /**
     * DOCUMENT ME!
     */
    @Override
    public void dispose() {
        panMain.dispose();
        panArbeitsstand.dispose();
        panMassnahmen.dispose();
        panBemerkungen.dispose();
        bindingGroup.unbind();
        cidsBean = null;
    }

    /**
     * DOCUMENT ME!
     *
     * @param  event  DOCUMENT ME!
     */
    @Override
    public void editorClosed(final EditorClosedEvent event) {
        panMain.editorClosed(event);
        panArbeitsstand.editorClosed(event);
        panMassnahmen.editorClosed(event);
        panBemerkungen.editorClosed(event);
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    @Override
    public boolean prepareForSave() {
        if (cidsBean.getProperty("loeschen") == null) {
            try {
                cidsBean.setProperty("loeschen", false);
            } catch (final Exception ex) {
                LOG.error(ex, ex);
                return false;
            }
        }
        return panMain.prepareForSave()
                    && panArbeitsstand.prepareForSave()
                    && panMassnahmen.prepareForSave()
                    && panBemerkungen.prepareForSave();
    }

    /**
     * DOCUMENT ME!
     *
     * @param   args  DOCUMENT ME!
     *
     * @throws  Exception  DOCUMENT ME!
     */
    public static void main(final String[] args) throws Exception {
        Log4JQuickConfig.configure4LumbermillOnLocalhost();
        final MappingComponent mc = new MappingComponent();
        CismapBroker.getInstance().setMappingComponent(mc);
        DevelopmentTools.createEditorFromRestfulConnection(
            DevelopmentTools.RESTFUL_CALLSERVER_CALLSERVER,
            "WUNDA_BLAU",
            null,
            true,
            "ALBO_FLAECHE",
            16521,
            1200,
            800);
    }

    @Override
    public String getTitle() {
        return null;
    }

    @Override
    public void setTitle(final String title) {
    }
}
