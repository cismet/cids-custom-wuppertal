/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cismet.cids.custom.objecteditors.wunda_blau;

import Sirius.server.middleware.types.MetaObject;
import de.cismet.cids.custom.objecteditors.utils.RendererTools;
import de.cismet.cids.custom.objecteditors.utils.TableUtils;
import org.apache.log4j.Logger;

import java.awt.Component;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.util.Collections;
import java.util.List;

import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.SwingWorker;

import de.cismet.cids.custom.objectrenderer.utils.ObjectRendererUtils;

import de.cismet.cids.dynamics.CidsBean;
import de.cismet.cids.dynamics.CidsBeanStore;
import de.cismet.cids.dynamics.Disposable;
import de.cismet.cids.editors.DefaultBindableDateChooser;

import de.cismet.connectioncontext.ConnectionContext;
import de.cismet.connectioncontext.ConnectionContextProvider;
import de.cismet.tools.gui.RoundedPanel;
import de.cismet.tools.gui.SemiRoundedPanel;
import de.cismet.tools.gui.StaticSwingTools;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Comparator;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import javax.swing.Box;
import javax.swing.DefaultListCellRenderer;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import org.jdesktop.beansbinding.AutoBinding;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.swingbinding.JListBinding;
import org.jdesktop.swingbinding.SwingBindings;
import org.jdesktop.swingx.JXErrorPane;
import org.jdesktop.swingx.error.ErrorInfo;
import org.openide.awt.Mnemonics;
import org.openide.util.NbBundle;

/**
 * DOCUMENT ME!
 *
 * @author   sandra
 * @version  $Revision$, $Date$
 */
public class BaumOrtsterminPanel extends javax.swing.JPanel implements Disposable, CidsBeanStore, ConnectionContextProvider {

    //~ Static fields/initializers ---------------------------------------------
    private static final Comparator<Object> COMPARATOR = new Comparator<Object>() {

            @Override
           /* public int compare(final Object o1, final Object o2) {
                return AlphanumComparator.getInstance().compare(String.valueOf(o1), String.valueOf(o2));
            }*/
            public int compare(final Object o1, final Object o2) {
                    return String.valueOf(o1).compareTo(String.valueOf(o2));
                }
        };
    
    private List<CidsBean> teilBeans;
    private static final Logger LOG = Logger.getLogger(BaumOrtsterminPanel.class);
    
    
    public static final String FIELD__TEILNEHMER = "n_teilnehmer";              // baum_ortstermin
    public static final String FIELD__NAME = "name";                            // baum_teilnehmer
    
    public static final String BUNDLE_TEIL_QUESTION = "BaumOrtsterminPanel.btnRemoveTeilActionPerformed().question";
    public static final String BUNDLE_TEIL_TITLE = "BaumOrtsterminPanel.btnRemoveTeilActionPerformed().title";
    public static final String BUNDLE_TEIL_ERRORTITLE = "BaumOrtsterminPanel.btnRemoveTeilrActionPerformed().errortitle";
    public static final String BUNDLE_TEIL_ERRORTEXT = "BaumOrtsterminPanel.btnRemoveTeilActionPerformed().errortext";

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        GridBagConstraints gridBagConstraints;
        bindingGroup = new BindingGroup();

        dlgAddTeil = new JDialog();
        panAddTeil = new JPanel();
        lblTeilAuswaehlen = new JLabel();
        panMenTeilButtons = new JPanel();
        btnTeilMenAbort = new JButton();
        btnTeilMenOk = new JButton();
        txtTeil = new JTextField();
        panOrtstermin = new JPanel();
        JLabel lblBemerkung = new JLabel();
        JScrollPane scpBemerkung = new JScrollPane();
        JTextArea taBemerkung = new JTextArea();
        panTeil = new JPanel();
        rpTeilliste = new RoundedPanel();
        scpLaufendeTeil = new JScrollPane();
        lstTeil = new JList();
        SemiRoundedPanel semiRoundedPanelTeil = new SemiRoundedPanel();
        lblTeiln = new JLabel();
        JPanel panControlsNewTeil = new JPanel();
        btnAddNewTeil = new JButton();
        btnRemoveTeil = new JButton();
        RoundedPanel rpTeilinfo = new RoundedPanel();
        semiRoundedPanel5 = new SemiRoundedPanel();
        lblTeil = new JLabel();
        panTeilMain = new JPanel();
        BaumTeilnehmerPanel baumTeilnehmerPanel1 = new BaumTeilnehmerPanel();
        Box.Filler filler4 = new Box.Filler(new Dimension(0, 0), new Dimension(0, 0), new Dimension(32767, 0));
        Box.Filler filler3 = new Box.Filler(new Dimension(0, 0), new Dimension(0, 0), new Dimension(32767, 0));

        FormListener formListener = new FormListener();

        dlgAddTeil.setModal(true);
        dlgAddTeil.setName("dlgAddTeil"); // NOI18N

        panAddTeil.setMaximumSize(new Dimension(180, 120));
        panAddTeil.setMinimumSize(new Dimension(180, 120));
        panAddTeil.setName("panAddTeil"); // NOI18N
        panAddTeil.setPreferredSize(new Dimension(180, 120));
        panAddTeil.setLayout(new GridBagLayout());

        lblTeilAuswaehlen.setText(NbBundle.getMessage(BaumOrtsterminPanel.class, "BaumOrtsterminPanel.lblTeilAuswaehlen.text")); // NOI18N
        lblTeilAuswaehlen.setName("lblTeilAuswaehlen"); // NOI18N
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.insets = new Insets(10, 10, 10, 10);
        panAddTeil.add(lblTeilAuswaehlen, gridBagConstraints);

        panMenTeilButtons.setName("panMenTeilButtons"); // NOI18N
        panMenTeilButtons.setLayout(new GridBagLayout());

        btnTeilMenAbort.setText(NbBundle.getMessage(BaumOrtsterminPanel.class, "BaumOrtsterminPanel.btnTeilMenAbort.text")); // NOI18N
        btnTeilMenAbort.setName("btnTeilMenAbort"); // NOI18N
        btnTeilMenAbort.addActionListener(formListener);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.insets = new Insets(5, 5, 5, 5);
        panMenTeilButtons.add(btnTeilMenAbort, gridBagConstraints);

        btnTeilMenOk.setText(NbBundle.getMessage(BaumOrtsterminPanel.class, "BaumOrtsterminPanel.btnTeilMenOk.text")); // NOI18N
        btnTeilMenOk.setName("btnTeilMenOk"); // NOI18N
        btnTeilMenOk.addActionListener(formListener);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.insets = new Insets(5, 5, 5, 5);
        panMenTeilButtons.add(btnTeilMenOk, gridBagConstraints);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = GridBagConstraints.LAST_LINE_END;
        gridBagConstraints.insets = new Insets(5, 5, 5, 5);
        panAddTeil.add(panMenTeilButtons, gridBagConstraints);

        txtTeil.setName("txtTeil"); // NOI18N
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new Insets(5, 5, 5, 5);
        panAddTeil.add(txtTeil, gridBagConstraints);

        dlgAddTeil.getContentPane().add(panAddTeil, BorderLayout.CENTER);

        setName("Form"); // NOI18N
        setOpaque(false);
        setLayout(new GridBagLayout());

        panOrtstermin.setName("panOrtstermin"); // NOI18N
        panOrtstermin.setOpaque(false);
        panOrtstermin.setLayout(new GridBagLayout());

        lblBemerkung.setFont(new Font("Tahoma", 1, 11)); // NOI18N
        Mnemonics.setLocalizedText(lblBemerkung, NbBundle.getMessage(BaumOrtsterminPanel.class, "BaumOrtsterminPanel.lblBemerkung.text")); // NOI18N
        lblBemerkung.setName("lblBemerkung"); // NOI18N
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.insets = new Insets(2, 0, 2, 5);
        panOrtstermin.add(lblBemerkung, gridBagConstraints);

        scpBemerkung.setName("scpBemerkung"); // NOI18N
        scpBemerkung.setOpaque(false);

        taBemerkung.setLineWrap(true);
        taBemerkung.setRows(2);
        taBemerkung.setWrapStyleWord(true);
        taBemerkung.setName("taBemerkung"); // NOI18N

        Binding binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, this, ELProperty.create("${cidsBean.bemerkung}"), taBemerkung, BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        scpBemerkung.setViewportView(taBemerkung);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panOrtstermin.add(scpBemerkung, gridBagConstraints);

        panTeil.setMinimumSize(new Dimension(197, 150));
        panTeil.setName("panTeil"); // NOI18N
        panTeil.setOpaque(false);
        panTeil.setPreferredSize(new Dimension(217, 150));
        panTeil.setLayout(new GridBagLayout());

        rpTeilliste.setMinimumSize(new Dimension(90, 202));
        rpTeilliste.setName("rpTeilliste"); // NOI18N
        rpTeilliste.setPreferredSize(new Dimension(90, 202));
        rpTeilliste.setLayout(new GridBagLayout());

        scpLaufendeTeil.setName("scpLaufendeTeil"); // NOI18N

        lstTeil.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lstTeil.setFixedCellWidth(75);
        lstTeil.setName("lstTeil"); // NOI18N

        ELProperty eLProperty = ELProperty.create("${cidsBean." + FIELD__TEILNEHMER + "}");
        JListBinding jListBinding = SwingBindings.createJListBinding(AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, lstTeil);
        bindingGroup.addBinding(jListBinding);

        scpLaufendeTeil.setViewportView(lstTeil);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new Insets(5, 5, 5, 5);
        rpTeilliste.add(scpLaufendeTeil, gridBagConstraints);

        semiRoundedPanelTeil.setBackground(Color.darkGray);
        semiRoundedPanelTeil.setMinimumSize(new Dimension(90, 25));
        semiRoundedPanelTeil.setName("semiRoundedPanelTeil"); // NOI18N
        semiRoundedPanelTeil.setPreferredSize(new Dimension(90, 25));
        semiRoundedPanelTeil.setLayout(new GridBagLayout());

        lblTeiln.setForeground(new Color(255, 255, 255));
        lblTeiln.setText(NbBundle.getMessage(BaumOrtsterminPanel.class, "BaumOrtsterminPanel.lblTeiln.text")); // NOI18N
        lblTeiln.setName("lblTeiln"); // NOI18N
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.anchor = GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new Insets(5, 5, 5, 5);
        semiRoundedPanelTeil.add(lblTeiln, gridBagConstraints);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        rpTeilliste.add(semiRoundedPanelTeil, gridBagConstraints);

        panControlsNewTeil.setName("panControlsNewTeil"); // NOI18N
        panControlsNewTeil.setOpaque(false);
        panControlsNewTeil.setLayout(new GridBagLayout());

        btnAddNewTeil.setIcon(new ImageIcon(getClass().getResource("/de/cismet/cids/custom/objecteditors/wunda_blau/edit_add_mini.png"))); // NOI18N
        btnAddNewTeil.setMaximumSize(new Dimension(39, 20));
        btnAddNewTeil.setMinimumSize(new Dimension(39, 20));
        btnAddNewTeil.setName("btnAddNewTeil"); // NOI18N
        btnAddNewTeil.setPreferredSize(new Dimension(39, 25));
        btnAddNewTeil.addActionListener(formListener);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new Insets(5, 5, 5, 5);
        panControlsNewTeil.add(btnAddNewTeil, gridBagConstraints);

        btnRemoveTeil.setIcon(new ImageIcon(getClass().getResource("/de/cismet/cids/custom/objecteditors/wunda_blau/edit_remove_mini.png"))); // NOI18N
        btnRemoveTeil.setMaximumSize(new Dimension(39, 20));
        btnRemoveTeil.setMinimumSize(new Dimension(39, 20));
        btnRemoveTeil.setName("btnRemoveTeil"); // NOI18N
        btnRemoveTeil.setPreferredSize(new Dimension(39, 25));
        btnRemoveTeil.addActionListener(formListener);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new Insets(5, 5, 5, 5);
        panControlsNewTeil.add(btnRemoveTeil, gridBagConstraints);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.insets = new Insets(0, 0, 5, 0);
        rpTeilliste.add(panControlsNewTeil, gridBagConstraints);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new Insets(0, 0, 0, 5);
        panTeil.add(rpTeilliste, gridBagConstraints);

        rpTeilinfo.setName("rpTeilinfo"); // NOI18N
        rpTeilinfo.setLayout(new GridBagLayout());

        semiRoundedPanel5.setBackground(Color.darkGray);
        semiRoundedPanel5.setName("semiRoundedPanel5"); // NOI18N
        semiRoundedPanel5.setLayout(new GridBagLayout());

        lblTeil.setForeground(new Color(255, 255, 255));
        lblTeil.setText(NbBundle.getMessage(BaumOrtsterminPanel.class, "BaumOrtsterminPanel.lblTeil.text")); // NOI18N
        lblTeil.setName("lblTeil"); // NOI18N
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new Insets(5, 5, 5, 5);
        semiRoundedPanel5.add(lblTeil, gridBagConstraints);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        rpTeilinfo.add(semiRoundedPanel5, gridBagConstraints);

        panTeilMain.setName("panTeilMain"); // NOI18N
        panTeilMain.setOpaque(false);
        panTeilMain.setLayout(new GridBagLayout());

        baumTeilnehmerPanel1.setName("baumTeilnehmerPanel1"); // NOI18N

        binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, lstTeil, ELProperty.create("${selectedElement}"), baumTeilnehmerPanel1, BeanProperty.create("cidsBean"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        panTeilMain.add(baumTeilnehmerPanel1, gridBagConstraints);

        filler4.setName("filler4"); // NOI18N
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new Insets(10, 10, 10, 10);
        panTeilMain.add(filler4, gridBagConstraints);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        rpTeilinfo.add(panTeilMain, gridBagConstraints);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 8.0;
        gridBagConstraints.insets = new Insets(0, 5, 0, 0);
        panTeil.add(rpTeilinfo, gridBagConstraints);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new Insets(5, 0, 0, 0);
        panOrtstermin.add(panTeil, gridBagConstraints);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        add(panOrtstermin, gridBagConstraints);

        filler3.setName("filler3"); // NOI18N
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new Insets(10, 10, 10, 10);
        add(filler3, gridBagConstraints);

        bindingGroup.bind();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements ActionListener {
        FormListener() {}
        public void actionPerformed(ActionEvent evt) {
            if (evt.getSource() == btnAddNewTeil) {
                BaumOrtsterminPanel.this.btnAddNewTeilActionPerformed(evt);
            }
            else if (evt.getSource() == btnRemoveTeil) {
                BaumOrtsterminPanel.this.btnRemoveTeilActionPerformed(evt);
            }
            else if (evt.getSource() == btnTeilMenAbort) {
                BaumOrtsterminPanel.this.btnTeilMenAbortActionPerformed(evt);
            }
            else if (evt.getSource() == btnTeilMenOk) {
                BaumOrtsterminPanel.this.btnTeilMenOkActionPerformed(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddNewTeilActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnAddNewTeilActionPerformed
        try {
            StaticSwingTools.showDialog(StaticSwingTools.getParentFrame(BaumOrtsterminPanel.this), dlgAddTeil, true);
        } catch (Exception e) {
            LOG.error("Cannot add new BaumOrtstermin object", e);
        }
    }//GEN-LAST:event_btnAddNewTeilActionPerformed

    private void btnRemoveTeilActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnRemoveTeilActionPerformed
        final Object selectedObject = lstTeil.getSelectedValue();

        if (selectedObject instanceof CidsBean) {
            //final List<CidsBean> meldungBeans = cidsBean.getBeanCollectionProperty(FIELD__MELDUNGEN);

            if (teilBeans != null) {
                teilBeans.remove((CidsBean)selectedObject);
                //((CustomJListModel)lstMeldungen.getModel()).refresh();
                //lstMeldungen.getSelectionModel().clearSelection();
                if (teilBeans != null) {
                    lstTeil.setSelectedIndex(0);
                }else{
                    lstTeil.clearSelection();
                }
            }
        }
    }//GEN-LAST:event_btnRemoveTeilActionPerformed

    private void btnTeilMenAbortActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnTeilMenAbortActionPerformed
        dlgAddTeil.setVisible(false);
        txtTeil.setText("");
    }//GEN-LAST:event_btnTeilMenAbortActionPerformed

    private void btnTeilMenOkActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnTeilMenOkActionPerformed
        try{
        //meldungsBean erzeugen und vorbelegen:
            final CidsBean beanTeil = CidsBean.createNewCidsBeanFromTableName(
                "WUNDA_BLAU",
                "BAUM_Teilnehmer",
                getConnectionContext());

            //Meldungen erweitern:
            teilBeans.add(beanTeil);

            //Refresh:

            bindingGroup.unbind();
            Collections.sort((List)teilBeans, COMPARATOR);
            bindingGroup.bind();
            lstTeil.setSelectedValue(beanTeil, true);

        } catch (Exception ex) {
            LOG.error(ex, ex);
        } finally {
            dlgAddTeil.setVisible(false);
        }
    }//GEN-LAST:event_btnTeilMenOkActionPerformed

    //~ Instance fields --------------------------------------------------------
    private final boolean isEditor;
    private final BaumMeldungPanel parentPanel;
    private final ConnectionContext connectionContext;
    private CidsBean cidsBean;
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    JButton btnAddNewTeil;
    JButton btnRemoveTeil;
    JButton btnTeilMenAbort;
    JButton btnTeilMenOk;
    JDialog dlgAddTeil;
    JLabel lblTeil;
    JLabel lblTeilAuswaehlen;
    JLabel lblTeiln;
    JList lstTeil;
    JPanel panAddTeil;
    JPanel panMenTeilButtons;
    JPanel panOrtstermin;
    JPanel panTeil;
    JPanel panTeilMain;
    RoundedPanel rpTeilliste;
    JScrollPane scpLaufendeTeil;
    SemiRoundedPanel semiRoundedPanel5;
    JTextField txtTeil;
    private BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates a new BaumMeldungPanel object.
     */
    public BaumOrtsterminPanel() {
        this(null,true);
    }

    
    /**
     * Creates new form BaumMeldungPanel.
     *
     * @param parentPanel
     * @param  editable  DOCUMENT ME!
     */
    public BaumOrtsterminPanel(final BaumMeldungPanel parentPanel, final boolean editable) {
        this.isEditor = editable;
        initComponents();
        this.connectionContext = null;
        this.parentPanel = parentPanel;
    }
 
    /**
     * Creates new form BaumMeldungPanel.
     *
     * @param parentPanel
     * @param  editable             DOCUMENT ME!
     * @param  connectionContext    DOCUMENT ME!
     */
    public BaumOrtsterminPanel(final BaumMeldungPanel parentPanel, final boolean editable,
            final ConnectionContext connectionContext) {
        this.isEditor = editable;
        this.connectionContext = connectionContext;
        initComponents();
        this.parentPanel = parentPanel;
        dlgAddTeil.pack();
        dlgAddTeil.getRootPane().setDefaultButton(btnTeilMenOk);
    }

    //~ Methods ----------------------------------------------------------------

    @Override
    public ConnectionContext getConnectionContext() {
        return connectionContext;
    }

   

   
    

    /**
     * DOCUMENT ME!
     *
     * @param  panel  DOCUMENT ME!
     */
    public void removeOrtsterminPanel(final BaumOrtsterminPanel panel) {
        if (panel != null) {
            //cidsBeans.remove(panel.getCidsBean());
            panOrtstermin.remove(panel);
            panOrtstermin.repaint();
        }
    }

        
    @Override
    public void dispose() {
        bindingGroup.unbind();
        cidsBean = null;
        dlgAddTeil.dispose();
    }

    @Override
    public CidsBean getCidsBean() {
        return this.cidsBean;
    }

    @Override
    public void setCidsBean(CidsBean cidsBean) {
        bindingGroup.unbind();
        this.cidsBean = cidsBean;
        if (this.cidsBean != null){
            setTeilnehmerBeans(cidsBean.getBeanCollectionProperty(FIELD__TEILNEHMER));   
        }
        if (teilBeans != null) {
            Collections.sort((List)teilBeans, COMPARATOR);
        }
        bindingGroup.bind();
        
        if (teilBeans != null) {
            lstTeil.setSelectedIndex(0);
        }
        lstTeil.setCellRenderer(new DefaultListCellRenderer() {

                @Override
                public Component getListCellRendererComponent(final JList list,
                        final Object value,
                        final int index,
                        final boolean isSelected,
                        final boolean cellHasFocus) {
                    Object newValue = value;

                    if (value instanceof CidsBean) {
                        final CidsBean bean = (CidsBean)value;
                        newValue = bean.getProperty(FIELD__NAME);

                        if (newValue == null) {
                            newValue = "unbenannt";
                        }
                    }
                    final Component compoTeil = super.getListCellRendererComponent(list, newValue, index, isSelected, cellHasFocus);
                    compoTeil.setForeground(Color.red);
                    return compoTeil;
                }
            });
    }
    /**
     * DOCUMENT ME!
     *
     * @param  cidsBeans  DOCUMENT ME!
     */
    public void setTeilnehmerBeans(final List<CidsBean> cidsBeans) {
        this.teilBeans = cidsBeans;
    }
    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    public List<CidsBean> getTeilnehmerBeans() {
        return teilBeans;
    }
}
