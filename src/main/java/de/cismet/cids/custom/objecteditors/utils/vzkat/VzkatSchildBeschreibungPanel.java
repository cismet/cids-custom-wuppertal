/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cismet.cids.custom.objecteditors.utils.vzkat;

import Sirius.server.middleware.types.MetaClass;

import java.io.InputStream;

import java.net.URL;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

import javax.imageio.ImageIO;

import javax.swing.ImageIcon;
import javax.swing.JTextField;
import javax.swing.SwingWorker;

import de.cismet.cids.custom.objecteditors.utils.RendererTools;
import de.cismet.cids.custom.treeicons.wunda_blau.VzkatSchildIconFactory;
import de.cismet.cids.custom.utils.vzkat.VzkatUtils;
import de.cismet.cids.custom.wunda_blau.search.server.VzkatZeichenLightweightSearch;

import de.cismet.cids.dynamics.CidsBean;
import de.cismet.cids.dynamics.CidsBeanStore;
import de.cismet.cids.dynamics.Disposable;

import de.cismet.cids.editors.DefaultBindableReferenceCombo;
import de.cismet.cids.editors.DefaultCustomObjectEditor;

import de.cismet.cids.navigator.utils.ClassCacheMultiple;

import de.cismet.connectioncontext.ConnectionContext;
import de.cismet.connectioncontext.ConnectionContextStore;

import de.cismet.security.WebAccessManager;

import de.cismet.tools.gui.StaticSwingTools;

/**
 * DOCUMENT ME!
 *
 * @author   jruiz
 * @version  $Revision$, $Date$
 */
public class VzkatSchildBeschreibungPanel extends javax.swing.JPanel implements CidsBeanStore,
    ConnectionContextStore,
    Disposable {

    //~ Static fields/initializers ---------------------------------------------

    private static final org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(
            VzkatSchildBeschreibungPanel.class);
    private static final ImageIcon ERROR_ICON = new ImageIcon(VzkatSchildIconFactory.class.getResource(
                "/res/16/vzkat_error.png"));
    private static final String ICON_URL_TEMPLATE =
        "http://dokumente.s10222.wuppertal-intra.de/vzkat-bilder/128x128/%s.png";
    private static final Map<String, ImageIcon> ICONS = new HashMap<>();

    //~ Instance fields --------------------------------------------------------

    private final boolean editable;
    private CidsBean cidsBean;
    private ConnectionContext connectionContext;
    private MetaClass mcVzkatStvo = null;
    private final VzkatZeichenLightweightSearch verkehrszeichenSearch = new VzkatZeichenLightweightSearch();

    private boolean cbStvoActionListenerEnabled = true;
    private SwingWorker<ImageIcon, Void> iconLoadingWorker = null;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    de.cismet.cids.editors.DefaultBindableReferenceCombo cbStvo;
    private de.cismet.cids.editors.FastBindableReferenceCombo cbVerkehrszeichen;
    private javax.swing.Box.Filler fillBeschreibungBodyLeft;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBemerkung;
    private javax.swing.JLabel lblIcon;
    private javax.swing.JLabel lblPosition;
    private javax.swing.JLabel lblVerkehrszeichen;
    private javax.swing.JPanel panBeschreibungBodyLeft;
    private javax.swing.JPanel panIcon;
    private javax.swing.JTextArea txtBemerkung;
    private javax.swing.JTextField txtPosition;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates a new VzkatSchildPanel object.
     */
    public VzkatSchildBeschreibungPanel() {
        this(false);
    }

    /**
     * Creates new form VzkatSchildPanel.
     *
     * @param  isEditable  DOCUMENT ME!
     */
    public VzkatSchildBeschreibungPanel(final boolean isEditable) {
        this.editable = isEditable;
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        panBeschreibungBodyLeft = new javax.swing.JPanel();
        lblPosition = new javax.swing.JLabel();
        lblVerkehrszeichen = new javax.swing.JLabel();
        txtPosition = new javax.swing.JTextField();
        cbStvo = new DefaultBindableReferenceCombo(mcVzkatStvo, true, false);
        fillBeschreibungBodyLeft = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0),
                new java.awt.Dimension(0, 0),
                new java.awt.Dimension(0, 32767));
        cbVerkehrszeichen = new de.cismet.cids.editors.FastBindableReferenceCombo(
                verkehrszeichenSearch,
                verkehrszeichenSearch.getRepresentationPattern(),
                verkehrszeichenSearch.getRepresentationFields());
        lblBemerkung = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtBemerkung = new javax.swing.JTextArea();
        panIcon = new javax.swing.JPanel();
        lblIcon = new javax.swing.JLabel();

        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        panBeschreibungBodyLeft.setOpaque(false);
        panBeschreibungBodyLeft.setLayout(new java.awt.GridBagLayout());

        lblPosition.setFont(lblPosition.getFont().deriveFont(lblPosition.getFont().getStyle() | java.awt.Font.BOLD));
        org.openide.awt.Mnemonics.setLocalizedText(
            lblPosition,
            org.openide.util.NbBundle.getMessage(
                VzkatSchildBeschreibungPanel.class,
                "VzkatSchildBeschreibungPanel.lblPosition.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        panBeschreibungBodyLeft.add(lblPosition, gridBagConstraints);

        lblVerkehrszeichen.setFont(lblVerkehrszeichen.getFont().deriveFont(
                lblVerkehrszeichen.getFont().getStyle()
                        | java.awt.Font.BOLD));
        org.openide.awt.Mnemonics.setLocalizedText(
            lblVerkehrszeichen,
            org.openide.util.NbBundle.getMessage(
                VzkatSchildBeschreibungPanel.class,
                "VzkatSchildBeschreibungPanel.lblVerkehrszeichen.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        panBeschreibungBodyLeft.add(lblVerkehrszeichen, gridBagConstraints);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.position}"),
                txtPosition,
                org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        panBeschreibungBodyLeft.add(txtPosition, gridBagConstraints);

        cbStvo.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    cbStvoActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        panBeschreibungBodyLeft.add(cbStvo, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        panBeschreibungBodyLeft.add(fillBeschreibungBodyLeft, gridBagConstraints);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.fk_zeichen}"),
                cbVerkehrszeichen,
                org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        cbVerkehrszeichen.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    cbVerkehrszeichenActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        panBeschreibungBodyLeft.add(cbVerkehrszeichen, gridBagConstraints);

        lblBemerkung.setFont(lblBemerkung.getFont().deriveFont(lblBemerkung.getFont().getStyle() | java.awt.Font.BOLD));
        org.openide.awt.Mnemonics.setLocalizedText(
            lblBemerkung,
            org.openide.util.NbBundle.getMessage(
                VzkatSchildBeschreibungPanel.class,
                "VzkatSchildBeschreibungPanel.lblBemerkung.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        panBeschreibungBodyLeft.add(lblBemerkung, gridBagConstraints);

        txtBemerkung.setColumns(20);
        txtBemerkung.setRows(3);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                org.jdesktop.beansbinding.ELProperty.create("${cidsBean.bemerkung}"),
                txtBemerkung,
                org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jScrollPane1.setViewportView(txtBemerkung);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        panBeschreibungBodyLeft.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(panBeschreibungBodyLeft, gridBagConstraints);

        panIcon.setOpaque(false);
        panIcon.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(
            lblIcon,
            org.openide.util.NbBundle.getMessage(
                VzkatSchildBeschreibungPanel.class,
                "VzkatSchildBeschreibungPanel.lblIcon.text")); // NOI18N
        lblIcon.setMaximumSize(new java.awt.Dimension(128, 128));
        lblIcon.setMinimumSize(new java.awt.Dimension(128, 128));
        lblIcon.setPreferredSize(new java.awt.Dimension(128, 128));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        panIcon.add(lblIcon, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        add(panIcon, gridBagConstraints);

        bindingGroup.bind();
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void cbStvoActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_cbStvoActionPerformed
        if (cbStvoActionListenerEnabled) {
            final CidsBean stvoBean = (CidsBean)cbStvo.getSelectedItem();
            verkehrszeichenSearch.setStvoId((stvoBean != null) ? (Integer)stvoBean.getProperty("id") : null);
            cbVerkehrszeichen.setSelectedItem(null);
            new SwingWorker<Void, Void>() {

                    @Override
                    protected Void doInBackground() throws Exception {
                        cbVerkehrszeichen.refreshModel();
                        return null;
                    }
                }.execute();
        }
    } //GEN-LAST:event_cbStvoActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void cbVerkehrszeichenActionPerformed(final java.awt.event.ActionEvent evt) { //GEN-FIRST:event_cbVerkehrszeichenActionPerformed
        final JTextField txt = (JTextField)cbVerkehrszeichen.getEditor().getEditorComponent();
        final CidsBean selectedZeichen = (CidsBean)cbVerkehrszeichen.getSelectedItem();

        final String text;
        if (selectedZeichen != null) {
            text = VzkatUtils.createZeichenToString(cidsBean);

            final CidsBean selectedStvo = (cbStvo.getSelectedItem() instanceof CidsBean)
                ? (CidsBean)cbStvo.getSelectedItem() : null;
            final CidsBean stvoOfSelectedZeichen = (CidsBean)selectedZeichen.getProperty("fk_stvo");
            if (!Objects.equals(stvoOfSelectedZeichen, selectedStvo)) {
                try {
                    cbStvoActionListenerEnabled = false;
                    cbStvo.setSelectedItem(stvoOfSelectedZeichen);
                } finally {
                    cbStvoActionListenerEnabled = true;
                }
            }

            refreshIcon(VzkatUtils.createZeichenKey(selectedZeichen));
        } else {
            text = "";
            refreshIcon(null);
        }
        txt.setText(text);
    } //GEN-LAST:event_cbVerkehrszeichenActionPerformed

    @Override
    public CidsBean getCidsBean() {
        return cidsBean;
    }

    @Override
    public void setCidsBean(final CidsBean cidsBean) {
        bindingGroup.unbind();
        this.cidsBean = cidsBean;
        if (cidsBean != null) {
            DefaultCustomObjectEditor.setMetaClassInformationToMetaClassStoreComponentsInBindingGroup(
                bindingGroup,
                cidsBean,
                getConnectionContext());
            bindingGroup.bind();

            final CidsBean stvoOfSelectedZeichen = (CidsBean)cidsBean.getProperty("fk_zeichen.fk_stvo");
            try {
                cbStvoActionListenerEnabled = false;
                cbStvo.setSelectedItem(stvoOfSelectedZeichen);
            } finally {
                cbStvoActionListenerEnabled = true;
            }
        }

        refreshIcon((cidsBean != null) ? VzkatUtils.createZeichenKey((CidsBean)cidsBean.getProperty("fk_zeichen"))
                                       : null);
    }

    @Override
    public void initWithConnectionContext(final ConnectionContext connectionContext) {
        this.connectionContext = connectionContext;
        initComponents();
        RendererTools.makeReadOnly(txtPosition);
        if (!editable) {
            RendererTools.makeReadOnly(cbVerkehrszeichen);
            RendererTools.makeReadOnly(cbStvo);
            RendererTools.makeReadOnly(txtBemerkung);
        } else {
            StaticSwingTools.decorateWithFixedAutoCompleteDecorator(cbVerkehrszeichen);
        }

        new SwingWorker<Void, Void>() {

                @Override
                protected Void doInBackground() throws Exception {
                    mcVzkatStvo = ClassCacheMultiple.getMetaClass(
                            "WUNDA_BLAU",
                            "VZKAT_STVO",
                            connectionContext);
                    return null;
                }

                @Override
                protected void done() {
                    try {
                        get();
                        cbStvo.setMetaClass(mcVzkatStvo);
                        cbStvo.reload(true);
                    } catch (final Exception ex) {
                        LOG.error(ex, ex);
                    }
                }
            }.execute();
    }

    @Override
    public ConnectionContext getConnectionContext() {
        return connectionContext;
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    public boolean isEditable() {
        return editable;
    }

    /**
     * DOCUMENT ME!
     *
     * @param   key  DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     *
     * @throws  Exception  DOCUMENT ME!
     */
    private static ImageIcon loadZeichenIcon(final String key) throws Exception {
        final String urlString = String.format(ICON_URL_TEMPLATE, key);
        final InputStream is = WebAccessManager.getInstance().doRequest(new URL(urlString));
        return new ImageIcon(ImageIO.read(is));
    }

    /**
     * DOCUMENT ME!
     *
     * @param  key  DOCUMENT ME!
     */
    private void refreshIcon(final String key) {
        if (key != null) {
            iconLoadingWorker = new SwingWorker<ImageIcon, Void>() {

                    @Override
                    protected ImageIcon doInBackground() throws Exception {
                        return loadZeichenIcon(key);
                    }

                    @Override
                    protected void done() {
                        if (this.equals(iconLoadingWorker)) {
                            try {
                                final ImageIcon icon = get();
                                ICONS.put(key, icon);
                            } catch (final Exception ex) {
                                LOG.error(ex, ex);
                                ICONS.put(key, ERROR_ICON);
                            }
                            lblIcon.setIcon(ICONS.get(key));
                        }
                    }
                };
            iconLoadingWorker.execute();
        } else {
            lblIcon.setIcon(null);
        }
    }

    @Override
    public void dispose() {
    }
}
