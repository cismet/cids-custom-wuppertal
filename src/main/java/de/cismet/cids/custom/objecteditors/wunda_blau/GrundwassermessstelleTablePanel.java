/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cismet.cids.custom.objecteditors.wunda_blau;

import Sirius.navigator.connection.SessionManager;

import Sirius.server.middleware.types.MetaClass;
import Sirius.server.middleware.types.MetaObject;
import Sirius.server.newuser.User;

import org.apache.log4j.Logger;

import org.jdesktop.swingx.JXDatePicker;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.text.DecimalFormat;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.List;

import javax.swing.AbstractCellEditor;
import javax.swing.ButtonGroup;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JToggleButton;
import javax.swing.RowFilter;
import javax.swing.SwingConstants;
import javax.swing.SwingWorker;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableModel;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NumberFormatter;

import de.cismet.cids.dynamics.CidsBean;
import de.cismet.cids.dynamics.CidsBeanStore;

import de.cismet.connectioncontext.ConnectionContext;
import de.cismet.connectioncontext.ConnectionContextStore;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseEvent;
import java.io.Serializable;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.EventObject;
import java.util.Locale;
import org.openide.util.Exceptions;

/**
 * DOCUMENT ME!
 *
 * @author   jruiz
 * @version  $Revision$, $Date$
 */
public class GrundwassermessstelleTablePanel extends JPanel implements ConnectionContextStore, CidsBeanStore {

    //~ Static fields/initializers ---------------------------------------------

    private static final Logger LOG = Logger.getLogger(GrundwassermessstelleTablePanel.class);

    //~ Instance fields --------------------------------------------------------

    private ConnectionContext connectionContext = ConnectionContext.createDummy();
    private CidsBean cidsBean;

    private final boolean editable;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnRemove;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXTable jXTable1;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form NewJPanel.
     *
     * @param  editable  DOCUMENT ME!
     */
    public GrundwassermessstelleTablePanel(final boolean editable) {
        this.editable = editable;
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jXTable1 = new org.jdesktop.swingx.JXTable();
        jPanel3 = new javax.swing.JPanel();
        btnRemove = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));

        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        jPanel1.setOpaque(false);
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel2.setOpaque(false);

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(GrundwassermessstelleTablePanel.class, "GrundwassermessstelleTablePanel.jButton1.text")); // NOI18N
        jPanel2.add(jButton1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jPanel2, gridBagConstraints);

        jXTable1.setModel(new MesswerteTableModel());
        jXTable1.setOpaque(false);
        jXTable1.setRowFilter(new MesswertRowFilter());
        jScrollPane1.setViewportView(jXTable1);
        jXTable1.setDefaultRenderer(Double.class, new MesswertTableCellRenderer());
        jXTable1.setDefaultEditor(Date.class, new DatumTableCellEditor());
        jXTable1.setDefaultEditor(Double.class, new MesswertTableCellEditor());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jScrollPane1, gridBagConstraints);

        jPanel3.setOpaque(false);
        jPanel3.setLayout(new java.awt.GridBagLayout());

        btnRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/cismet/cids/custom/objecteditors/wunda_blau/edit_remove_mini.png"))); // NOI18N
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel3.add(btnRemove, gridBagConstraints);

        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/cismet/cids/custom/objecteditors/wunda_blau/edit_add_mini.png"))); // NOI18N
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jPanel3.add(btnAdd, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(filler1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jPanel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jPanel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void btnAddActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        try {
            final CidsBean messungBean = CidsBean.createNewCidsBeanFromTableName("WUNDA_BLAU", "grundwassermessstelle_messung", getConnectionContext());
            messungBean.setProperty("kategorie", getModel().getKategorieBean());
            getModel().addMessung(messungBean); 
            final int rowIndex = getModel().getRowIndex(messungBean);
            jXTable1.setRowSelectionInterval(rowIndex, rowIndex);
            jXTable1.scrollRowToVisible(rowIndex);
        } catch (final Exception ex) {
            LOG.error("error while creating new messung", ex);
        }
    }//GEN-LAST:event_btnAddActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void btnRemoveActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        final int rowIndex = (jXTable1.getSelectedRow() >= 0)
            ? jXTable1.convertRowIndexToModel(jXTable1.getSelectedRow()) : -1;        
        if ((rowIndex >= 0)) {
            final CidsBean messungBean = getModel().getMessungBean(rowIndex);
            getModel().removeMessung(messungBean);
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    /**
     * DOCUMENT ME!
     *
     * @throws  Exception  DOCUMENT ME!
     */
    private void loadKategorien() throws Exception {
        jPanel2.removeAll();
        new SwingWorker<List<CidsBean>, Void>() {

                @Override
                protected List<CidsBean> doInBackground() throws Exception {
                    final MetaClass kategorieMc = CidsBean.getMetaClassFromTableName(
                            "WUNDA_BLAU",
                            "grundwassermessstelle_kategorie",
                            getConnectionContext());
                    final User user = SessionManager.getSession().getUser();
                    final MetaObject[] kategorieMos = SessionManager.getProxy()
                                .getAllLightweightMetaObjectsForClass(kategorieMc.getId(),
                                    user,
                                    new String[] { "id", "name" },
                                    "%1$2s",
                                    getConnectionContext());
                    final List<CidsBean> kategorieBeans = new ArrayList<>(kategorieMos.length);
                    for (final MetaObject kategorieMo : kategorieMos) {
                        if (kategorieMo != null) {
                            kategorieBeans.add(kategorieMo.getBean());
                        }
                    }

                    kategorieBeans.sort(new Comparator<CidsBean>() {

                            @Override
                            public int compare(final CidsBean cidsBean1, final CidsBean cidsBean2) {
                                final Integer o1 = (cidsBean1 != null) ? (Integer)cidsBean1.getProperty("reihenfolge")
                                                                       : null;
                                final Integer o2 = (cidsBean2 != null) ? (Integer)cidsBean2.getProperty("reihenfolge")
                                                                       : null;
                                if (o2 == null) {
                                    return 1;
                                }
                                if (o1 == null) {
                                    return -1;
                                }
                                return Integer.compare(o1, o2);
                            }
                        });
                    return kategorieBeans;
                }

                @Override
                protected void done() {
                    try {
                        final List<CidsBean> kategorieBeans = get();
                        final ButtonGroup bg = new ButtonGroup();
                        StoffgruppeButton firstButton = null;
                        CidsBean firstKategorieBean = null;
                        for (final CidsBean kategorieBean : kategorieBeans) {
                            final StoffgruppeButton button = new StoffgruppeButton(kategorieBean);
                            if (firstButton == null) {
                                firstButton = button;
                                firstKategorieBean = kategorieBean;
                            }
                            jPanel2.add(button);
                            bg.add(button);
                        }
                        jPanel1.repaint();
                        firstButton.setSelected(true);
                        setKategorie(firstKategorieBean);
                    } catch (final Exception ex) {
                        LOG.error("error while loading kategorie bean", ex);
                    }
                }
            }.execute();
    }

    @Override
    public void initWithConnectionContext(final ConnectionContext connectionContext) {
        this.connectionContext = connectionContext;
        initComponents();
        try {
            loadKategorien();
        } catch (Exception ex) {
            LOG.error("error while initializing context", ex);
        }
    }

    @Override
    public ConnectionContext getConnectionContext() {
        return connectionContext;
    }

    @Override
    public CidsBean getCidsBean() {
        return cidsBean;
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    private MesswerteTableModel getModel() {
        return (MesswerteTableModel)jXTable1.getModel();
    }

    @Override
    public void setCidsBean(final CidsBean cidsBean) {
        if (cidsBean != null) {
            this.cidsBean = cidsBean;
            getModel().setMessungBeans(cidsBean.getBeanCollectionProperty("messungen"));
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @param  kategorieBean  DOCUMENT ME!
     */
    private void setKategorie(final CidsBean kategorieBean) {
        getModel().setKategorieBean(kategorieBean);
    }

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    class StoffgruppeButton extends JToggleButton {

        //~ Constructors -------------------------------------------------------

        /**
         * Creates a new StoffgruppeButton object.
         *
         * @param  kategorieBean  DOCUMENT ME!
         */
        StoffgruppeButton(final CidsBean kategorieBean) {
            super(kategorieBean.toString());
            addActionListener(new ActionListener() {

                    @Override
                    public void actionPerformed(final ActionEvent e) {
                        setKategorie(kategorieBean);
                    }
                });
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    class MesswertRowFilter extends RowFilter<TableModel, Integer> {

        //~ Methods ------------------------------------------------------------

        @Override
        public boolean include(final Entry<? extends TableModel, ? extends Integer> entry) {
            final CidsBean messungBean = getModel().getMessungBeans().get(entry.getIdentifier());
            final CidsBean kategorieBean = getModel().getKategorieBean();
            return ((kategorieBean != null) && kategorieBean.equals(messungBean.getProperty("kategorie")));
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    class MesswerteTableModel extends AbstractTableModel {

        //~ Instance fields ----------------------------------------------------

        private List<CidsBean> messungBeans;
        private CidsBean kategorieBean;

        //~ Constructors -------------------------------------------------------

        /**
         * Creates a new MesswerteTableModel object.
         */
        public MesswerteTableModel() {
        }

        //~ Methods ------------------------------------------------------------

        /**
         * DOCUMENT ME!
         *
         * @param  messungBeans  DOCUMENT ME!
         */
        public void setMessungBeans(final List<CidsBean> messungBeans) {
            this.messungBeans = messungBeans;
            fireTableDataChanged();
        }

        /**
         * DOCUMENT ME!
         *
         * @param  kategorieBean  DOCUMENT ME!
         */
        public void setKategorieBean(final CidsBean kategorieBean) {
            this.kategorieBean = kategorieBean;
            fireTableStructureChanged();
        }

        public int getRowIndex(final CidsBean messungBean) {
            return messungBeans.indexOf(messungBean);
        }
        
        /**
         * DOCUMENT ME!
         *
         * @param  messungBean  DOCUMENT ME!
         */
        public void addMessung(final CidsBean messungBean) {
            messungBeans.add(messungBean);
            fireTableDataChanged();            
        }

        /**
         * DOCUMENT ME!
         *
         * @param  messungBean  DOCUMENT ME!
         */
        public void removeMessung(final CidsBean messungBean) {
            messungBeans.remove(messungBean);
            fireTableDataChanged();
        }

        /**
         * DOCUMENT ME!
         *
         * @return  DOCUMENT ME!
         */
        public CidsBean getKategorieBean() {
            return kategorieBean;
        }

        /**
         * DOCUMENT ME!
         *
         * @return  DOCUMENT ME!
         */
        public List<CidsBean> getMessungBeans() {
            return messungBeans;
        }

        /**
         * DOCUMENT ME!
         *
         * @return  DOCUMENT ME!
         */
        private boolean showBemerkung() {
            return Boolean.TRUE.equals(kategorieBean.getProperty("show_bemerkung_messung"));
        }

        @Override
        public String getColumnName(final int columnIndex) {
            if (columnIndex == 0) {
                return "Datum";
            } else if (showBemerkung() && (columnIndex == (getColumnCount() - 1))) {
                return "Bemerkung";
            } else {
                final CidsBean stoffBean = getStoffBean(columnIndex);
                return (String)stoffBean.getProperty("name");
            }
        }

        @Override
        public boolean isCellEditable(final int rowIndex, final int columnIndex) {
            return editable;
        }

        @Override
        public Class<?> getColumnClass(final int columnIndex) {
            if (columnIndex == 0) {
                return Date.class;
            } else if (showBemerkung() && (columnIndex == (getColumnCount() - 1))) {
                return String.class;
            } else {
                return Double.class;
            }
        }

        @Override
        public int getRowCount() {
            return (messungBeans != null) ? messungBeans.size() : 0;
        }

        @Override
        public int getColumnCount() {
            return (kategorieBean != null)
                ? (kategorieBean.getBeanCollectionProperty("stoffe").size() + 1 + ((showBemerkung()) ? 1 : 0)) : 0;
        }

        /**
         * DOCUMENT ME!
         *
         * @param   columnIndex  DOCUMENT ME!
         *
         * @return  DOCUMENT ME!
         */
        public CidsBean getStoffBean(final int columnIndex) {
            final int stoffIndex = columnIndex - 1;
            return kategorieBean.getBeanCollectionProperty("stoffe").get(stoffIndex);
        }

        /**
         * DOCUMENT ME!
         *
         * @param   rowIndex  DOCUMENT ME!
         *
         * @return  DOCUMENT ME!
         */
        public CidsBean getMessungBean(final int rowIndex) {
            return messungBeans.get(rowIndex);
        }

        /**
         * DOCUMENT ME!
         *
         * @param   columnIndex  DOCUMENT ME!
         * @param   rowIndex     DOCUMENT ME!
         *
         * @return  DOCUMENT ME!
         */
        public CidsBean getMesswertBean(final int rowIndex, final int columnIndex) {
            if ((columnIndex > 0) && (columnIndex < (getColumnCount() - ((showBemerkung()) ? 1 : 0)))) {
                final CidsBean stoffBean = getStoffBean(columnIndex);
                final CidsBean messungBean = getMessungBean(rowIndex);
                for (final CidsBean messwertBean : messungBean.getBeanCollectionProperty("messwerte")) {
                    if (stoffBean.equals(messwertBean.getProperty("stoff"))) {
                        return messwertBean;
                    }
                }
                return null;
            } else {
                return null;
            }
        }

        @Override
        public Object getValueAt(final int rowIndex, final int columnIndex) {
            final CidsBean messungBean = getMessungBean(rowIndex);
            if (columnIndex == 0) {
                return messungBean.getProperty("datum");
            } else if (showBemerkung() && (columnIndex == (getColumnCount() - 1))) {
                return messungBean.getProperty("bemerkung");
            } else {
                final CidsBean messwertBean = getMesswertBean(rowIndex, columnIndex);
                return (messwertBean != null) ? (Double)messwertBean.getProperty("wert") : null;
            }
        }

        @Override
        public void setValueAt(final Object value, final int rowIndex, final int columnIndex) {
            super.setValueAt(value, rowIndex, columnIndex);

            try {
                final CidsBean messungBean = getMessungBean(rowIndex);
                if (columnIndex == 0) {
                    messungBean.setProperty("datum", new java.sql.Date(((Date)value).getTime()));
                } else if (showBemerkung() && (columnIndex == (getColumnCount() - 1))) {
                    messungBean.setProperty("bemerkung", (String)value);
                } else {
                    final CidsBean foundMesswertBean = getMesswertBean(rowIndex, columnIndex);
                    if (foundMesswertBean != null) {
                        if (value != null) {
                        foundMesswertBean.setProperty("wert", (Double)value);
                        } else {
                            messungBean.getBeanCollectionProperty("messwerte").remove(foundMesswertBean);
                        }
                    } else {
                        try {
                            final CidsBean stoffBean = getStoffBean(columnIndex);
                            if (value != null) {
                                final CidsBean messwertBean = CidsBean.createNewCidsBeanFromTableName(
                                        "WUNDA_BLAU",
                                        "grundwassermessstelle_messwert",
                                        getConnectionContext());
                                messwertBean.setProperty("stoff", stoffBean);
                                messwertBean.setProperty("wert", (Double)value);
                                messungBean.getBeanCollectionProperty("messwerte").add(messwertBean);
                            }
                        } catch (final Exception ex) {
                            LOG.warn("error while creating messwertBean", ex);
                        }
                    }
                }
            } catch (final Exception ex) {
                LOG.warn("could not update value", ex);
            }
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    class MesswertTableCellRenderer extends DefaultTableCellRenderer {

        //~ Methods ------------------------------------------------------------

        @Override
        public Component getTableCellRendererComponent(
                final JTable table,
                final Object value,
                final boolean isSelected,
                final boolean hasFocus,
                final int rowIndex,
                final int columnIndex) {
            final JLabel label = (JLabel)super.getTableCellRendererComponent(
                    table,
                    value,
                    isSelected,
                    hasFocus,
                    rowIndex,
                    columnIndex);

            final CidsBean messungBean = getModel().getMessungBeans()
                        .get(jXTable1.getRowSorter().convertRowIndexToModel(rowIndex));
            final CidsBean stoffBean = getModel().getStoffBean(columnIndex);

            for (final CidsBean messwertBean : messungBean.getBeanCollectionProperty("messwerte")) {
                if (stoffBean.equals(messwertBean.getProperty("stoff"))) {
                    final Double wert = (Double)messwertBean.getProperty("wert");
                    final int nachkommastellen = (Integer)stoffBean.getProperty("nachkommastellen");
                    final DecimalFormat format = new DecimalFormat();
                    format.setMinimumFractionDigits(nachkommastellen);
                    format.setMaximumFractionDigits(nachkommastellen);
                    label.setHorizontalAlignment(SwingConstants.TRAILING);
                    label.setText(wert != null ? format.format(wert) + " " + (String)stoffBean.getProperty("einheit") : null);
                    label.setToolTipText((String)messwertBean.getProperty("bemerkung"));
                    break;
                }
            }
            return label;
        }
    }    
    
    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    class MesswertTableCellEditor extends AbstractCellEditor implements TableCellEditor {

        //~ Instance fields ----------------------------------------------------

        private final JFormattedTextField formattedTextField = new JFormattedTextField(NumberFormat.getNumberInstance(Locale.GERMAN));

        public MesswertTableCellEditor() {
            formattedTextField.setHorizontalAlignment(JFormattedTextField.RIGHT);
            
             formattedTextField.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    stopCellEditing();
                }
            });
        }
        
        //~ Methods ------------------------------------------------------------
        
        @Override
        public Component getTableCellEditorComponent(final JTable table,
                final Object value,
                final boolean isSelected,
                final int rowIndex,
                final int columnIndex) {
            final CidsBean stoffBean = getModel().getStoffBean(columnIndex);

            final NumberFormatter formatter = new NumberFormatter(new DecimalFormat()) {
                @Override
                public Object stringToValue(String text) throws ParseException {
                    if (text == null || text.trim().isEmpty()) {
                        return null;
                    } else {
                        return super.stringToValue(text);
                    }
                }
              
            };
            formattedTextField.setFormatterFactory(new DefaultFormatterFactory(formatter));
            formattedTextField.setValue((value != null) ? ((Number)value).doubleValue() : null);
            return formattedTextField;
        }

        @Override
        public boolean isCellEditable(final EventObject anEvent) {
            if (anEvent instanceof MouseEvent) {
                return ((MouseEvent)anEvent).getClickCount() >= 2;
            }
            return true;
        }        
        
        @Override
        public Object getCellEditorValue() {
            return (formattedTextField.getValue() != null) ? ((Number)formattedTextField.getValue()).doubleValue()
                                                           : null;
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    class DatumTableCellEditor extends AbstractCellEditor implements TableCellEditor {

        //~ Instance fields ----------------------------------------------------

        final JXDatePicker datePicker = new JXDatePicker();

        //~ Methods ------------------------------------------------------------

        @Override
        public Component getTableCellEditorComponent(final JTable table,
                final Object value,
                final boolean isSelected,
                final int rowIndex,
                final int vColIndex) {
            final Date date = (Date)value;
            datePicker.setDate(date);
            return datePicker;
        }

        @Override
        public Object getCellEditorValue() {
            return datePicker.getDate();
        }
        
        public boolean isCellEditable(final EventObject anEvent) {
            if (anEvent instanceof MouseEvent) {
                return ((MouseEvent)anEvent).getClickCount() >= 2;
            }
            return true;
        }        
        
    }
}
