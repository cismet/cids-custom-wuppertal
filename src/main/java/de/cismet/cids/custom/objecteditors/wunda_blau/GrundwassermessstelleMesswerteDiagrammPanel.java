/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cismet.cids.custom.objecteditors.wunda_blau;

import org.apache.log4j.Logger;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickMarkPosition;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.time.Day;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;

import java.awt.datatransfer.DataFlavor;

import java.text.SimpleDateFormat;

import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import de.cismet.cids.dynamics.CidsBean;

import de.cismet.connectioncontext.ConnectionContext;
import de.cismet.connectioncontext.ConnectionContextProvider;

/**
 * DOCUMENT ME!
 *
 * @author   jruiz
 * @version  $Revision$, $Date$
 */
public class GrundwassermessstelleMesswerteDiagrammPanel extends javax.swing.JPanel
        implements ConnectionContextProvider {

    //~ Static fields/initializers ---------------------------------------------

    private static final Logger LOG = Logger.getLogger(GrundwassermessstelleMesswerteDiagrammPanel.class);

    public static final DataFlavor STOFF_BEAN_FLAVOR = new DataFlavor(
            DataFlavor.javaJVMLocalObjectMimeType,
            "DiagrammStoffBean"); // NOI18N

    //~ Instance fields --------------------------------------------------------

    private final Collection<CidsBean> stoffBeans;
    private final Collection<CidsBean> messungBeans;
    private final ConnectionContext connectionContext;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private de.cismet.cids.custom.objecteditors.wunda_blau.GrundwassermessstelleDiagrammAxisPanel
        grundwassermessstelleDiagrammAxisPanel1;
    private de.cismet.cids.custom.objecteditors.wunda_blau.GrundwassermessstelleDiagrammAxisPanel
        grundwassermessstelleDiagrammAxisPanel2;
    private de.cismet.cids.custom.objecteditors.wunda_blau.GrundwassermessstelleDiagrammAxisPanel
        grundwassermessstelleDiagrammAxisPanel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form GrundwassermessstelleMessungenDiagrammPanel.
     *
     * @param  stoffBeans         DOCUMENT ME!
     * @param  messungBeans       DOCUMENT ME!
     * @param  connectionContext  DOCUMENT ME!
     */
    public GrundwassermessstelleMesswerteDiagrammPanel(final Collection<CidsBean> stoffBeans,
            final Collection<CidsBean> messungBeans,
            final ConnectionContext connectionContext) {
        this.connectionContext = connectionContext;
        this.stoffBeans = stoffBeans;
        this.messungBeans = messungBeans;

        initComponents();
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    public ChartPanel getChartPanel() {
        return (ChartPanel)jPanel2;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        grundwassermessstelleDiagrammAxisPanel1 =
            new de.cismet.cids.custom.objecteditors.wunda_blau.GrundwassermessstelleDiagrammAxisPanel(this, stoffBeans);
        grundwassermessstelleDiagrammAxisPanel2 =
            new de.cismet.cids.custom.objecteditors.wunda_blau.GrundwassermessstelleDiagrammAxisPanel(this);
        grundwassermessstelleDiagrammAxisPanel3 =
            new de.cismet.cids.custom.objecteditors.wunda_blau.GrundwassermessstelleDiagrammAxisPanel(this);
        jPanel2 = new ChartPanel(refreshChart());

        setLayout(new java.awt.GridBagLayout());

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        grundwassermessstelleDiagrammAxisPanel1.setAxisName(org.openide.util.NbBundle.getMessage(
                GrundwassermessstelleMesswerteDiagrammPanel.class,
                "GrundwassermessstelleMesswerteDiagrammPanel.grundwassermessstelleDiagrammAxisPanel1.axisName")); // NOI18N
        jPanel1.add(grundwassermessstelleDiagrammAxisPanel1);

        grundwassermessstelleDiagrammAxisPanel2.setAxisName(org.openide.util.NbBundle.getMessage(
                GrundwassermessstelleMesswerteDiagrammPanel.class,
                "GrundwassermessstelleMesswerteDiagrammPanel.grundwassermessstelleDiagrammAxisPanel2.axisName")); // NOI18N
        jPanel1.add(grundwassermessstelleDiagrammAxisPanel2);

        grundwassermessstelleDiagrammAxisPanel3.setAxisName(org.openide.util.NbBundle.getMessage(
                GrundwassermessstelleMesswerteDiagrammPanel.class,
                "GrundwassermessstelleMesswerteDiagrammPanel.grundwassermessstelleDiagrammAxisPanel3.axisName")); // NOI18N
        jPanel1.add(grundwassermessstelleDiagrammAxisPanel3);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jPanel3.add(jPanel1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel3.add(jPanel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jPanel3, gridBagConstraints);
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param   axisPanel  DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    private TimeSeriesCollection createDataSet(final GrundwassermessstelleDiagrammAxisPanel axisPanel) {
        final TimeSeriesCollection datasetLeft = new TimeSeriesCollection();

        for (final CidsBean stoffBean : axisPanel.getStoffBeans()) {
            final String einheit = (String)stoffBean.getProperty("einheit");
            final String name = (String)stoffBean.getProperty("name");
            final TimeSeries series = new TimeSeries(name + ((einheit != null) ? (" (" + einheit + ")") : ""));
            for (final CidsBean messungBean : messungBeans) {
                final Date datum = (Date)messungBean.getProperty("datum");
                for (final CidsBean messwertBean : messungBean.getBeanCollectionProperty("messwerte")) {
                    final String schluessel = (String)stoffBean.getProperty("schluessel");
                    if ((schluessel != null)
                                && schluessel.equals((String)messwertBean.getProperty("stoff_schluessel"))) {
                        series.add(new Day(datum), (Double)messwertBean.getProperty("wert"));
                    }
                }
            }
            datasetLeft.addSeries(series);
        }
        return datasetLeft;
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    public JFreeChart refreshChart() {
        final TimeSeriesCollection dataSetLeft = createDataSet(grundwassermessstelleDiagrammAxisPanel2);
        final TimeSeriesCollection dataSetRight = (!grundwassermessstelleDiagrammAxisPanel3.getStoffBeans().isEmpty())
            ? createDataSet(grundwassermessstelleDiagrammAxisPanel3) : null;

        final Set<String> einheitenLeft = new HashSet<String>();
        for (final CidsBean stoffBean : grundwassermessstelleDiagrammAxisPanel2.getStoffBeans()) {
            final String einheit = (String)stoffBean.getProperty("einheit");
            if (einheit != null) {
                einheitenLeft.add(einheit);
            }
        }

        final JFreeChart chart = ChartFactory.createScatterPlot(
                "Messwerte",
                "Datum",
                String.join(", ", einheitenLeft),
                dataSetLeft,
                PlotOrientation.VERTICAL,
                true,
                false,
                false);

        final DateAxis dateAxis = new DateAxis("Mess-Datum");
        dateAxis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);
        dateAxis.setDateFormatOverride(new SimpleDateFormat("dd.MM.yyy"));
        dateAxis.setVerticalTickLabels(true);

        final XYPlot plot = chart.getXYPlot();
        plot.setRangeAxisLocation(AxisLocation.TOP_OR_LEFT);
        plot.getRangeAxis().setLabelAngle(Math.toRadians(0));
        plot.setDomainAxis(dateAxis);

        final Set<String> einheitenRight = new HashSet<String>();
        for (final CidsBean stoffBean : grundwassermessstelleDiagrammAxisPanel3.getStoffBeans()) {
            final String einheit = (String)stoffBean.getProperty("einheit");
            if (einheit != null) {
                einheitenRight.add(einheit);
            }
        }
        if (dataSetRight != null) {
            final NumberAxis numberAxis = new NumberAxis(String.join(", ", einheitenRight));
            numberAxis.setLabelAngle(Math.toRadians(180));
            plot.setRangeAxis(1, numberAxis);            
            plot.setDataset(1, dataSetRight);
            plot.mapDatasetToRangeAxis(1, 1);
        }

        // create two legends and put them into a composite title
// final XYItemRenderer rendererLeft = plot.getRendererForDataset(dataSetLeft);
// XYItemRenderer rendererMiddle = plot.getRendererForDataset(dataSetMiddle);
// final XYItemRenderer rendererRight = plot.getRendererForDataset(dataSetRight);
// final LegendTitle legend1 = new LegendTitle(rendererLeft);
// final LegendTitle legend2 = new LegendTitle(rendererRight);
// final BlockContainer container = new BlockContainer(new BorderArrangement());
// container.add(legend1, RectangleEdge.LEFT);
// container.add(legend2, RectangleEdge.RIGHT);
// container.add(new EmptyBlock(2000, 0));
// final CompositeTitle legends = new CompositeTitle(container);
// legends.setPosition(RectangleEdge.BOTTOM);
// chart.addSubtitle(legends);

        return chart;
    }

    @Override
    public ConnectionContext getConnectionContext() {
        return connectionContext;
    }
}
