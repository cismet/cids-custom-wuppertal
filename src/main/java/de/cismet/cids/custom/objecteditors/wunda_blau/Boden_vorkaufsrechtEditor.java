/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cismet.cids.custom.objecteditors.wunda_blau;

import Sirius.navigator.ui.RequestsFullSizeComponent;
import de.cismet.cids.client.tools.DevelopmentTools;

import de.cismet.cids.custom.objectrenderer.utils.ObjectRendererUtils;

import de.cismet.cids.dynamics.CidsBean;
import de.cismet.cids.dynamics.DisposableCidsBeanStore;
import de.cismet.cids.editors.EditorClosedEvent;
import de.cismet.cids.editors.EditorSaveListener;
import de.cismet.tools.gui.StaticSwingTools;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import org.apache.log4j.Logger;

/**
 *
 * @author verkenis
 */
public class Boden_vorkaufsrechtEditor extends de.cismet.tools.gui.RoundedPanel implements DisposableCidsBeanStore,
    EditorSaveListener,RequestsFullSizeComponent
    {
    
    private static final Logger LOG = Logger.getLogger(Boden_vorkaufsrechtEditor.class);
    private CidsBean cidsBean;
    private final boolean editable;
    private final FlurstueckSelectionDialoge fsDialoge;

    /**
     * Creates new form BodenVorkaufsrechtEditor
     */
    public Boden_vorkaufsrechtEditor() {
        this(true);
    }
    
    /**
     * Creates new form BodenVorkaufsrechtEditor
     */
    public Boden_vorkaufsrechtEditor(final boolean editable) {
        this.editable = editable;
        this.initComponents();
        fsDialoge = new FlurstueckSelectionDialoge();
        fsDialoge.pack();
        fsDialoge.setLocationRelativeTo(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panEditor = new de.cismet.cids.custom.objecteditors.wunda_blau.Boden_VorkaufsrechtEditorPanel(editable);

        setAlpha(0);
        setMaximumSize(new java.awt.Dimension(50000, 420));
        setMinimumSize(new java.awt.Dimension(515, 420));
        setPreferredSize(new java.awt.Dimension(575, 420));

        panEditor.setMaximumSize(new java.awt.Dimension(5000, 500));
        panEditor.setMinimumSize(new java.awt.Dimension(515, 500));
        panEditor.setPreferredSize(new java.awt.Dimension(515, 500));
        add(panEditor, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private de.cismet.cids.custom.objecteditors.wunda_blau.Boden_VorkaufsrechtEditorPanel panEditor;
    // End of variables declaration//GEN-END:variables

    @Override
    public CidsBean getCidsBean() {
        return cidsBean;
    }

    @Override
    public void setCidsBean(CidsBean cidsBean) {
       
        if (cidsBean != null) {
            this.cidsBean = cidsBean;
            this.initComponents();
//            cidsBean.getMetaObject().getDebugString();
            this.panEditor.setCidsBean(cidsBean);
        }
   
    }

    @Override
    public void dispose() {
        panEditor.dispose();
    }

    @Override
    public void editorClosed(EditorClosedEvent ece) {
        
    }

    @Override
    public boolean prepareForSave() {
        
    try {
            final ArrayList<String> errors = new ArrayList<String>();
            final String aktenzeichen = (String)cidsBean.getProperty("name");
            
            if ((aktenzeichen == null) || aktenzeichen.trim().equals("")) {
                errors.add("Aktenzeichen muss eingegeben werden!\n");
            }
            if ((cidsBean.getProperty("eingang_anfrage") == null) ) {
                errors.add("Das Feld Antragsdatum muss ausgefÃ¼llt sein!\n");
            }

            if (errors.size() > 0) {
                String errorOutput = "";
                for (final String s : errors) {
                    errorOutput += s + "\n";
                }
                errorOutput = errorOutput.substring(0, errorOutput.length() - 1);
                JOptionPane.showMessageDialog(
                    StaticSwingTools.getParentFrame(this),
                    errorOutput,
                    "Fehler aufgetreten",
                    JOptionPane.WARNING_MESSAGE);
                return false;
            } 
            
            return true;
            
        } catch (Exception ex) {
            ObjectRendererUtils.showExceptionWindowToUser("Fehler beim Speichern", ex, this);
            throw new RuntimeException(ex);
        }    
        
    }  
    
    /**
     * DOCUMENT ME!
     *
     * @param   args  DOCUMENT ME!
     *
     * @throws  Exception  DOCUMENT ME!
     */
    public static void main(final String[] args) throws Exception {
        DevelopmentTools.createEditorInFrameFromRMIConnectionOnLocalhost(
            "WUNDA_BLAU",
            "Administratoren",
            "admin",
            "krissenich",
            "BODEN_VORKAUFSRECHT",
            20,
            1000,
            800);
    }

}
