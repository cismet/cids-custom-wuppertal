/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cismet.cids.custom.objecteditors.wunda_blau;



import Sirius.navigator.connection.SessionManager;
import Sirius.navigator.exception.ConnectionException;
import Sirius.server.middleware.types.MetaClass;
import Sirius.server.middleware.types.MetaObject;
import javax.swing.*;

import org.apache.log4j.Logger;

import org.openide.util.NbBundle;

import de.cismet.cids.dynamics.CidsBean;
import de.cismet.cids.editors.BindingGroupStore;
import de.cismet.cids.editors.DefaultBindableReferenceCombo;
import de.cismet.cids.editors.DefaultCustomObjectEditor;
import de.cismet.cids.editors.EditorClosedEvent;
import de.cismet.cids.editors.EditorSaveListener;
import de.cismet.cids.editors.FastBindableReferenceCombo;
import de.cismet.cids.navigator.utils.ClassCacheMultiple;
import de.cismet.cids.tools.metaobjectrenderer.CidsBeanRenderer;

import de.cismet.cismap.cids.geometryeditor.DefaultCismapGeometryComboBoxEditor;

import de.cismet.tools.gui.StaticSwingTools;
import java.text.Collator;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Collections;

import java.util.Date;
import java.util.List;
import java.util.Locale;
import org.jdesktop.beansbinding.BindingGroup;
import org.openide.util.Exceptions;

/**
 *
 * @author sandra
 */
//public class StrAdrGeplanteAdresseEditor extends DefaultCustomObjectEditor implements CidsBeanRenderer,EditorSaveListener {
public class StrAdrGeplanteAdresseEditor extends DefaultCustomObjectEditor implements CidsBeanRenderer,EditorSaveListener, BindingGroupStore {
    private CidsBean cidsBean=null;
    private boolean isEditor = true;
    private static final Logger LOG = Logger.getLogger(StrAdrGeplanteAdresseEditor.class);
    //private Object newId = null;
    
    protected Object hausnr;
    /**
     * Creates new form
     */
    public StrAdrGeplanteAdresseEditor() {
        initComponents();
        ((DefaultCismapGeometryComboBoxEditor)cbGeom).setLocalRenderFeatureString("georeferenz");
    }
    
    public StrAdrGeplanteAdresseEditor(boolean boolEditor) {
        this.isEditor = boolEditor;
        initComponents();
        nichtEditieren();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        panFillerRechts = new javax.swing.JPanel();
        panFillerUnten = new javax.swing.JPanel();
        panHaupt = new javax.swing.JPanel();
        panAdresse = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtAdr_zusatz = new javax.swing.JTextField();
        cbStrassenname = new FastBindableReferenceCombo(
            "select s.id, s.name, s.strasse, s.name || ' (' || s.strasse || ')' as anzeige from str_adr_strasse s where s.strasse::int < 4000 order by s.name",
            "%1$2s",
            new String [] {"anzeige","strasse"}) ;
        ftxHausnr = new javax.swing.JFormattedTextField();
        lblSchluessel = new javax.swing.JLabel();
        panGeometrie = new javax.swing.JPanel();
        if (isEditor){
            jLabel3 = new javax.swing.JLabel();
        }
        if (isEditor){
            cbGeom = new DefaultCismapGeometryComboBoxEditor();
        }
        rpKarte = new de.cismet.tools.gui.RoundedPanel();
        semiRoundedPanel7 = new de.cismet.tools.gui.SemiRoundedPanel();
        jLabel17 = new javax.swing.JLabel();
        panPreviewMap = new de.cismet.cids.custom.objectrenderer.utils.DefaultPreviewMapPanel();
        panDatum = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        dcGeplant = new de.cismet.cids.editors.DefaultBindableDateChooser();
        dcBauantrag = new de.cismet.cids.editors.DefaultBindableDateChooser();
        dcVorhanden = new de.cismet.cids.editors.DefaultBindableDateChooser();
        dcHistorisch = new de.cismet.cids.editors.DefaultBindableDateChooser();
        panGrund = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        cbGrund = new DefaultBindableReferenceCombo(true) ;
        jLabel2 = new javax.swing.JLabel();
        panFillerRechtsDatum = new javax.swing.JPanel();
        panFillerUntenDatum = new javax.swing.JPanel();
        dcAlkis = new de.cismet.cids.editors.DefaultBindableDateChooser();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        cbVorhaben = new DefaultBindableReferenceCombo(false) ;
        cbAntragsteller = new DefaultBindableReferenceCombo(false) ;
        txtBemerkung = new javax.swing.JTextField();
        panFillerRechtsHaupt = new javax.swing.JPanel();
        panFillerUntenHaupt = new javax.swing.JPanel();

        setMinimumSize(new java.awt.Dimension(630, 700));
        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(630, 700));
        setLayout(new java.awt.GridBagLayout());

        panFillerRechts.setName(""); // NOI18N
        panFillerRechts.setOpaque(false);

        javax.swing.GroupLayout panFillerRechtsLayout = new javax.swing.GroupLayout(panFillerRechts);
        panFillerRechts.setLayout(panFillerRechtsLayout);
        panFillerRechtsLayout.setHorizontalGroup(
            panFillerRechtsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panFillerRechtsLayout.setVerticalGroup(
            panFillerRechtsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        add(panFillerRechts, gridBagConstraints);

        panFillerUnten.setName(""); // NOI18N
        panFillerUnten.setOpaque(false);

        javax.swing.GroupLayout panFillerUntenLayout = new javax.swing.GroupLayout(panFillerUnten);
        panFillerUnten.setLayout(panFillerUntenLayout);
        panFillerUntenLayout.setHorizontalGroup(
            panFillerUntenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panFillerUntenLayout.setVerticalGroup(
            panFillerUntenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 1.0;
        add(panFillerUnten, gridBagConstraints);

        panHaupt.setMinimumSize(new java.awt.Dimension(630, 700));
        panHaupt.setOpaque(false);
        panHaupt.setPreferredSize(new java.awt.Dimension(630, 700));
        panHaupt.setLayout(new java.awt.GridBagLayout());

        panAdresse.setMinimumSize(new java.awt.Dimension(617, 30));
        panAdresse.setOpaque(false);
        panAdresse.setPreferredSize(new java.awt.Dimension(617, 100));
        panAdresse.setLayout(new java.awt.GridBagLayout());

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setText(org.openide.util.NbBundle.getMessage(StrAdrGeplanteAdresseEditor.class, "StrAdrGeplanteAdresseEditor.jLabel12.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 15, 2, 2);
        panAdresse.add(jLabel12, gridBagConstraints);

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setText(org.openide.util.NbBundle.getMessage(StrAdrGeplanteAdresseEditor.class, "StrAdrGeplanteAdresseEditor.jLabel13.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 2, 2);
        panAdresse.add(jLabel13, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText(org.openide.util.NbBundle.getMessage(StrAdrGeplanteAdresseEditor.class, "StrAdrGeplanteAdresseEditor.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        panAdresse.add(jLabel1, gridBagConstraints);

        txtAdr_zusatz.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtAdr_zusatz.setMinimumSize(new java.awt.Dimension(50, 19));
        txtAdr_zusatz.setPreferredSize(new java.awt.Dimension(22, 19));

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${cidsBean.adr_zusatz}"), txtAdr_zusatz, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        txtAdr_zusatz.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAdr_zusatzFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 0);
        panAdresse.add(txtAdr_zusatz, gridBagConstraints);

        //((FastBindableReferenceCombo)cbStrassenname).setLocale(Locale.GERMAN);
        ((FastBindableReferenceCombo)cbStrassenname).setSorted(false);
        cbStrassenname.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        cbStrassenname.setMaximumSize(new java.awt.Dimension(230, 20));
        cbStrassenname.setMinimumSize(new java.awt.Dimension(230, 20));
        cbStrassenname.setPreferredSize(new java.awt.Dimension(250, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${cidsBean.fk_strasse_id}"), cbStrassenname, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        cbStrassenname.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cbStrassennameMouseClicked(evt);
            }
        });
        cbStrassenname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbStrassennameActionPerformed(evt);
            }
        });
        cbStrassenname.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                cbStrassennamePropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 2);
        panAdresse.add(cbStrassenname, gridBagConstraints);

        ftxHausnr.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###"))));
        ftxHausnr.setMinimumSize(new java.awt.Dimension(50, 19));
        ftxHausnr.setPreferredSize(new java.awt.Dimension(42, 19));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${cidsBean.hausnr}"), ftxHausnr, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 2);
        panAdresse.add(ftxHausnr, gridBagConstraints);

        lblSchluessel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSchluessel.setText("     ");
        lblSchluessel.setToolTipText("");
        lblSchluessel.setMaximumSize(new java.awt.Dimension(60, 15));
        lblSchluessel.setMinimumSize(new java.awt.Dimension(60, 15));
        lblSchluessel.setName(""); // NOI18N
        lblSchluessel.setPreferredSize(new java.awt.Dimension(60, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(7, 4, 6, 4);
        panAdresse.add(lblSchluessel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panHaupt.add(panAdresse, gridBagConstraints);

        panGeometrie.setMinimumSize(new java.awt.Dimension(617, 454));
        panGeometrie.setOpaque(false);
        panGeometrie.setPreferredSize(new java.awt.Dimension(201, 454));
        panGeometrie.setLayout(new java.awt.GridBagLayout());

        if (isEditor){
            jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        }
        if (isEditor){
            jLabel3.setText(org.openide.util.NbBundle.getMessage(StrAdrGeplanteAdresseEditor.class, "StrAdrGeplanteAdresseEditor.jLabel3.text")); // NOI18N
        }
        if (isEditor){
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
            panGeometrie.add(jLabel3, gridBagConstraints);
        }

        if (isEditor){
            if (isEditor){
                cbGeom.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
            }
            if (isEditor){
                cbGeom.setMinimumSize(new java.awt.Dimension(221, 24));
            }
            if (isEditor){
                cbGeom.setPreferredSize(new java.awt.Dimension(251, 22));
            }

            binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${cidsBean.georeferenz}"), cbGeom, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
            binding.setConverter(((DefaultCismapGeometryComboBoxEditor)cbGeom).getConverter());
            bindingGroup.addBinding(binding);

        }
        if (isEditor){
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.gridheight = 2;
            gridBagConstraints.ipadx = -1;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
            gridBagConstraints.insets = new java.awt.Insets(2, 72, 0, 0);
            panGeometrie.add(cbGeom, gridBagConstraints);
        }

        rpKarte.setMinimumSize(new java.awt.Dimension(500, 300));
        rpKarte.setName(""); // NOI18N
        rpKarte.setPreferredSize(new java.awt.Dimension(500, 300));
        rpKarte.setLayout(new java.awt.GridBagLayout());

        semiRoundedPanel7.setBackground(java.awt.Color.darkGray);
        semiRoundedPanel7.setLayout(new java.awt.GridBagLayout());

        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("Lage");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        semiRoundedPanel7.add(jLabel17, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        rpKarte.add(semiRoundedPanel7, gridBagConstraints);

        panPreviewMap.setMinimumSize(new java.awt.Dimension(100, 100));
        panPreviewMap.setPreferredSize(new java.awt.Dimension(100, 100));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 5);
        rpKarte.add(panPreviewMap, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 5, 0);
        panGeometrie.add(rpKarte, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panHaupt.add(panGeometrie, gridBagConstraints);

        panDatum.setMinimumSize(new java.awt.Dimension(618, 145));
        panDatum.setName(""); // NOI18N
        panDatum.setOpaque(false);
        panDatum.setPreferredSize(new java.awt.Dimension(681, 225));
        panDatum.setLayout(new java.awt.GridBagLayout());

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText(org.openide.util.NbBundle.getMessage(StrAdrGeplanteAdresseEditor.class, "StrAdrGeplanteAdresseEditor.jLabel4.text")); // NOI18N
        jLabel4.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 0, 5);
        panDatum.add(jLabel4, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText(org.openide.util.NbBundle.getMessage(StrAdrGeplanteAdresseEditor.class, "StrAdrGeplanteAdresseEditor.jLabel5.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        panDatum.add(jLabel5, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText(org.openide.util.NbBundle.getMessage(StrAdrGeplanteAdresseEditor.class, "StrAdrGeplanteAdresseEditor.jLabel6.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        panDatum.add(jLabel6, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText(org.openide.util.NbBundle.getMessage(StrAdrGeplanteAdresseEditor.class, "StrAdrGeplanteAdresseEditor.jLabel7.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        panDatum.add(jLabel7, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText(org.openide.util.NbBundle.getMessage(StrAdrGeplanteAdresseEditor.class, "StrAdrGeplanteAdresseEditor.jLabel8.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        panDatum.add(jLabel8, gridBagConstraints);

        dcGeplant.setMaximumSize(new java.awt.Dimension(113, 25));
        dcGeplant.setMinimumSize(new java.awt.Dimension(113, 25));
        dcGeplant.setPreferredSize(new java.awt.Dimension(120, 22));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${cidsBean.dat_geplant}"), dcGeplant, org.jdesktop.beansbinding.BeanProperty.create("date"));
        binding.setConverter(dcGeplant.getConverter());
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 2);
        panDatum.add(dcGeplant, gridBagConstraints);

        dcBauantrag.setMaximumSize(new java.awt.Dimension(113, 25));
        dcBauantrag.setMinimumSize(new java.awt.Dimension(113, 25));
        dcBauantrag.setPreferredSize(new java.awt.Dimension(120, 22));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${cidsBean.dat_bauantrag}"), dcBauantrag, org.jdesktop.beansbinding.BeanProperty.create("date"));
        binding.setConverter(dcBauantrag.getConverter());
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 2);
        panDatum.add(dcBauantrag, gridBagConstraints);

        dcVorhanden.setMaximumSize(new java.awt.Dimension(113, 25));
        dcVorhanden.setMinimumSize(new java.awt.Dimension(113, 25));
        dcVorhanden.setPreferredSize(new java.awt.Dimension(120, 22));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${cidsBean.dat_vorhanden}"), dcVorhanden, org.jdesktop.beansbinding.BeanProperty.create("date"));
        binding.setConverter(dcVorhanden.getConverter());
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 2);
        panDatum.add(dcVorhanden, gridBagConstraints);

        dcHistorisch.setMaximumSize(new java.awt.Dimension(113, 25));
        dcHistorisch.setMinimumSize(new java.awt.Dimension(113, 25));
        dcHistorisch.setName(""); // NOI18N
        dcHistorisch.setPreferredSize(new java.awt.Dimension(120, 22));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${cidsBean.dat_historisch}"), dcHistorisch, org.jdesktop.beansbinding.BeanProperty.create("date"));
        binding.setConverter(dcHistorisch.getConverter());
        bindingGroup.addBinding(binding);

        dcHistorisch.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dcHistorischPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 2);
        panDatum.add(dcHistorisch, gridBagConstraints);

        panGrund.setMinimumSize(new java.awt.Dimension(300, 30));
        panGrund.setName(""); // NOI18N
        panGrund.setOpaque(false);
        panGrund.setPreferredSize(new java.awt.Dimension(310, 30));
        panGrund.setLayout(new java.awt.GridBagLayout());

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel14.setText(org.openide.util.NbBundle.getMessage(StrAdrGeplanteAdresseEditor.class, "StrAdrGeplanteAdresseEditor.jLabel14.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 2);
        panGrund.add(jLabel14, gridBagConstraints);

        cbGrund.setMaximumSize(new java.awt.Dimension(130, 20));
        cbGrund.setMinimumSize(new java.awt.Dimension(130, 20));
        cbGrund.setPreferredSize(new java.awt.Dimension(130, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${cidsBean.grund}"), cbGrund, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        cbGrund.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbGrundItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 25, 5, 4);
        panGrund.add(cbGrund, gridBagConstraints);
        cbGrund.getAccessibleContext().setAccessibleName("");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        panDatum.add(panGrund, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel2.setText(org.openide.util.NbBundle.getMessage(StrAdrGeplanteAdresseEditor.class, "StrAdrGeplanteAdresseEditor.jLabel2.text")); // NOI18N
        jLabel2.setPreferredSize(new java.awt.Dimension(200, 15));
        jLabel2.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 13, 5, 0);
        panDatum.add(jLabel2, gridBagConstraints);

        panFillerRechtsDatum.setName(""); // NOI18N
        panFillerRechtsDatum.setOpaque(false);

        javax.swing.GroupLayout panFillerRechtsDatumLayout = new javax.swing.GroupLayout(panFillerRechtsDatum);
        panFillerRechtsDatum.setLayout(panFillerRechtsDatumLayout);
        panFillerRechtsDatumLayout.setHorizontalGroup(
            panFillerRechtsDatumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panFillerRechtsDatumLayout.setVerticalGroup(
            panFillerRechtsDatumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        panDatum.add(panFillerRechtsDatum, gridBagConstraints);

        panFillerUntenDatum.setName(""); // NOI18N
        panFillerUntenDatum.setOpaque(false);

        javax.swing.GroupLayout panFillerUntenDatumLayout = new javax.swing.GroupLayout(panFillerUntenDatum);
        panFillerUntenDatum.setLayout(panFillerUntenDatumLayout);
        panFillerUntenDatumLayout.setHorizontalGroup(
            panFillerUntenDatumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panFillerUntenDatumLayout.setVerticalGroup(
            panFillerUntenDatumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 1.0;
        panDatum.add(panFillerUntenDatum, gridBagConstraints);

        dcAlkis.setEnabled(false);
        dcAlkis.setMaximumSize(new java.awt.Dimension(113, 25));
        dcAlkis.setMinimumSize(new java.awt.Dimension(113, 25));
        dcAlkis.setName(""); // NOI18N
        dcAlkis.setPreferredSize(new java.awt.Dimension(120, 22));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${cidsBean.dat_alkis}"), dcAlkis, org.jdesktop.beansbinding.BeanProperty.create("date"));
        bindingGroup.addBinding(binding);

        dcAlkis.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dcAlkisPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 2);
        panDatum.add(dcAlkis, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        panHaupt.add(panDatum, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText(org.openide.util.NbBundle.getMessage(StrAdrGeplanteAdresseEditor.class, "StrAdrGeplanteAdresseEditor.jLabel9.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panHaupt.add(jLabel9, gridBagConstraints);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText(org.openide.util.NbBundle.getMessage(StrAdrGeplanteAdresseEditor.class, "StrAdrGeplanteAdresseEditor.jLabel10.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panHaupt.add(jLabel10, gridBagConstraints);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText(org.openide.util.NbBundle.getMessage(StrAdrGeplanteAdresseEditor.class, "StrAdrGeplanteAdresseEditor.jLabel11.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panHaupt.add(jLabel11, gridBagConstraints);

        cbVorhaben.setMaximumSize(new java.awt.Dimension(171, 20));
        cbVorhaben.setMinimumSize(new java.awt.Dimension(178, 20));
        cbVorhaben.setPreferredSize(new java.awt.Dimension(180, 20));
        cbVorhaben.setSelectedIndex(0);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${cidsBean.vorhaben}"), cbVorhaben, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 57, 2, 2);
        panHaupt.add(cbVorhaben, gridBagConstraints);

        cbAntragsteller.setMaximumSize(new java.awt.Dimension(171, 20));
        cbAntragsteller.setMinimumSize(new java.awt.Dimension(178, 20));
        cbAntragsteller.setPreferredSize(new java.awt.Dimension(178, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${cidsBean.antrag}"), cbAntragsteller, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 57, 2, 2);
        panHaupt.add(cbAntragsteller, gridBagConstraints);

        txtBemerkung.setMinimumSize(new java.awt.Dimension(40, 19));
        txtBemerkung.setName(""); // NOI18N
        txtBemerkung.setPreferredSize(new java.awt.Dimension(200, 19));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${cidsBean.bemerkung}"), txtBemerkung, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        txtBemerkung.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtBemerkungPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 57, 2, 2);
        panHaupt.add(txtBemerkung, gridBagConstraints);

        panFillerRechtsHaupt.setName(""); // NOI18N
        panFillerRechtsHaupt.setOpaque(false);

        javax.swing.GroupLayout panFillerRechtsHauptLayout = new javax.swing.GroupLayout(panFillerRechtsHaupt);
        panFillerRechtsHaupt.setLayout(panFillerRechtsHauptLayout);
        panFillerRechtsHauptLayout.setHorizontalGroup(
            panFillerRechtsHauptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panFillerRechtsHauptLayout.setVerticalGroup(
            panFillerRechtsHauptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        panHaupt.add(panFillerRechtsHaupt, gridBagConstraints);

        panFillerUntenHaupt.setName(""); // NOI18N
        panFillerUntenHaupt.setOpaque(false);

        javax.swing.GroupLayout panFillerUntenHauptLayout = new javax.swing.GroupLayout(panFillerUntenHaupt);
        panFillerUntenHaupt.setLayout(panFillerUntenHauptLayout);
        panFillerUntenHauptLayout.setHorizontalGroup(
            panFillerUntenHauptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panFillerUntenHauptLayout.setVerticalGroup(
            panFillerUntenHauptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 1.0;
        panHaupt.add(panFillerUntenHaupt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(panHaupt, gridBagConstraints);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void dcAlkisPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dcAlkisPropertyChange
        // TODO add your handling code here:
        alkisDatumIsSet();
    }//GEN-LAST:event_dcAlkisPropertyChange

    private void txtAdr_zusatzFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAdr_zusatzFocusLost
        String zusatz =  txtAdr_zusatz.getText().trim();
        zusatz = "   " + zusatz;
        txtAdr_zusatz.setText(zusatz);//Drei Leerzeichen + Buchstabe
    }//GEN-LAST:event_txtAdr_zusatzFocusLost

    private void cbStrassennameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbStrassennameActionPerformed
        // TODO add your handling code here:
        setAdresseFest();
        if (cbStrassenname.getSelectedItem() != null){
            lblSchluessel.setText(String.valueOf(getOtherTableValue("str_adr_strasse",getMyWhere(cbStrassenname.getSelectedItem().toString())).getProperty("strasse")));
        }
    }//GEN-LAST:event_cbStrassennameActionPerformed

    private void dcHistorischPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dcHistorischPropertyChange
        // TODO add your handling code here:
        histDatumIsSet();
    }//GEN-LAST:event_dcHistorischPropertyChange

    private void cbStrassennamePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_cbStrassennamePropertyChange
        // TODO add your handling code here:
        if (cbStrassenname.getSelectedItem() != null){
            lblSchluessel.setText(String.valueOf(getOtherTableValue("str_adr_strasse",getMyWhere(cbStrassenname.getSelectedItem().toString())).getProperty("strasse"))); 
        }
    }//GEN-LAST:event_cbStrassennamePropertyChange

    private void txtBemerkungPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtBemerkungPropertyChange
        // TODO add your handling code here:
        pruefeEditieren();
    }//GEN-LAST:event_txtBemerkungPropertyChange

    private void cbStrassennameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbStrassennameMouseClicked
        // TODO add your handling code here:
        final List<CidsBean> cblStrassen = this.getCidsBean().getBeanCollectionProperty("fk_strasse_id");
        final Collator umlautCollator = Collator.getInstance(Locale.GERMAN);
        umlautCollator.setStrength(Collator.SECONDARY);
        Collections.sort(cblStrassen, umlautCollator);
        cbStrassenname.setModel(new DefaultComboBoxModel(cblStrassen.toArray()));
    }//GEN-LAST:event_cbStrassennameMouseClicked

    private void cbGrundItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbGrundItemStateChanged
        // TODO add your handling code here:
        grundIsSet();
    }//GEN-LAST:event_cbGrundItemStateChanged
    private void pruefeEditieren(){
        try{
            CidsBean myCB= this.getCidsBean();
            if (myCB.getProperty("kein_edit") != null){ 
                String sEdit = myCB.getProperty("kein_edit").toString();
                if (sEdit == "true"){
                    nichtEditieren();
                }
            }
        }catch (Exception e) {
                LOG.warn("Could not determine cidsBeans id. ", e);
        }
    }
    
    private void alkisDatumIsSet(){
        Date myDate = dcAlkis.getDate();
        if (myDate != null){
           nichtEditieren();
        }
    }
    
     private void nichtEditieren(){
        cbStrassenname.setEnabled(false);
        ftxHausnr.setEnabled(false);
        txtAdr_zusatz.setEnabled(false);
        dcGeplant.setEnabled(false);
        dcBauantrag.setEnabled(false);
        dcVorhanden.setEnabled(false);
        dcHistorisch.setEnabled(false);
        cbGrund.setEnabled(false);
        cbVorhaben.setEnabled(false);
        cbAntragsteller.setEnabled(false);
        //Geom nur im Editor
        if (this.isEditor){
                cbGeom.setEnabled(false);
        } else {
            //Bemerkung darf im Editor immer geändert werden im Renderer nicht.
            txtBemerkung.setEnabled(false);
        }
    }
     
    private void grundIsSet(){
        Date myDate = dcHistorisch.getDate();
        Integer iGrund = cbGrund.getSelectedIndex();
        if (myDate != null){
            if (iGrund != -1){
                nichtEditieren();
            }
        }
    } 
    
    private void histDatumIsSet(){
        Date myDate = dcHistorisch.getDate();
        if (myDate != null){
            Integer iGrund = cbGrund.getSelectedIndex();
            if (iGrund != -1){
                nichtEditieren();
            }else{
                dcGeplant.setEnabled(false);
                dcBauantrag.setEnabled(false);
                dcVorhanden.setEnabled(false);
                //Geom existiert nur bei Editor
                if (this.isEditor){
                    cbGeom.setEnabled(false);
                }
            }
        }else{
            Date alkisDate = dcAlkis.getDate();
            try{
                boolean booledit = true;
                CidsBean myCB= this.getCidsBean();
                if (myCB.getProperty("kein_edit") != null){
                    String sEdit = myCB.getProperty("kein_edit").toString();
                    if (sEdit == "true"){
                        booledit = false;
                    }
                }
                //&es muss ein Editor sein
                if (booledit && this.isEditor ){   
                    if (alkisDate == null){
                        dcGeplant.setEnabled(true);
                        dcBauantrag.setEnabled(true);
                        dcVorhanden.setEnabled(true);
                        cbGeom.setEnabled(true);
                    }
                }
            }catch (Exception e) {
               // LOG.warn("Could not determine cidsBeans id. ", e);
            }
           
        }
    }  
        
    private void setAdresseFest(){
        CidsBean myCidsBean = this.getCidsBean();
        try {
            if (myCidsBean != null) {
                if (myCidsBean.getMetaObject().getStatus() != MetaObject.NEW){
                   cbStrassenname.setEnabled(false);
                   ftxHausnr.setEnabled(false);
                   txtAdr_zusatz.setEnabled(false);
                   //cbGeom.setEnabled(false);
                }
            }
         } catch (Exception e) {
                LOG.warn("Could not determine cidsBeans in setAdresseFest. ", e);
            }
    }
     
    private CidsBean getOtherTableValue(String myTable, String myWhere){
        try {
            final MetaClass myClass = ClassCacheMultiple.getMetaClass(
                    "WUNDA_BLAU",
                    myTable);
            if (myClass != null) {
                final StringBuffer myQuery = new StringBuffer("select ").append(myClass.getId())
                            .append(", ")
                            .append(myClass.getPrimaryKey())
                            .append(" from ")
                            .append(myClass.getTableName())
                            .append(myWhere);
                if (LOG.isDebugEnabled()) {
                    LOG.debug("SQL: myQuery:" + myQuery.toString());
                }
                final MetaObject[] myMetaObject;
                try {
                    myMetaObject = SessionManager.getProxy().getMetaObjectByQuery(myQuery.toString(), 0);
                    if (myMetaObject.length > 0) {
                       return myMetaObject[0].getBean();
                    }
                } catch (ConnectionException ex) {
                    LOG.error(ex, ex);
                }
            }
        } catch (Exception ex) {
            LOG.error(myWhere +" kann nicht geladen werden in getOtherTableValue.", ex);
        }
        return null;
    }
    
    private String getMyWhere(String myWhere){
        return " where name ilike '" + myWhere + "'";
    }
            
    @Override
    public boolean prepareForSave(){
        //return checkHausnummer();
        final StringBuilder errorMessage = new StringBuilder();
     
        //Hausnummer
        if ((ftxHausnr.getText() == null) || ftxHausnr.getText().trim().isEmpty()) {
            LOG.warn("No 'hausnr' specified. Skip persisting.");
            errorMessage.append(NbBundle.getMessage(
                    StrAdrGeplanteAdresseEditor.class,
                    "StrAdrGeplanteAdresseEditor.prepareForSave().noHausnr"));
        } else if (ftxHausnr.getText().length() > 3) {
            LOG.warn("Property 'hausnr' is too long. Skip persisting.");
            errorMessage.append(NbBundle.getMessage(
                    StrAdrGeplanteAdresseEditor.class,
                    "StrAdrGeplanteAdresseEditor.prepareForSave().tooLongHausnr"));
        }  
        
        //Zusatz
        if ((txtAdr_zusatz.getText() == null) || txtAdr_zusatz.getText().trim().isEmpty()) {
            txtAdr_zusatz.setText("    ");//Vier Leerzeichen
        }else if (txtAdr_zusatz.getText().trim().matches("[a-z]") && txtAdr_zusatz.getText().trim().length()== 1 ){
            String zusatz =  txtAdr_zusatz.getText().trim();
            zusatz = "   " + zusatz;
            txtAdr_zusatz.setText(zusatz);//Drei Leerzeichen + Buchstabe
        }else{
            LOG.warn("No 'zusatz' specified. Skip persisting.");
            errorMessage.append(NbBundle.getMessage(
                    StrAdrGeplanteAdresseEditor.class,
                    "StrAdrGeplanteAdresseEditor.prepareForSave().wrongZusatz"));
        }
        
        
        //Vorhaben
        if ((cbVorhaben.getSelectedIndex()== -1) ) {
            LOG.warn("No 'vorhaben' specified. Skip persisting.");
            errorMessage.append(NbBundle.getMessage(
                    StrAdrGeplanteAdresseEditor.class,
                    "StrAdrGeplanteAdresseEditor.prepareForSave().noVorhaben"));
        }
        
        //Antrag
        if ((cbAntragsteller.getSelectedIndex()== -1) ) {
            LOG.warn("No 'antrag' specified. Skip persisting.");
            errorMessage.append(NbBundle.getMessage(
                    StrAdrGeplanteAdresseEditor.class,
                    "StrAdrGeplanteAdresseEditor.prepareForSave().noAntrag"));
        }
        
        //Strasse
        if (cbStrassenname.getSelectedItem() == null ) {
            LOG.warn("No 'strasse' specified. Skip persisting.");
            errorMessage.append(NbBundle.getMessage(
                    StrAdrGeplanteAdresseEditor.class,
                    "StrAdrGeplanteAdresseEditor.prepareForSave().noStrasse"));
        }
        
        //geom
        if ((cbGeom.getSelectedItem() == null) || cbGeom.getSelectedItem().toString().trim().isEmpty()) {
            LOG.warn("No 'geom' specified. Skip persisting.");
            errorMessage.append(NbBundle.getMessage(
                    StrAdrGeplanteAdresseEditor.class,
                    "StrAdrGeplanteAdresseEditor.prepareForSave().noGeom"));
        }
        
        //date range
        LocalDate fruehDatum = LocalDate.of(1999,1,1);
        LocalDate jetztDatum = LocalDate.now();
        LocalDate spaetDatum = jetztDatum.plusDays(100);
        Date dt;
        LocalDate ld;
        //geplant
        if (dcGeplant.getDate() != null){
            dt = dcGeplant.getDate();
            ld = dt.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            if(ld.isBefore(fruehDatum)){
                LOG.warn("Wrong 'geplant date' specified. Skip persisting.");
                    errorMessage.append(NbBundle.getMessage(
                        StrAdrGeplanteAdresseEditor.class,
                        "StrAdrGeplanteAdresseEditor.prepareForSave().datFalschGeplantFrueh"));
            }
            if(ld.isAfter(spaetDatum)){
                LOG.warn("Wrong 'geplant date' specified. Skip persisting.");
                    errorMessage.append(NbBundle.getMessage(
                        StrAdrGeplanteAdresseEditor.class,
                        "StrAdrGeplanteAdresseEditor.prepareForSave().datFalschGeplantSpaet"));
            }
        }
        //bauantrag
        if (dcBauantrag.getDate() != null){
            dt = dcBauantrag.getDate();
            ld = dt.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            if(ld.isBefore(fruehDatum)){
                LOG.warn("Wrong 'bauantrag date' specified. Skip persisting.");
                    errorMessage.append(NbBundle.getMessage(
                        StrAdrGeplanteAdresseEditor.class,
                        "StrAdrGeplanteAdresseEditor.prepareForSave().datFalschBauantragFrueh"));
            }
            if(ld.isAfter(spaetDatum)){
                LOG.warn("Wrong 'bauantrag date' specified. Skip persisting.");
                    errorMessage.append(NbBundle.getMessage(
                        StrAdrGeplanteAdresseEditor.class,
                        "StrAdrGeplanteAdresseEditor.prepareForSave().datFalschBauantragSpaet"));
            }
        }
        //vorhanden
        if (dcVorhanden.getDate() != null){
            dt = dcVorhanden.getDate();
            ld = dt.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            if(ld.isBefore(fruehDatum)){
                LOG.warn("Wrong 'vorhanden date' specified. Skip persisting.");
                    errorMessage.append(NbBundle.getMessage(
                        StrAdrGeplanteAdresseEditor.class,
                        "StrAdrGeplanteAdresseEditor.prepareForSave().datFalschVorhandenFrueh"));
            }
            if(ld.isAfter(spaetDatum)){
                LOG.warn("Wrong 'vorhanden date' specified. Skip persisting.");
                    errorMessage.append(NbBundle.getMessage(
                        StrAdrGeplanteAdresseEditor.class,
                        "StrAdrGeplanteAdresseEditor.prepareForSave().datFalschVorhandenSpaet"));
            }
        }
        //historisch
        if (dcHistorisch.getDate() != null){
            dt = dcHistorisch.getDate();
            ld = dt.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            if(ld.isBefore(fruehDatum)){
                LOG.warn("Wrong 'historisch date' specified. Skip persisting.");
                    errorMessage.append(NbBundle.getMessage(
                        StrAdrGeplanteAdresseEditor.class,
                        "StrAdrGeplanteAdresseEditor.prepareForSave().datFalschHistorischFrueh"));
            }
            if(ld.isAfter(spaetDatum)){
                LOG.warn("Wrong 'historisch date' specified. Skip persisting.");
                    errorMessage.append(NbBundle.getMessage(
                        StrAdrGeplanteAdresseEditor.class,
                        "StrAdrGeplanteAdresseEditor.prepareForSave().datFalschHistorischSpaet"));
            }
        }
         //date geplant, bauantrag, vorhanden
        if ((dcGeplant.getDate() == null) && dcBauantrag.getDate() == null && dcVorhanden.getDate() == null) {
            LOG.warn("No 'date' specified. Skip persisting.");
            errorMessage.append(NbBundle.getMessage(
                    StrAdrGeplanteAdresseEditor.class,
                    "StrAdrGeplanteAdresseEditor.prepareForSave().noDate"));
        } else { //Datumsangaben in richtiger Reihenfolge
            if ((dcGeplant.getDate() != null) && dcBauantrag.getDate() != null) {
                if (dcGeplant.getDate().after(dcBauantrag.getDate())){
                    LOG.warn("Wrong 'date (geplant-bauantrag)' specified. Skip persisting.");
                    errorMessage.append(NbBundle.getMessage(
                        StrAdrGeplanteAdresseEditor.class,
                        "StrAdrGeplanteAdresseEditor.prepareForSave().datFalschGeplantBauantrag"));
                }
            }
            if ((dcGeplant.getDate() != null) && dcVorhanden.getDate() != null) {
                if (dcGeplant.getDate().after(dcVorhanden.getDate())){
                    LOG.warn("Wrong 'date (geplant-vorhanden)' specified. Skip persisting.");
                    errorMessage.append(NbBundle.getMessage(
                        StrAdrGeplanteAdresseEditor.class,
                        "StrAdrGeplanteAdresseEditor.prepareForSave().datFalschGeplantVorhanden"));
                }
            }
            
            if ((dcBauantrag.getDate() != null) && dcVorhanden.getDate() != null) {
                if (dcBauantrag.getDate().after(dcVorhanden.getDate())){
                    LOG.warn("Wrong 'date (bauantrag-vorhanden)' specified. Skip persisting.");
                    errorMessage.append(NbBundle.getMessage(
                        StrAdrGeplanteAdresseEditor.class,
                        "StrAdrGeplanteAdresseEditor.prepareForSave().datFalschBauantragVorhanden"));
                }
            }
        }
        
         //date historisch
        if (dcHistorisch.getDate() != null) {
            if (dcGeplant.getDate() != null) {
                if (dcHistorisch.getDate().before(dcGeplant.getDate())){
                    LOG.warn("Wrong 'date (geplant-historisch)' specified. Skip persisting.");
                    errorMessage.append(NbBundle.getMessage(
                        StrAdrGeplanteAdresseEditor.class,
                        "StrAdrGeplanteAdresseEditor.prepareForSave().datFalschGeplantHistorisch"));
                }
            }
            if (dcVorhanden.getDate() != null) {
                if (dcHistorisch.getDate().before(dcVorhanden.getDate())){
                    LOG.warn("Wrong 'date (vorhanden-historisch)' specified. Skip persisting.");
                    errorMessage.append(NbBundle.getMessage(
                        StrAdrGeplanteAdresseEditor.class,
                        "StrAdrGeplanteAdresseEditor.prepareForSave().datFalschVorhandenHistorisch"));
                }
            }
            if (dcBauantrag.getDate() != null) {
                if (dcHistorisch.getDate().before(dcBauantrag.getDate())){
                    LOG.warn("Wrong 'date (bauantrag-historisch)' specified. Skip persisting.");
                    errorMessage.append(NbBundle.getMessage(
                        StrAdrGeplanteAdresseEditor.class,
                        "StrAdrGeplanteAdresseEditor.prepareForSave().datFalschBauantragHistorisch"));
                }
            }
            //grund muss ausgewählt werden
            if ( ((cbGrund.getSelectedItem() == null) ) ) {
                LOG.warn("No 'grund' specified. Skip persisting.");
                    errorMessage.append(NbBundle.getMessage(
                        StrAdrGeplanteAdresseEditor.class,
                        "StrAdrGeplanteAdresseEditor.prepareForSave().datHistorischGrund")); 
            }
        }
        
        //grund ausgewaehlt
        if ( ((cbGrund.getSelectedItem() != null) ) ) {
            if (dcHistorisch.getDate() == null) {
                    LOG.warn("No 'historisch' specified. Skip persisting.");
                    errorMessage.append(NbBundle.getMessage(
                        StrAdrGeplanteAdresseEditor.class,
                        "StrAdrGeplanteAdresseEditor.prepareForSave().datGrundHistorisch"));                
            }
        }
        
        //Beim Speichern einer nicht historischen neuen Adresse
        try{
            CidsBean myCB = this.getCidsBean();
            //Adresse bereits vorhanden
            if (myCB.getMetaObject().getStatus()==MetaObject.NEW){
                if (dcHistorisch.getDate() == null) {
                    String myStrasse = getOtherTableValue("str_adr_strasse",getMyWhere(cbStrassenname.getSelectedItem().toString())).getProperty("id").toString();
                    String myHausnummer = ftxHausnr.getText();
                    String myZusatz = txtAdr_zusatz.getText().trim();
                    String myQuery = null;

                    myQuery = " where fk_strasse_id = " + myStrasse + " and hausnr = " + myHausnummer + " and trim(adr_zusatz) ilike '" + myZusatz + "' and dat_historisch is null";

                    if(getOtherTableValue("str_adr_geplante_adresse", myQuery) != null){
                    LOG.warn("Not unique 'adress' specified. Skip persisting.");
                            errorMessage.append(NbBundle.getMessage(
                                StrAdrGeplanteAdresseEditor.class,
                                "StrAdrGeplanteAdresseEditor.prepareForSave().adresseVorhanden"));   
                    }
                }
            }else{
              //Beim Speichern eines ehemals historischen als nicht historisches
              String myId = String.valueOf(myCB.getProperty("id"));
              String myQuery = " where id = " + myId + " and dat_historisch is not null";
              CidsBean dbBean = getOtherTableValue("str_adr_geplante_adresse", myQuery);
              
              if(dbBean != null ){
                  if(dcHistorisch.getDate() == null){
                      LOG.warn("Before 'historisch' specified. Skip persisting.");
                            errorMessage.append(NbBundle.getMessage(
                                StrAdrGeplanteAdresseEditor.class,
                                "StrAdrGeplanteAdresseEditor.prepareForSave().historischVorhanden"));   
                  }
              }
            }
        } catch (Exception ex) {
            Exceptions.printStackTrace(ex);
        }
        

        
        if (errorMessage.length() > 0) {
            JOptionPane.showMessageDialog(
                StaticSwingTools.getParentFrame(this),
                NbBundle.getMessage(
                    StrAdrGeplanteAdresseEditor.class,
                    "StrAdrGeplanteAdresseEditor.prepareForSave().JOptionPane.message.prefix")
                        + errorMessage.toString()
                        + NbBundle.getMessage(
                            StrAdrGeplanteAdresseEditor.class,
                            "StrAdrGeplanteAdresseEditor.prepareForSave().JOptionPane.message.suffix"),
                NbBundle.getMessage(
                    StrAdrGeplanteAdresseEditor.class,
                    "StrAdrGeplanteAdresseEditor.prepareForSave().JOptionPane.title"),
                JOptionPane.WARNING_MESSAGE);

            return false;
        }
        return true;
    }
        
        @Override
    public CidsBean getCidsBean() {
        return cidsBean;
    }

    @Override
    public void setCidsBean(CidsBean cb) {
        //dispose();  Wenn Aufruf hier, dann wird ein neu gezeichnetes Polygon nicht erkannt.
        
            try {
                bindingGroup.unbind();
                this.cidsBean=cb;
                //8.5.17 s.Simmert: Methodenaufruf, weil sonst die Comboboxen nicht gefüllt werden
                //evtl. kann dies verbessert werden.
                DefaultCustomObjectEditor.setMetaClassInformationToMetaClassStoreComponentsInBindingGroup(
                        bindingGroup,
                        cb);
                panPreviewMap.initMap(cb, "georeferenz.geo_field");
                
                bindingGroup.bind();
                if (cb.getMetaObject().getStatus()==MetaObject.NEW){
                     //Defaultwerte setzen
                    //this.cidsBean.setProperty("antrag", getAntragsteller("Behörde"));
                    this.cidsBean.setProperty("antrag", getOtherTableValue("str_adr_geplante_adresse_antrag",getMyWhere("Behörde")));
                    this.cidsBean.setProperty("vorhaben", getOtherTableValue("str_adr_geplante_adresse_vorhaben",getMyWhere("Neubau")));
                    //this.cidsBean.setProperty("vorhaben", getVorhaben("Neubau"));
                }
            } catch (Exception ex) {
                Exceptions.printStackTrace(ex);
            }
    }

    @Override
    public void dispose() {
        super.dispose();
        if (this.isEditor){
            ((DefaultCismapGeometryComboBoxEditor)cbGeom).dispose();
        }
    }

    @Override
    public String getTitle() {
        return cidsBean.toString();
    }

    @Override
    public void setTitle(String string) {
        
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private de.cismet.cids.editors.DefaultBindableReferenceCombo cbAntragsteller;
    private javax.swing.JComboBox cbGeom;
    private de.cismet.cids.editors.DefaultBindableReferenceCombo cbGrund;
    private javax.swing.JComboBox cbStrassenname;
    private de.cismet.cids.editors.DefaultBindableReferenceCombo cbVorhaben;
    private de.cismet.cids.editors.DefaultBindableDateChooser dcAlkis;
    private de.cismet.cids.editors.DefaultBindableDateChooser dcBauantrag;
    private de.cismet.cids.editors.DefaultBindableDateChooser dcGeplant;
    private de.cismet.cids.editors.DefaultBindableDateChooser dcHistorisch;
    private de.cismet.cids.editors.DefaultBindableDateChooser dcVorhanden;
    private javax.swing.JFormattedTextField ftxHausnr;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel lblSchluessel;
    private javax.swing.JPanel panAdresse;
    private javax.swing.JPanel panDatum;
    private javax.swing.JPanel panFillerRechts;
    private javax.swing.JPanel panFillerRechtsDatum;
    private javax.swing.JPanel panFillerRechtsHaupt;
    private javax.swing.JPanel panFillerUnten;
    private javax.swing.JPanel panFillerUntenDatum;
    private javax.swing.JPanel panFillerUntenHaupt;
    private javax.swing.JPanel panGeometrie;
    private javax.swing.JPanel panGrund;
    private javax.swing.JPanel panHaupt;
    private de.cismet.cids.custom.objectrenderer.utils.DefaultPreviewMapPanel panPreviewMap;
    private de.cismet.tools.gui.RoundedPanel rpKarte;
    private de.cismet.tools.gui.SemiRoundedPanel semiRoundedPanel7;
    private javax.swing.JTextField txtAdr_zusatz;
    private javax.swing.JTextField txtBemerkung;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    @Override
    public void editorClosed(EditorClosedEvent ece) {
    }

    @Override
    public BindingGroup getBindingGroup() {
        return bindingGroup;
    }
}
