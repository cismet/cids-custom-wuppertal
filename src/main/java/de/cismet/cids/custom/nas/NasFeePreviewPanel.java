/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cismet.cids.custom.nas;

import de.cismet.cids.custom.utils.nas.NasProductTemplate;

/**
 * DOCUMENT ME!
 *
 * @author   daniel
 * @version  $Revision$, $Date$
 */
public class NasFeePreviewPanel extends javax.swing.JPanel {

    //~ Instance fields --------------------------------------------------------

    private boolean isPointType;
    private NasProductTemplate template;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblAnzahlTitle;
    private javax.swing.JLabel lblEigentuemer;
    private javax.swing.JLabel lblEigentuemerAnzahl;
    private javax.swing.JLabel lblEigentuemerGesamt;
    private javax.swing.JLabel lblFiller;
    private javax.swing.JLabel lblFlurstuecke;
    private javax.swing.JLabel lblFlurstueckeAnzahl;
    private javax.swing.JLabel lblFlurstueckeGesamt;
    private javax.swing.JLabel lblGebaeude;
    private javax.swing.JLabel lblGebaeudeAnzahl;
    private javax.swing.JLabel lblGebeaudeGesamt;
    private javax.swing.JLabel lblGesamt;
    private javax.swing.JLabel lblGesamtTitle;
    private javax.swing.JLabel lblGesamtValue;
    private javax.swing.JLabel lblPunkte;
    private javax.swing.JLabel lblPunkteAnzahl;
    private javax.swing.JLabel lblPunkteGesamt;
    private javax.swing.JLabel lblTitle;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates a new NasFeePreviewPanel object.
     */
    public NasFeePreviewPanel() {
        this(NasProductTemplate.OHNE_EIGENTUEMER);
    }

    /**
     * Creates new form NasFeePreviewPanel.
     *
     * @param  template  isPointType DOCUMENT ME!
     */
    public NasFeePreviewPanel(final NasProductTemplate template) {
        this.template = template;
        initComponents();
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @param  amount  DOCUMENT ME!
     * @param  value   DOCUMENT ME!
     */
    public void setFlurstueckLabels(final String amount, final String value) {
        lblFlurstueckeAnzahl.setText(amount);
        lblFlurstueckeGesamt.setText(value);
    }

    /**
     * DOCUMENT ME!
     *
     * @param  amount  DOCUMENT ME!
     * @param  value   DOCUMENT ME!
     */
    public void setPointLabels(final String amount, final String value) {
        lblPunkteAnzahl.setText(amount);
        lblPunkteGesamt.setText(value);
    }

    /**
     * DOCUMENT ME!
     *
     * @param  amount  DOCUMENT ME!
     * @param  value   DOCUMENT ME!
     */
    public void setGebaeudeLabels(final String amount, final String value) {
        lblGebaeudeAnzahl.setText(amount);
        lblGebeaudeGesamt.setText(value);
    }

    /**
     * DOCUMENT ME!
     *
     * @param  amount  DOCUMENT ME!
     * @param  value   DOCUMENT ME!
     */
    public void setEigentuemerLabels(final String amount, final String value) {
        lblEigentuemerAnzahl.setText(amount);
        lblEigentuemerGesamt.setText(value);
    }
    /**
     * DOCUMENT ME!
     *
     * @param  value  DOCUMENT ME!
     */
    public void setTotalLabel(final String value) {
        lblGesamtValue.setText(value);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblTitle = new javax.swing.JLabel();
        lblAnzahlTitle = new javax.swing.JLabel();
        lblGesamtTitle = new javax.swing.JLabel();
        if (template != NasProductTemplate.POINTS) {
            lblFlurstuecke = new javax.swing.JLabel();
        }
        if (template != NasProductTemplate.POINTS) {
            lblGebaeude = new javax.swing.JLabel();
        }
        if (template == NasProductTemplate.POINTS) {
            lblPunkte = new javax.swing.JLabel();
        }
        if (template != NasProductTemplate.POINTS) {
            lblFlurstueckeAnzahl = new javax.swing.JLabel();
        }
        if (template != NasProductTemplate.POINTS) {
            lblFlurstueckeGesamt = new javax.swing.JLabel();
        }
        if (template != NasProductTemplate.POINTS) {
            lblGebaeudeAnzahl = new javax.swing.JLabel();
        }
        if (template != NasProductTemplate.POINTS) {
            lblGebeaudeGesamt = new javax.swing.JLabel();
        }
        if (template == NasProductTemplate.POINTS) {
            lblPunkteAnzahl = new javax.swing.JLabel();
        }
        if (template == NasProductTemplate.POINTS) {
            lblPunkteGesamt = new javax.swing.JLabel();
        }
        jPanel1 = new javax.swing.JPanel();
        lblGesamtValue = new javax.swing.JLabel();
        lblGesamt = new javax.swing.JLabel();
        if (template == NasProductTemplate.KOMPLETT) {
            lblEigentuemer = new javax.swing.JLabel();
        }
        if (template == NasProductTemplate.KOMPLETT) {
            lblEigentuemerAnzahl = new javax.swing.JLabel();
        }
        if (template == NasProductTemplate.KOMPLETT) {
            lblEigentuemerGesamt = new javax.swing.JLabel();
        }
        lblFiller = new javax.swing.JLabel();

        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        lblTitle.setFont(new java.awt.Font("DejaVu Sans", 1, 14));                                               // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(
            lblTitle,
            org.openide.util.NbBundle.getMessage(NasFeePreviewPanel.class, "NasFeePreviewPanel.lblTitle.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 20, 10);
        add(lblTitle, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            lblAnzahlTitle,
            org.openide.util.NbBundle.getMessage(NasFeePreviewPanel.class, "NasFeePreviewPanel.lblAnzahlTitle.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 0.7;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        add(lblAnzahlTitle, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            lblGesamtTitle,
            org.openide.util.NbBundle.getMessage(NasFeePreviewPanel.class, "NasFeePreviewPanel.lblGesamtTitle.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        add(lblGesamtTitle, gridBagConstraints);

        if (template != NasProductTemplate.POINTS) {
            org.openide.awt.Mnemonics.setLocalizedText(
                lblFlurstuecke,
                org.openide.util.NbBundle.getMessage(
                    NasFeePreviewPanel.class,
                    "NasFeePreviewPanel.lblFlurstuecke.text")); // NOI18N
        }
        if (template != NasProductTemplate.POINTS) {
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 0);
            add(lblFlurstuecke, gridBagConstraints);
        }

        if (template != NasProductTemplate.POINTS) {
            org.openide.awt.Mnemonics.setLocalizedText(
                lblGebaeude,
                org.openide.util.NbBundle.getMessage(NasFeePreviewPanel.class, "NasFeePreviewPanel.lblGebaeude.text")); // NOI18N
        }
        if (template != NasProductTemplate.POINTS) {
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 0);
            add(lblGebaeude, gridBagConstraints);
        }

        if (template == NasProductTemplate.POINTS) {
            org.openide.awt.Mnemonics.setLocalizedText(
                lblPunkte,
                org.openide.util.NbBundle.getMessage(NasFeePreviewPanel.class, "NasFeePreviewPanel.lblPunkte.text")); // NOI18N
        }
        if (template == NasProductTemplate.POINTS) {
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 0);
            add(lblPunkte, gridBagConstraints);
        }

        if (template != NasProductTemplate.POINTS) {
            org.openide.awt.Mnemonics.setLocalizedText(
                lblFlurstueckeAnzahl,
                org.openide.util.NbBundle.getMessage(
                    NasFeePreviewPanel.class,
                    "NasFeePreviewPanel.lblFlurstueckeAnzahl.text")); // NOI18N
        }
        if (template != NasProductTemplate.POINTS) {
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
            add(lblFlurstueckeAnzahl, gridBagConstraints);
        }

        if (template != NasProductTemplate.POINTS) {
            org.openide.awt.Mnemonics.setLocalizedText(
                lblFlurstueckeGesamt,
                org.openide.util.NbBundle.getMessage(
                    NasFeePreviewPanel.class,
                    "NasFeePreviewPanel.lblFlurstueckeGesamt.text")); // NOI18N
        }
        if (template != NasProductTemplate.POINTS) {
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
            add(lblFlurstueckeGesamt, gridBagConstraints);
        }

        if (template != NasProductTemplate.POINTS) {
            org.openide.awt.Mnemonics.setLocalizedText(
                lblGebaeudeAnzahl,
                org.openide.util.NbBundle.getMessage(
                    NasFeePreviewPanel.class,
                    "NasFeePreviewPanel.lblGebaeudeAnzahl.text")); // NOI18N
        }
        if (template != NasProductTemplate.POINTS) {
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
            add(lblGebaeudeAnzahl, gridBagConstraints);
        }

        if (template != NasProductTemplate.POINTS) {
            org.openide.awt.Mnemonics.setLocalizedText(
                lblGebeaudeGesamt,
                org.openide.util.NbBundle.getMessage(
                    NasFeePreviewPanel.class,
                    "NasFeePreviewPanel.lblGebeaudeGesamt.text")); // NOI18N
        }
        if (template != NasProductTemplate.POINTS) {
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
            add(lblGebeaudeGesamt, gridBagConstraints);
        }

        if (template == NasProductTemplate.POINTS) {
            org.openide.awt.Mnemonics.setLocalizedText(
                lblPunkteAnzahl,
                org.openide.util.NbBundle.getMessage(
                    NasFeePreviewPanel.class,
                    "NasFeePreviewPanel.lblPunkteAnzahl.text")); // NOI18N
        }
        if (template == NasProductTemplate.POINTS) {
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
            add(lblPunkteAnzahl, gridBagConstraints);
        }

        if (template == NasProductTemplate.POINTS) {
            org.openide.awt.Mnemonics.setLocalizedText(
                lblPunkteGesamt,
                org.openide.util.NbBundle.getMessage(
                    NasFeePreviewPanel.class,
                    "NasFeePreviewPanel.lblPunkteGesamt.text")); // NOI18N
        }
        if (template == NasProductTemplate.POINTS) {
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
            add(lblPunkteGesamt, gridBagConstraints);
        }

        jPanel1.setOpaque(false);
        jPanel1.setLayout(new java.awt.GridBagLayout());

        lblGesamtValue.setFont(new java.awt.Font("DejaVu Sans", 1, 14));                                               // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(
            lblGesamtValue,
            org.openide.util.NbBundle.getMessage(NasFeePreviewPanel.class, "NasFeePreviewPanel.lblGesamtValue.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(20, 10, 10, 0);
        jPanel1.add(lblGesamtValue, gridBagConstraints);

        lblGesamt.setFont(new java.awt.Font("DejaVu Sans", 1, 14));                                               // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(
            lblGesamt,
            org.openide.util.NbBundle.getMessage(NasFeePreviewPanel.class, "NasFeePreviewPanel.lblGesamt.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 10, 0);
        jPanel1.add(lblGesamt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        add(jPanel1, gridBagConstraints);

        if (template == NasProductTemplate.KOMPLETT) {
            org.openide.awt.Mnemonics.setLocalizedText(
                lblEigentuemer,
                org.openide.util.NbBundle.getMessage(
                    NasFeePreviewPanel.class,
                    "NasFeePreviewPanel.lblEigentuemer.text")); // NOI18N
        }
        if (template == NasProductTemplate.KOMPLETT) {
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 0);
            add(lblEigentuemer, gridBagConstraints);
        }

        if (template == NasProductTemplate.KOMPLETT) {
            org.openide.awt.Mnemonics.setLocalizedText(
                lblEigentuemerAnzahl,
                org.openide.util.NbBundle.getMessage(
                    NasFeePreviewPanel.class,
                    "NasFeePreviewPanel.lblEigentuemerAnzahl.text")); // NOI18N
        }
        if (template == NasProductTemplate.KOMPLETT) {
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
            add(lblEigentuemerAnzahl, gridBagConstraints);
        }

        if (template == NasProductTemplate.KOMPLETT) {
            org.openide.awt.Mnemonics.setLocalizedText(
                lblEigentuemerGesamt,
                org.openide.util.NbBundle.getMessage(
                    NasFeePreviewPanel.class,
                    "NasFeePreviewPanel.lblEigentuemerGesamt.text")); // NOI18N
        }
        if (template == NasProductTemplate.KOMPLETT) {
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
            add(lblEigentuemerGesamt, gridBagConstraints);
        }

        org.openide.awt.Mnemonics.setLocalizedText(
            lblFiller,
            org.openide.util.NbBundle.getMessage(NasFeePreviewPanel.class, "NasFeePreviewPanel.lblFiller.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(lblFiller, gridBagConstraints);
    }                                                                                                             // </editor-fold>//GEN-END:initComponents
}
