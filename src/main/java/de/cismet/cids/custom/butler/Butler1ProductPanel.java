/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.cismet.cids.custom.butler;

import com.fasterxml.jackson.databind.ObjectMapper;

import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.Property;

import org.openide.util.Exceptions;

import java.io.IOException;

import java.util.ArrayList;

import javax.swing.JFrame;
import javax.swing.ListSelectionModel;

import de.cismet.cids.custom.utils.butler.ButlerFormat;
import de.cismet.cids.custom.utils.butler.ButlerProduct;
import de.cismet.cids.custom.utils.butler.ButlerResolution;

/**
 * DOCUMENT ME!
 *
 * @author   daniel
 * @version  $Revision$, $Date$
 */
public class Butler1ProductPanel extends javax.swing.JPanel {

    //~ Instance fields --------------------------------------------------------

    ArrayList<ButlerProductGroup> productGroups;
    ArrayList<ButlerProduct> products;
    ArrayList<ButlerResolution> resolutions;
    ArrayList<ButlerFormat> formats;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btGroupFormat;
    private javax.swing.JComboBox cbProduktGruppe;
    private javax.swing.JComboBox cbResolution;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblAuflösung;
    private javax.swing.JLabel lblFiller;
    private javax.swing.JLabel lblFormat;
    private javax.swing.JLabel lblProdukt;
    private javax.swing.JLabel lblProduktGruppe;
    private javax.swing.JList lstProdukt;
    private javax.swing.JPanel pnlFormat;
    private javax.swing.JRadioButton rbDxf;
    private javax.swing.JRadioButton rbGeoTif;
    private javax.swing.JRadioButton rbShp;
    private javax.swing.JRadioButton rbTif;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form Butler1ProductPanel.
     */
    public Butler1ProductPanel() {
        loadPrductDescriptions();
        initComponents();
        lstProdukt.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        btGroupFormat = new javax.swing.ButtonGroup();
        lblProduktGruppe = new javax.swing.JLabel();
        cbProduktGruppe = new javax.swing.JComboBox();
        lblProdukt = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstProdukt = new javax.swing.JList();
        lblFormat = new javax.swing.JLabel();
        pnlFormat = new javax.swing.JPanel();
        rbDxf = new javax.swing.JRadioButton();
        rbShp = new javax.swing.JRadioButton();
        rbTif = new javax.swing.JRadioButton();
        rbGeoTif = new javax.swing.JRadioButton();
        lblFiller = new javax.swing.JLabel();
        lblAuflösung = new javax.swing.JLabel();
        cbResolution = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setMinimumSize(new java.awt.Dimension(400, 291));
        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(
            lblProduktGruppe,
            org.openide.util.NbBundle.getMessage(
                Butler1ProductPanel.class,
                "Butler1ProductPanel.lblProduktGruppe.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 40);
        add(lblProduktGruppe, gridBagConstraints);

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create(
                "${productGroups}");
        org.jdesktop.swingbinding.JComboBoxBinding jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings
                    .createJComboBoxBinding(
                        org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                        this,
                        eLProperty,
                        cbProduktGruppe);
        bindingGroup.addBinding(jComboBoxBinding);

        cbProduktGruppe.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    cbProduktGruppeActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 10, 5);
        add(cbProduktGruppe, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            lblProdukt,
            org.openide.util.NbBundle.getMessage(Butler1ProductPanel.class, "Butler1ProductPanel.lblProdukt.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 10, 40);
        add(lblProdukt, gridBagConstraints);

        jScrollPane1.setMinimumSize(new java.awt.Dimension(250, 150));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(258, 150));

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${products}");
        final org.jdesktop.swingbinding.JListBinding jListBinding = org.jdesktop.swingbinding.SwingBindings
                    .createJListBinding(
                        org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                        this,
                        eLProperty,
                        lstProdukt,
                        "productBinding");
        bindingGroup.addBinding(jListBinding);

        jScrollPane1.setViewportView(lstProdukt);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(jScrollPane1, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            lblFormat,
            org.openide.util.NbBundle.getMessage(Butler1ProductPanel.class, "Butler1ProductPanel.lblFormat.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 10, 40);
        add(lblFormat, gridBagConstraints);

        pnlFormat.setLayout(new java.awt.GridBagLayout());

        btGroupFormat.add(rbDxf);
        org.openide.awt.Mnemonics.setLocalizedText(
            rbDxf,
            org.openide.util.NbBundle.getMessage(Butler1ProductPanel.class, "Butler1ProductPanel.rbDxf.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        pnlFormat.add(rbDxf, gridBagConstraints);

        btGroupFormat.add(rbShp);
        org.openide.awt.Mnemonics.setLocalizedText(
            rbShp,
            org.openide.util.NbBundle.getMessage(Butler1ProductPanel.class, "Butler1ProductPanel.rbShp.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        pnlFormat.add(rbShp, gridBagConstraints);

        btGroupFormat.add(rbTif);
        org.openide.awt.Mnemonics.setLocalizedText(
            rbTif,
            org.openide.util.NbBundle.getMessage(Butler1ProductPanel.class, "Butler1ProductPanel.rbTif.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        pnlFormat.add(rbTif, gridBagConstraints);

        btGroupFormat.add(rbGeoTif);
        org.openide.awt.Mnemonics.setLocalizedText(
            rbGeoTif,
            org.openide.util.NbBundle.getMessage(Butler1ProductPanel.class, "Butler1ProductPanel.rbGeoTif.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        pnlFormat.add(rbGeoTif, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            lblFiller,
            org.openide.util.NbBundle.getMessage(Butler1ProductPanel.class, "Butler1ProductPanel.lblFiller.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        pnlFormat.add(lblFiller, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(pnlFormat, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            lblAuflösung,
            org.openide.util.NbBundle.getMessage(Butler1ProductPanel.class, "Butler1ProductPanel.lblAuflösung.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 10, 40);
        add(lblAuflösung, gridBagConstraints);

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${resolutions}");
        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(
                org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE,
                this,
                eLProperty,
                cbResolution,
                "resolutionBinding");
        bindingGroup.addBinding(jComboBoxBinding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        add(cbResolution, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        add(jSeparator1, gridBagConstraints);

        final javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(
                0,
                414,
                Short.MAX_VALUE));
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(
                0,
                241,
                Short.MAX_VALUE));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel1, gridBagConstraints);

        bindingGroup.bind();
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void cbProduktGruppeActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbProduktGruppeActionPerformed
        final ButlerProductGroup productGroup = ((ButlerProductGroup)cbProduktGruppe.getSelectedItem());
        if (productGroup != null) {
            final Binding productBinding = bindingGroup.getBinding("productBinding");
            final Property productProp = productBinding.getSourceProperty();
            productProp.setValue(this, productGroup.getButlerProducts());
            final Binding resolutionBinding = bindingGroup.getBinding("resolutionBinding");
            final Property resolutionProp = resolutionBinding.getSourceProperty();
            resolutionProp.setValue(this, productGroup.getButlerResolutions());
            productGroup.getButlerFormats();
            updateFormatButtons(productGroup.getButlerFormats());
        }
    }//GEN-LAST:event_cbProduktGruppeActionPerformed

    /**
     * DOCUMENT ME!
     */
    private void loadPrductDescriptions() { 
       try {
            final ObjectMapper mapper = new ObjectMapper();
            final ButlerProductInfo tester = mapper.readValue(ButlerProductInfo.class.getResourceAsStream(
                        "/de/cismet/cids/custom/butler/productDescription.json"),
                    ButlerProductInfo.class);
            productGroups = tester.getProductGroups();
            products = productGroups.get(0).getButlerProducts();
            resolutions = productGroups.get(0).getButlerResolutions();
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    public ArrayList<ButlerProductGroup> getProductGroups() {
        return productGroups;
    }

    /**
     * DOCUMENT ME!
     *
     * @param  productGroups  DOCUMENT ME!
     */
    public void setProductGroups(final ArrayList<ButlerProductGroup> productGroups) {
        this.productGroups = productGroups;
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    public ArrayList<ButlerProduct> getProducts() {
        return products;
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    public ButlerProduct getSelectedProduct() {
        final ButlerProduct bp = (ButlerProduct)lstProdukt.getSelectedValue();
        if (bp != null) {
            if (rbDxf.isSelected()) {
                bp.setFormat(new ButlerFormat("dxf"));
            } else if (rbGeoTif.isSelected()) {
                bp.setFormat(new ButlerFormat("tif"));
            } else if (rbShp.isSelected()) {
                bp.setFormat(new ButlerFormat("shape"));
            } else if (rbTif.isSelected()) {
                bp.setFormat(new ButlerFormat("tif"));
            }
            final ButlerResolution res = (ButlerResolution)cbResolution.getSelectedItem();
            bp.setResolution(res);
        }
        return bp;
    }

    /**
     * DOCUMENT ME!
     *
     * @param  products  args products DOCUMENT ME!
     */
    public void setProducts(final ArrayList<ButlerProduct> products) {
        this.products = products;
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    public ArrayList<ButlerResolution> getResolutions() {
        return resolutions;
    }

    /**
     * DOCUMENT ME!
     *
     * @param  resolution  args resolution DOCUMENT ME!
     */
    public void setResolutions(final ArrayList<ButlerResolution> resolution) {
        this.resolutions = resolution;
    }

    /**
     * DOCUMENT ME!
     *
     * @param  args  DOCUMENT ME!
     */
    public static void main(final String[] args) {
        final JFrame f = new JFrame();
        f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        f.getContentPane().add(new Butler1ProductPanel());
        f.pack();
        f.setVisible(true);
    }

    /**
     * DOCUMENT ME!
     *
     * @param  allowedButlerFormats  DOCUMENT ME!
     */
    private void updateFormatButtons(final ArrayList<ButlerFormat> allowedButlerFormats) {
        // remove selection for all
        btGroupFormat.clearSelection();

        // set them all disabled
        rbDxf.setEnabled(false);
        rbGeoTif.setEnabled(false);
        rbShp.setEnabled(false);
        rbTif.setEnabled(false);

//        enable the ones that are currentyl allowed
        for (final ButlerFormat f : allowedButlerFormats) {
            if (f.getKey().equals("TIF")) {
                rbTif.setEnabled(true);
            } else if (f.getKey().equals("GEOTIF")) {
                rbGeoTif.setEnabled(true);
            } else if (f.getKey().equals("DXF")) {
                rbDxf.setEnabled(true);
            } else if (f.getKey().equals("SHAPE")) {
                rbShp.setEnabled(true);
            }
        }
    }
}
